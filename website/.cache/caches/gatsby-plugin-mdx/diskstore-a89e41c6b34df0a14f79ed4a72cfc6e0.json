{"expireTime":9007200846064555000,"key":"gatsby-plugin-mdx-entire-payload-fdfeb4b0a9e7ec99ef499fb99700b716-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"\\n## Global","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":12,"offset":11},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":12,"offset":11},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Nexus provides last-resort error handling for your app. It handles both of Node's ","position":{"start":{"line":3,"column":1,"offset":13},"end":{"line":3,"column":83,"offset":95},"indent":[]}},{"type":"link","title":null,"url":"https://nodejs.org/api/process.html#process_event_uncaughtexception","children":[{"type":"inlineCode","value":"uncaughtException","position":{"start":{"line":3,"column":84,"offset":96},"end":{"line":3,"column":103,"offset":115},"indent":[]}}],"position":{"start":{"line":3,"column":83,"offset":95},"end":{"line":3,"column":173,"offset":185},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":3,"column":173,"offset":185},"end":{"line":3,"column":178,"offset":190},"indent":[]}},{"type":"link","title":null,"url":"https://nodejs.org/api/process.html#process_event_unhandledrejection","children":[{"type":"inlineCode","value":"unhandledRejection","position":{"start":{"line":3,"column":179,"offset":191},"end":{"line":3,"column":199,"offset":211},"indent":[]}}],"position":{"start":{"line":3,"column":178,"offset":190},"end":{"line":3,"column":270,"offset":282},"indent":[]}},{"type":"text","value":" process events. The error will be logged and then your app process will be terminated with exit code 1.","position":{"start":{"line":3,"column":270,"offset":282},"end":{"line":3,"column":374,"offset":386},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":13},"end":{"line":3,"column":374,"offset":386},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Error Handling\",\"metaTitle\":\"Error Handling\"}","position":{"start":{"line":6,"column":1,"offset":389},"end":{"line":6,"column":84,"offset":472},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":84,"offset":472}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Error Handling\",\n  \"metaTitle\": \"Error Handling\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\\\n## Global\"), mdx(\"p\", null, \"Nexus provides last-resort error handling for your app. It handles both of Node's \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nodejs.org/api/process.html#process_event_uncaughtexception\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"uncaughtException\")), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nodejs.org/api/process.html#process_event_unhandledrejection\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"unhandledRejection\")), \" process events. The error will be logged and then your app process will be terminated with exit code 1.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Error Handling\",\n  \"metaTitle\": \"Error Handling\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`\\\\n## Global`}</p>\n    <p>{`Nexus provides last-resort error handling for your app. It handles both of Node's `}<a parentName=\"p\" {...{\n        \"href\": \"https://nodejs.org/api/process.html#process_event_uncaughtexception\"\n      }}><inlineCode parentName=\"a\">{`uncaughtException`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://nodejs.org/api/process.html#process_event_unhandledrejection\"\n      }}><inlineCode parentName=\"a\">{`unhandledRejection`}</inlineCode></a>{` process events. The error will be logged and then your app process will be terminated with exit code 1.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}