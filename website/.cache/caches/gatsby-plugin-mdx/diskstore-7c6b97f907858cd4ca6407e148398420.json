{"expireTime":9007200846064525000,"key":"gatsby-plugin-mdx-entire-payload-a4471d7daf29b6d786f6b21514ac941c-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Introduction","position":{"start":{"line":1,"column":4,"offset":3},"end":{"line":1,"column":16,"offset":15},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":16,"offset":15},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Welcome to ","position":{"start":{"line":3,"column":1,"offset":17},"end":{"line":3,"column":12,"offset":28},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"the","position":{"start":{"line":3,"column":13,"offset":29},"end":{"line":3,"column":16,"offset":32},"indent":[]}}],"position":{"start":{"line":3,"column":12,"offset":28},"end":{"line":3,"column":17,"offset":33},"indent":[]}},{"type":"text","value":" Neuxus tutorial! If you're new to Nexus and want a guided learning journey, this is the place! Through a handful of chapters we're going to be building just enough of a blog to give you an overview of Nexus; what it is and what it can do.","position":{"start":{"line":3,"column":17,"offset":33},"end":{"line":3,"column":256,"offset":272},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":17},"end":{"line":3,"column":256,"offset":272},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This tutorial is still under construction. Some chapters will continue to be refined and more added. If you're looking for our old tutorial content, it can still be found ","position":{"start":{"line":5,"column":1,"offset":274},"end":{"line":5,"column":172,"offset":445},"indent":[]}},{"type":"link","title":null,"url":"/getting-started/tutorial","children":[{"type":"text","value":"here","position":{"start":{"line":5,"column":173,"offset":446},"end":{"line":5,"column":177,"offset":450},"indent":[]}}],"position":{"start":{"line":5,"column":172,"offset":445},"end":{"line":5,"column":205,"offset":478},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":5,"column":205,"offset":478},"end":{"line":5,"column":206,"offset":479},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":274},"end":{"line":5,"column":206,"offset":479},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Assumed Tools","position":{"start":{"line":7,"column":4,"offset":484},"end":{"line":7,"column":17,"offset":497},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":481},"end":{"line":7,"column":17,"offset":497},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Throughout this journey, we'll be making a few minor assumptions about your toolchain to keep the content flowing:","position":{"start":{"line":9,"column":1,"offset":499},"end":{"line":9,"column":115,"offset":613},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":499},"end":{"line":9,"column":115,"offset":613},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Using ","position":{"start":{"line":11,"column":3,"offset":617},"end":{"line":11,"column":9,"offset":623},"indent":[]}},{"type":"inlineCode","value":"npm","position":{"start":{"line":11,"column":9,"offset":623},"end":{"line":11,"column":14,"offset":628},"indent":[]}},{"type":"text","value":" as the package manager.","position":{"start":{"line":11,"column":14,"offset":628},"end":{"line":11,"column":38,"offset":652},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":617},"end":{"line":11,"column":38,"offset":652},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":615},"end":{"line":11,"column":38,"offset":652},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Using a ","position":{"start":{"line":12,"column":3,"offset":655},"end":{"line":12,"column":11,"offset":663},"indent":[]}},{"type":"text","value":"*","position":{"start":{"line":12,"column":11,"offset":663},"end":{"line":12,"column":13,"offset":665},"indent":[]}},{"type":"text","value":"nix OS","position":{"start":{"line":12,"column":13,"offset":665},"end":{"line":12,"column":19,"offset":671},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":655},"end":{"line":12,"column":19,"offset":671},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":653},"end":{"line":12,"column":19,"offset":671},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Using VSCode","position":{"start":{"line":13,"column":3,"offset":674},"end":{"line":13,"column":15,"offset":686},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":674},"end":{"line":13,"column":15,"offset":686},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":672},"end":{"line":13,"column":15,"offset":686},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":615},"end":{"line":13,"column":15,"offset":686},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you're using another set of tools, like Yarn on Windows with Sublime Text, that's totally fine and welcome! Just know that at you'll occasionally need to adapt minor instructions to your situation.","position":{"start":{"line":15,"column":1,"offset":688},"end":{"line":15,"column":201,"offset":888},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":688},"end":{"line":15,"column":201,"offset":888},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Conventions","position":{"start":{"line":17,"column":4,"offset":893},"end":{"line":17,"column":15,"offset":904},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":890},"end":{"line":17,"column":15,"offset":904},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There's a few conventions used throughout this tutorial that you should know about.","position":{"start":{"line":19,"column":1,"offset":906},"end":{"line":19,"column":84,"offset":989},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":906},"end":{"line":19,"column":84,"offset":989},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Annotated Code Blocks","position":{"start":{"line":21,"column":5,"offset":995},"end":{"line":21,"column":26,"offset":1016},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":993},"end":{"line":21,"column":28,"offset":1018},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":993},"end":{"line":21,"column":28,"offset":1018},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Most Code Blocks are explained with annotations. Take the following for example. Immediately following the codeblock are numbered points. Each corresponds to a line annotated with that number in the code block.","position":{"start":{"line":23,"column":3,"offset":1022},"end":{"line":23,"column":213,"offset":1232},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":1022},"end":{"line":23,"column":213,"offset":1232},"indent":[]}},{"type":"jsx","value":"<!-- prettier-ignore -->","position":{"start":{"line":25,"column":3,"offset":1236},"end":{"line":25,"column":27,"offset":1260},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"const a = 1 as const // 1\n\ninterface A {}       // 2\ninterface A {}       // 2\n\nconst b: any = 1     // 3","position":{"start":{"line":26,"column":3,"offset":1263},"end":{"line":33,"column":6,"offset":1388},"indent":[3,1,3,3,1,3,3]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Use ","position":{"start":{"line":35,"column":6,"offset":1395},"end":{"line":35,"column":10,"offset":1399},"indent":[]}},{"type":"inlineCode","value":"as const","position":{"start":{"line":35,"column":10,"offset":1399},"end":{"line":35,"column":20,"offset":1409},"indent":[]}},{"type":"text","value":" to make TS take the narrowest inference. Here ","position":{"start":{"line":35,"column":20,"offset":1409},"end":{"line":35,"column":67,"offset":1456},"indent":[]}},{"type":"inlineCode","value":"1","position":{"start":{"line":35,"column":67,"offset":1456},"end":{"line":35,"column":70,"offset":1459},"indent":[]}},{"type":"text","value":" vs ","position":{"start":{"line":35,"column":70,"offset":1459},"end":{"line":35,"column":74,"offset":1463},"indent":[]}},{"type":"inlineCode","value":"number","position":{"start":{"line":35,"column":74,"offset":1463},"end":{"line":35,"column":82,"offset":1471},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":35,"column":82,"offset":1471},"end":{"line":35,"column":83,"offset":1472},"indent":[]}}],"position":{"start":{"line":35,"column":6,"offset":1395},"end":{"line":35,"column":83,"offset":1472},"indent":[]}}],"position":{"start":{"line":35,"column":3,"offset":1392},"end":{"line":35,"column":83,"offset":1472},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Same-named interfaces will merge into one.","position":{"start":{"line":36,"column":6,"offset":1478},"end":{"line":36,"column":48,"offset":1520},"indent":[]}}],"position":{"start":{"line":36,"column":6,"offset":1478},"end":{"line":36,"column":48,"offset":1520},"indent":[]}}],"position":{"start":{"line":36,"column":3,"offset":1475},"end":{"line":36,"column":48,"offset":1520},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Use ","position":{"start":{"line":37,"column":6,"offset":1526},"end":{"line":37,"column":10,"offset":1530},"indent":[]}},{"type":"inlineCode","value":"any","position":{"start":{"line":37,"column":10,"offset":1530},"end":{"line":37,"column":15,"offset":1535},"indent":[]}},{"type":"text","value":" to effectively disable type-checking","position":{"start":{"line":37,"column":15,"offset":1535},"end":{"line":37,"column":52,"offset":1572},"indent":[]}}],"position":{"start":{"line":37,"column":6,"offset":1526},"end":{"line":37,"column":52,"offset":1572},"indent":[]}}],"position":{"start":{"line":37,"column":3,"offset":1523},"end":{"line":37,"column":52,"offset":1572},"indent":[]}}],"position":{"start":{"line":35,"column":3,"offset":1392},"end":{"line":37,"column":52,"offset":1572},"indent":[3,3]}}],"position":{"start":{"line":21,"column":1,"offset":991},"end":{"line":38,"column":1,"offset":1573},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Auxiliary Content","position":{"start":{"line":39,"column":5,"offset":1578},"end":{"line":39,"column":22,"offset":1595},"indent":[]}}],"position":{"start":{"line":39,"column":3,"offset":1576},"end":{"line":39,"column":24,"offset":1597},"indent":[]}}],"position":{"start":{"line":39,"column":3,"offset":1576},"end":{"line":39,"column":24,"offset":1597},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Sometimes content that isn't core to the current flow but related to it will be mentioned. That looks like so:","position":{"start":{"line":41,"column":3,"offset":1601},"end":{"line":41,"column":113,"offset":1711},"indent":[]}}],"position":{"start":{"line":41,"column":3,"offset":1601},"end":{"line":41,"column":113,"offset":1711},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Hello there, have a nice day!","position":{"start":{"line":43,"column":5,"offset":1717},"end":{"line":43,"column":34,"offset":1746},"indent":[]}}],"position":{"start":{"line":43,"column":5,"offset":1717},"end":{"line":43,"column":34,"offset":1746},"indent":[]}}],"position":{"start":{"line":43,"column":3,"offset":1715},"end":{"line":43,"column":34,"offset":1746},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1574},"end":{"line":43,"column":34,"offset":1746},"indent":[1,1,1,1]}}],"position":{"start":{"line":21,"column":1,"offset":991},"end":{"line":43,"column":34,"offset":1746},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Copy-Pasting","position":{"start":{"line":45,"column":4,"offset":1751},"end":{"line":45,"column":16,"offset":1763},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1748},"end":{"line":45,"column":16,"offset":1763},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As you progress you'll be writing code, of course. Often you'll have the chance to copy and paste our code, but we strongly suggest if you're just starting out to ","position":{"start":{"line":47,"column":1,"offset":1765},"end":{"line":47,"column":164,"offset":1928},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"write the code yourself","position":{"start":{"line":47,"column":166,"offset":1930},"end":{"line":47,"column":189,"offset":1953},"indent":[]}}],"position":{"start":{"line":47,"column":164,"offset":1928},"end":{"line":47,"column":191,"offset":1955},"indent":[]}},{"type":"text","value":". This will expose you to ","position":{"start":{"line":47,"column":191,"offset":1955},"end":{"line":47,"column":217,"offset":1981},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"experience","position":{"start":{"line":47,"column":218,"offset":1982},"end":{"line":47,"column":228,"offset":1992},"indent":[]}}],"position":{"start":{"line":47,"column":217,"offset":1981},"end":{"line":47,"column":229,"offset":1993},"indent":[]}},{"type":"text","value":" of writing a Nexus app. Things like autocompletion and letting static safety guide your implementations, e.g. inside a GraphQL resolver. Also if you're new to TypeScript getting used to encountering, understanding, and fixing static type errors is essential practice. That said at no time should you feel ","position":{"start":{"line":47,"column":229,"offset":1993},"end":{"line":47,"column":535,"offset":2299},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"frustrated","position":{"start":{"line":47,"column":536,"offset":2300},"end":{"line":47,"column":546,"offset":2310},"indent":[]}}],"position":{"start":{"line":47,"column":535,"offset":2299},"end":{"line":47,"column":547,"offset":2311},"indent":[]}},{"type":"text","value":". If things just aren't working, copy-paste our work as needed. Then, once things ","position":{"start":{"line":47,"column":547,"offset":2311},"end":{"line":47,"column":629,"offset":2393},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"are","position":{"start":{"line":47,"column":630,"offset":2394},"end":{"line":47,"column":633,"offset":2397},"indent":[]}}],"position":{"start":{"line":47,"column":629,"offset":2393},"end":{"line":47,"column":634,"offset":2398},"indent":[]}},{"type":"text","value":" working, taking a momemnt muck around, break things, fix them again, etc. is almost always time well spent.","position":{"start":{"line":47,"column":634,"offset":2398},"end":{"line":47,"column":742,"offset":2506},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1765},"end":{"line":47,"column":742,"offset":2506},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Wrapping Up","position":{"start":{"line":49,"column":4,"offset":2511},"end":{"line":49,"column":15,"offset":2522},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":2508},"end":{"line":49,"column":15,"offset":2522},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Thanks for checking out Nexus, we hope you're as excited","position":{"start":{"line":51,"column":1,"offset":2524},"end":{"line":51,"column":57,"offset":2580},"indent":[]}},{"type":"jsx","value":"<br/>","position":{"start":{"line":51,"column":57,"offset":2580},"end":{"line":51,"column":62,"offset":2585},"indent":[]}},{"type":"text","value":"to learn about it as we are to show it to you! :rocket:","position":{"start":{"line":51,"column":62,"offset":2585},"end":{"line":51,"column":117,"offset":2640},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":2524},"end":{"line":51,"column":117,"offset":2640},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"0. Introduction\"}","position":{"start":{"line":54,"column":1,"offset":2643},"end":{"line":54,"column":56,"offset":2698},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":54,"column":56,"offset":2698}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"0. Introduction\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"introduction\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Introduction\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Welcome to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"the\"), \" Neuxus tutorial! If you're new to Nexus and want a guided learning journey, this is the place! Through a handful of chapters we're going to be building just enough of a blog to give you an overview of Nexus; what it is and what it can do.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This tutorial is still under construction. Some chapters will continue to be refined and more added. If you're looking for our old tutorial content, it can still be found \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/getting-started/tutorial\"\n  }), \"here\"), \".\")), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"assumed-tools\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#assumed-tools\",\n    \"aria-label\": \"assumed tools permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Assumed Tools\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Throughout this journey, we'll be making a few minor assumptions about your toolchain to keep the content flowing:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"npm\"), \" as the package manager.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Using a \", \"*\", \"nix OS\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Using VSCode\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If you're using another set of tools, like Yarn on Windows with Sublime Text, that's totally fine and welcome! Just know that at you'll occasionally need to adapt minor instructions to your situation.\")), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"conventions\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#conventions\",\n    \"aria-label\": \"conventions permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Conventions\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"There's a few conventions used throughout this tutorial that you should know about.\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Annotated Code Blocks\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Most Code Blocks are explained with annotations. Take the following for example. Immediately following the codeblock are numbered points. Each corresponds to a line annotated with that number in the code block.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const a = 1 as const // 1\\n\\ninterface A {}       // 2\\ninterface A {}       // 2\\n\\nconst b: any = 1     // 3\\n\")), mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"as const\"), \" to make TS take the narrowest inference. Here \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"1\"), \" vs \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"number\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Same-named interfaces will merge into one.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"any\"), \" to effectively disable type-checking\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Auxiliary Content\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Sometimes content that isn't core to the current flow but related to it will be mentioned. That looks like so:\"), mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Hello there, have a nice day!\"))))), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"copy-pasting\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#copy-pasting\",\n    \"aria-label\": \"copy pasting permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Copy-Pasting\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"As you progress you'll be writing code, of course. Often you'll have the chance to copy and paste our code, but we strongly suggest if you're just starting out to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"write the code yourself\"), \". This will expose you to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"experience\"), \" of writing a Nexus app. Things like autocompletion and letting static safety guide your implementations, e.g. inside a GraphQL resolver. Also if you're new to TypeScript getting used to encountering, understanding, and fixing static type errors is essential practice. That said at no time should you feel \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"frustrated\"), \". If things just aren't working, copy-paste our work as needed. Then, once things \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"are\"), \" working, taking a momemnt muck around, break things, fix them again, etc. is almost always time well spent.\")), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"wrapping-up\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#wrapping-up\",\n    \"aria-label\": \"wrapping up permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Wrapping Up\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Thanks for checking out Nexus, we hope you're as excited\", mdx(\"br\", null), \"to learn about it as we are to show it to you! :rocket:\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"0. Introduction\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"introduction\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#introduction\",\n          \"aria-label\": \"introduction permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Introduction`}</h2><p parentName=\"section\">{`Welcome to `}<em parentName=\"p\">{`the`}</em>{` Neuxus tutorial! If you're new to Nexus and want a guided learning journey, this is the place! Through a handful of chapters we're going to be building just enough of a blog to give you an overview of Nexus; what it is and what it can do.`}</p><p parentName=\"section\">{`This tutorial is still under construction. Some chapters will continue to be refined and more added. If you're looking for our old tutorial content, it can still be found `}<a parentName=\"p\" {...{\n          \"href\": \"/getting-started/tutorial\"\n        }}>{`here`}</a>{`.`}</p></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"assumed-tools\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#assumed-tools\",\n          \"aria-label\": \"assumed tools permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Assumed Tools`}</h2><p parentName=\"section\">{`Throughout this journey, we'll be making a few minor assumptions about your toolchain to keep the content flowing:`}</p><ul parentName=\"section\">\n        <li parentName=\"ul\">{`Using `}<inlineCode parentName=\"li\">{`npm`}</inlineCode>{` as the package manager.`}</li>\n        <li parentName=\"ul\">{`Using a `}{`*`}{`nix OS`}</li>\n        <li parentName=\"ul\">{`Using VSCode`}</li>\n      </ul><p parentName=\"section\">{`If you're using another set of tools, like Yarn on Windows with Sublime Text, that's totally fine and welcome! Just know that at you'll occasionally need to adapt minor instructions to your situation.`}</p></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"conventions\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#conventions\",\n          \"aria-label\": \"conventions permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Conventions`}</h2><p parentName=\"section\">{`There's a few conventions used throughout this tutorial that you should know about.`}</p><ul parentName=\"section\">\n        <li parentName=\"ul\">\n          <p parentName=\"li\"><strong parentName=\"p\">{`Annotated Code Blocks`}</strong></p>\n          <p parentName=\"li\">{`Most Code Blocks are explained with annotations. Take the following for example. Immediately following the codeblock are numbered points. Each corresponds to a line annotated with that number in the code block.`}</p>\n          {\n            /* prettier-ignore */\n          }\n          <pre parentName=\"li\"><code parentName=\"pre\" {...{\n              \"className\": \"language-ts\"\n            }}>{`const a = 1 as const // 1\n\ninterface A {}       // 2\ninterface A {}       // 2\n\nconst b: any = 1     // 3\n`}</code></pre>\n          <ol parentName=\"li\">\n            <li parentName=\"ol\">{`Use `}<inlineCode parentName=\"li\">{`as const`}</inlineCode>{` to make TS take the narrowest inference. Here `}<inlineCode parentName=\"li\">{`1`}</inlineCode>{` vs `}<inlineCode parentName=\"li\">{`number`}</inlineCode>{`.`}</li>\n            <li parentName=\"ol\">{`Same-named interfaces will merge into one.`}</li>\n            <li parentName=\"ol\">{`Use `}<inlineCode parentName=\"li\">{`any`}</inlineCode>{` to effectively disable type-checking`}</li>\n          </ol>\n        </li>\n        <li parentName=\"ul\">\n          <p parentName=\"li\"><strong parentName=\"p\">{`Auxiliary Content`}</strong></p>\n          <p parentName=\"li\">{`Sometimes content that isn't core to the current flow but related to it will be mentioned. That looks like so:`}</p>\n          <blockquote parentName=\"li\">\n            <p parentName=\"blockquote\">{`Hello there, have a nice day!`}</p>\n          </blockquote>\n        </li>\n      </ul></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"copy-pasting\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#copy-pasting\",\n          \"aria-label\": \"copy pasting permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Copy-Pasting`}</h2><p parentName=\"section\">{`As you progress you'll be writing code, of course. Often you'll have the chance to copy and paste our code, but we strongly suggest if you're just starting out to `}<strong parentName=\"p\">{`write the code yourself`}</strong>{`. This will expose you to `}<em parentName=\"p\">{`experience`}</em>{` of writing a Nexus app. Things like autocompletion and letting static safety guide your implementations, e.g. inside a GraphQL resolver. Also if you're new to TypeScript getting used to encountering, understanding, and fixing static type errors is essential practice. That said at no time should you feel `}<em parentName=\"p\">{`frustrated`}</em>{`. If things just aren't working, copy-paste our work as needed. Then, once things `}<em parentName=\"p\">{`are`}</em>{` working, taking a momemnt muck around, break things, fix them again, etc. is almost always time well spent.`}</p></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"wrapping-up\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#wrapping-up\",\n          \"aria-label\": \"wrapping up permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Wrapping Up`}</h2><p parentName=\"section\">{`Thanks for checking out Nexus, we hope you're as excited`}<br />{`to learn about it as we are to show it to you! :rocket:`}</p></section>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}