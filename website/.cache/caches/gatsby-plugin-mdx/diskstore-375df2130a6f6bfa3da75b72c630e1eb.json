{"expireTime":9007200846062020000,"key":"gatsby-plugin-mdx-entire-payload-505c8b2bf8c86cdfde30e27b356fc9c1-","val":{"mdast":{"type":"root","children":[{"type":"jsx","value":"<!-- ## Chapter 1 <br> Setup & First Query -->","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":47,"offset":47},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Chapter 1 - Setup & First Query","position":{"start":{"line":4,"column":4,"offset":52},"end":{"line":4,"column":35,"offset":83},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":49},"end":{"line":4,"column":35,"offset":83},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this first chapter we're just going to get the bare minimum of a Nexus project setup. You'll learn about:","position":{"start":{"line":6,"column":1,"offset":85},"end":{"line":6,"column":109,"offset":193},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":85},"end":{"line":6,"column":109,"offset":193},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":8,"column":3,"offset":197},"end":{"line":8,"column":7,"offset":201},"indent":[]}},{"type":"inlineCode","value":"nexus","position":{"start":{"line":8,"column":7,"offset":201},"end":{"line":8,"column":14,"offset":208},"indent":[]}},{"type":"text","value":" package","position":{"start":{"line":8,"column":14,"offset":208},"end":{"line":8,"column":22,"offset":216},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":197},"end":{"line":8,"column":22,"offset":216},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":195},"end":{"line":8,"column":22,"offset":216},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The Nexus CLI","position":{"start":{"line":9,"column":3,"offset":219},"end":{"line":9,"column":16,"offset":232},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":219},"end":{"line":9,"column":16,"offset":232},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":217},"end":{"line":9,"column":16,"offset":232},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Laying out and running a Nexus project","position":{"start":{"line":10,"column":3,"offset":235},"end":{"line":10,"column":41,"offset":273},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":235},"end":{"line":10,"column":41,"offset":273},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":233},"end":{"line":10,"column":41,"offset":273},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"GraphQL Playground","position":{"start":{"line":11,"column":3,"offset":276},"end":{"line":11,"column":21,"offset":294},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":276},"end":{"line":11,"column":21,"offset":294},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":274},"end":{"line":11,"column":21,"offset":294},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":195},"end":{"line":11,"column":21,"offset":294},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"CLI","position":{"start":{"line":13,"column":4,"offset":299},"end":{"line":13,"column":7,"offset":302},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":296},"end":{"line":13,"column":7,"offset":302},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Start by creating your project directory, initializing your ","position":{"start":{"line":15,"column":1,"offset":304},"end":{"line":15,"column":61,"offset":364},"indent":[]}},{"type":"inlineCode","value":"package.json","position":{"start":{"line":15,"column":61,"offset":364},"end":{"line":15,"column":75,"offset":378},"indent":[]}},{"type":"text","value":", and adding the ","position":{"start":{"line":15,"column":75,"offset":378},"end":{"line":15,"column":92,"offset":395},"indent":[]}},{"type":"inlineCode","value":"nexus","position":{"start":{"line":15,"column":92,"offset":395},"end":{"line":15,"column":99,"offset":402},"indent":[]}},{"type":"text","value":" dependency.","position":{"start":{"line":15,"column":99,"offset":402},"end":{"line":15,"column":111,"offset":414},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":304},"end":{"line":15,"column":111,"offset":414},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"mkdir nexus-tutorial && cd nexus-tutorial\nnpm init -y\nnpm add nexus","position":{"start":{"line":17,"column":1,"offset":416},"end":{"line":21,"column":4,"offset":495},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Nexus comes out of the box with a CLI. You'll use it often while working on your app. While you can access the CLI of your local nexus via ","position":{"start":{"line":23,"column":1,"offset":497},"end":{"line":23,"column":140,"offset":636},"indent":[]}},{"type":"inlineCode","value":"yarn","position":{"start":{"line":23,"column":140,"offset":636},"end":{"line":23,"column":146,"offset":642},"indent":[]}},{"type":"text","value":" or npm scripts or ","position":{"start":{"line":23,"column":146,"offset":642},"end":{"line":23,"column":165,"offset":661},"indent":[]}},{"type":"inlineCode","value":"npx","position":{"start":{"line":23,"column":165,"offset":661},"end":{"line":23,"column":170,"offset":666},"indent":[]}},{"type":"text","value":" but there's an even easier way. Install ","position":{"start":{"line":23,"column":170,"offset":666},"end":{"line":23,"column":211,"offset":707},"indent":[]}},{"type":"inlineCode","value":"nexus","position":{"start":{"line":23,"column":211,"offset":707},"end":{"line":23,"column":218,"offset":714},"indent":[]}},{"type":"text","value":" globally. Then you can access the CLI from anywhere. Nexus is smart enough to delegate all invocations to the ","position":{"start":{"line":23,"column":218,"offset":714},"end":{"line":23,"column":329,"offset":825},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"local","position":{"start":{"line":23,"column":330,"offset":826},"end":{"line":23,"column":335,"offset":831},"indent":[]}}],"position":{"start":{"line":23,"column":329,"offset":825},"end":{"line":23,"column":336,"offset":832},"indent":[]}},{"type":"text","value":" nexus. This is the idiomatic way to work with Nexus, but you aren't forced to do this.","position":{"start":{"line":23,"column":336,"offset":832},"end":{"line":23,"column":423,"offset":919},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":497},"end":{"line":23,"column":423,"offset":919},"indent":[]}},{"type":"code","lang":"markdown","meta":null,"value":"npm add --global nexus","position":{"start":{"line":25,"column":1,"offset":921},"end":{"line":27,"column":4,"offset":959},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"There are just two CLI commands you need to know about right now:","position":{"start":{"line":29,"column":1,"offset":961},"end":{"line":29,"column":66,"offset":1026},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":961},"end":{"line":29,"column":66,"offset":1026},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"nexus dev","position":{"start":{"line":31,"column":3,"offset":1030},"end":{"line":31,"column":14,"offset":1041},"indent":[]}},{"type":"text","value":" : This command starts a development server in watch mode. Every time you change a file, your app will be restarted.","position":{"start":{"line":31,"column":14,"offset":1041},"end":{"line":31,"column":130,"offset":1157},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":1030},"end":{"line":31,"column":130,"offset":1157},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1028},"end":{"line":31,"column":130,"offset":1157},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"nexus build","position":{"start":{"line":32,"column":3,"offset":1160},"end":{"line":32,"column":16,"offset":1173},"indent":[]}},{"type":"text","value":" : This command builds a \"production-ready\" server, ready to be deployed.","position":{"start":{"line":32,"column":16,"offset":1173},"end":{"line":32,"column":89,"offset":1246},"indent":[]}}],"position":{"start":{"line":32,"column":3,"offset":1160},"end":{"line":32,"column":89,"offset":1246},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1158},"end":{"line":32,"column":89,"offset":1246},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1028},"end":{"line":32,"column":89,"offset":1246},"indent":[1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Another is ","position":{"start":{"line":34,"column":3,"offset":1250},"end":{"line":34,"column":14,"offset":1261},"indent":[]}},{"type":"inlineCode","value":"nexus create app","position":{"start":{"line":34,"column":14,"offset":1261},"end":{"line":34,"column":32,"offset":1279},"indent":[]}},{"type":"text","value":" which will scaffold a new Nexus project for you. That is how you should ","position":{"start":{"line":34,"column":32,"offset":1279},"end":{"line":34,"column":105,"offset":1352},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"normally","position":{"start":{"line":34,"column":106,"offset":1353},"end":{"line":34,"column":114,"offset":1361},"indent":[]}}],"position":{"start":{"line":34,"column":105,"offset":1352},"end":{"line":34,"column":115,"offset":1362},"indent":[]}},{"type":"text","value":" start your Nexus projects. We're avoiding it in this tutorial so that you can learn the basics from the ground up.","position":{"start":{"line":34,"column":115,"offset":1362},"end":{"line":34,"column":230,"offset":1477},"indent":[]}}],"position":{"start":{"line":34,"column":3,"offset":1250},"end":{"line":34,"column":230,"offset":1477},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1248},"end":{"line":34,"column":230,"offset":1477},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Despite having the global Nexus CLI, using package scripts can be a handy way of self-documenting your project's workflows. So feel free to add the following scripts to your ","position":{"start":{"line":36,"column":1,"offset":1479},"end":{"line":36,"column":175,"offset":1653},"indent":[]}},{"type":"inlineCode","value":"package.json","position":{"start":{"line":36,"column":175,"offset":1653},"end":{"line":36,"column":189,"offset":1667},"indent":[]}},{"type":"text","value":". If you work with team members this can help streamline collaboration.","position":{"start":{"line":36,"column":189,"offset":1667},"end":{"line":36,"column":260,"offset":1738},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1479},"end":{"line":36,"column":260,"offset":1738},"indent":[]}},{"type":"code","lang":"json","meta":null,"value":"\"scripts\": {\n  \"dev\": \"nexus dev\",\n  \"build\": \"nexus build\"\n}","position":{"start":{"line":38,"column":1,"offset":1740},"end":{"line":43,"column":4,"offset":1813},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Conventional Entrypoint","position":{"start":{"line":45,"column":4,"offset":1818},"end":{"line":45,"column":27,"offset":1841},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1815},"end":{"line":45,"column":27,"offset":1841},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We'll now create our first module at ","position":{"start":{"line":47,"column":1,"offset":1843},"end":{"line":47,"column":38,"offset":1880},"indent":[]}},{"type":"inlineCode","value":"api/app.ts","position":{"start":{"line":47,"column":38,"offset":1880},"end":{"line":47,"column":50,"offset":1892},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":47,"column":50,"offset":1892},"end":{"line":47,"column":51,"offset":1893},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1843},"end":{"line":47,"column":51,"offset":1893},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"mkdir api && touch api/app.ts","position":{"start":{"line":49,"column":1,"offset":1895},"end":{"line":51,"column":4,"offset":1936},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The directory name ","position":{"start":{"line":53,"column":1,"offset":1938},"end":{"line":53,"column":20,"offset":1957},"indent":[]}},{"type":"inlineCode","value":"api","position":{"start":{"line":53,"column":20,"offset":1957},"end":{"line":53,"column":25,"offset":1962},"indent":[]}},{"type":"text","value":" is arbitrary but the module name ","position":{"start":{"line":53,"column":25,"offset":1962},"end":{"line":53,"column":59,"offset":1996},"indent":[]}},{"type":"inlineCode","value":"app","position":{"start":{"line":53,"column":59,"offset":1996},"end":{"line":53,"column":64,"offset":2001},"indent":[]}},{"type":"text","value":" has special meaning. Nexus will find ","position":{"start":{"line":53,"column":64,"offset":2001},"end":{"line":53,"column":102,"offset":2039},"indent":[]}},{"type":"inlineCode","value":"app.ts","position":{"start":{"line":53,"column":102,"offset":2039},"end":{"line":53,"column":110,"offset":2047},"indent":[]}},{"type":"text","value":" wherever you put it within your project and treat it as your entrypoint. Furthermore, every module that imports ","position":{"start":{"line":53,"column":110,"offset":2047},"end":{"line":53,"column":223,"offset":2160},"indent":[]}},{"type":"inlineCode","value":"nexus","position":{"start":{"line":53,"column":223,"offset":2160},"end":{"line":53,"column":230,"offset":2167},"indent":[]}},{"type":"text","value":" will be automatically included into the final build by Nexus. This makes growing and refactoring your project easy as you are freed from managing imoprt/export tedium. You might be wondering how import order is managed. The answer is that Nexus' APIs are declarative and so designed to be order independent.","position":{"start":{"line":53,"column":230,"offset":2167},"end":{"line":53,"column":538,"offset":2475},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":1938},"end":{"line":53,"column":538,"offset":2475},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Contextual Feedback","position":{"start":{"line":55,"column":4,"offset":2480},"end":{"line":55,"column":23,"offset":2499},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":2477},"end":{"line":55,"column":23,"offset":2499},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Ok, with our entrypoint setup, let's boot up dev mode and see what happens.","position":{"start":{"line":57,"column":1,"offset":2501},"end":{"line":57,"column":76,"offset":2576},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":2501},"end":{"line":57,"column":76,"offset":2576},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"nexus dev","position":{"start":{"line":59,"column":1,"offset":2578},"end":{"line":61,"column":4,"offset":2599},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Woops? You should be seeing a warning from Nexus:","position":{"start":{"line":63,"column":1,"offset":2601},"end":{"line":63,"column":50,"offset":2650},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":2601},"end":{"line":63,"column":50,"offset":2650},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"▲ nexus:schema Your GraphQL schema is empty. [...]","position":{"start":{"line":65,"column":1,"offset":2652},"end":{"line":67,"column":4,"offset":2714},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"All good, you indeed haven't added any types to your GraphQL schema yet so Nexus is right here. This is the first example of Nexus' rich development mode contextual feedback. One of the goals of Nexus is to never leave you in a confused disoriented state. If Nexus can give you in inline feedback it should. Add rich jsDoc and precise TypeScript types into the mix, and ideally you can largely avoid getting lost and ","position":{"start":{"line":69,"column":1,"offset":2716},"end":{"line":69,"column":418,"offset":3133},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"needing","position":{"start":{"line":69,"column":419,"offset":3134},"end":{"line":69,"column":426,"offset":3141},"indent":[]}}],"position":{"start":{"line":69,"column":418,"offset":3133},"end":{"line":69,"column":427,"offset":3142},"indent":[]}},{"type":"text","value":" to consult the Nexus website, community, so on.","position":{"start":{"line":69,"column":427,"offset":3142},"end":{"line":69,"column":475,"offset":3190},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":2716},"end":{"line":69,"column":475,"offset":3190},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Try It Out","position":{"start":{"line":71,"column":4,"offset":3195},"end":{"line":71,"column":14,"offset":3205},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":3192},"end":{"line":71,"column":14,"offset":3205},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Aside from the warning, you should also see a message indicating that your server is running, and where.","position":{"start":{"line":73,"column":1,"offset":3207},"end":{"line":73,"column":105,"offset":3311},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":3207},"end":{"line":73,"column":105,"offset":3311},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"● nexus:server listening  --  url: 'http://localhost:4000/'","position":{"start":{"line":75,"column":1,"offset":3313},"end":{"line":77,"column":4,"offset":3384},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Open it up, what do you see? It should be an instance of ","position":{"start":{"line":79,"column":1,"offset":3386},"end":{"line":79,"column":58,"offset":3443},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/prisma-labs/graphql-playground","children":[{"type":"text","value":"GraphQL Playground","position":{"start":{"line":79,"column":59,"offset":3444},"end":{"line":79,"column":77,"offset":3462},"indent":[]}}],"position":{"start":{"line":79,"column":58,"offset":3443},"end":{"line":79,"column":129,"offset":3514},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":79,"column":129,"offset":3514},"end":{"line":79,"column":130,"offset":3515},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":3386},"end":{"line":79,"column":130,"offset":3515},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://user-images.githubusercontent.com/284476/83534302-ae1b7d00-a4be-11ea-9a13-2665bf152e2a.png","alt":"image","position":{"start":{"line":81,"column":1,"offset":3517},"end":{"line":81,"column":109,"offset":3625},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":3517},"end":{"line":81,"column":109,"offset":3625},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is a graphical user inteface for interacting with GraphQL APIs. If you prefer you can run a ","position":{"start":{"line":83,"column":1,"offset":3627},"end":{"line":83,"column":98,"offset":3724},"indent":[]}},{"type":"link","title":null,"url":"https://www.electronjs.org/apps/graphql-playground","children":[{"type":"text","value":"standalone","position":{"start":{"line":83,"column":99,"offset":3725},"end":{"line":83,"column":109,"offset":3735},"indent":[]}}],"position":{"start":{"line":83,"column":98,"offset":3724},"end":{"line":83,"column":162,"offset":3788},"indent":[]}},{"type":"text","value":" version as an app on your machine, or another GraphQL GUI entirely. Nexus ships with one out of the box for your convenience.","position":{"start":{"line":83,"column":162,"offset":3788},"end":{"line":83,"column":288,"offset":3914},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":3627},"end":{"line":83,"column":288,"offset":3914},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Take a look at the right-hand side SCHEAM tab. There you'll see a default schema that Nexus has prvoided for you. This, along with the warning you say before, will go away once you begin your own schema.","position":{"start":{"line":85,"column":1,"offset":3916},"end":{"line":85,"column":204,"offset":4119},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":3916},"end":{"line":85,"column":204,"offset":4119},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Wrapping Up","position":{"start":{"line":87,"column":4,"offset":4124},"end":{"line":87,"column":15,"offset":4135},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":4121},"end":{"line":87,"column":15,"offset":4135},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"That's it! In the next chapter you'll begin working on your app's schema.","position":{"start":{"line":89,"column":1,"offset":4137},"end":{"line":89,"column":74,"offset":4210},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":4137},"end":{"line":89,"column":74,"offset":4210},"indent":[]}},{"type":"jsx","value":"<div class=\"NextIs NextChapter\"></div>","position":{"start":{"line":91,"column":1,"offset":4212},"end":{"line":91,"column":39,"offset":4250},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"/tutorial/chapter-2-writing-your-first-schema","children":[{"type":"text","value":"➳","position":{"start":{"line":93,"column":2,"offset":4253},"end":{"line":93,"column":3,"offset":4254},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":4252},"end":{"line":93,"column":51,"offset":4302},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":4252},"end":{"line":93,"column":51,"offset":4302},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"1. Setup & First Query\",\"metaTitle\":\"1. Setup & First Query\",\"metaDescription\":\"TODO\"}","position":{"start":{"line":96,"column":1,"offset":4305},"end":{"line":96,"column":125,"offset":4429},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":96,"column":125,"offset":4429}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"1. Setup & First Query\",\n  \"metaTitle\": \"1. Setup & First Query\",\n  \"metaDescription\": \"TODO\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"chapter-1---setup--first-query\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#chapter-1---setup--first-query\",\n    \"aria-label\": \"chapter 1   setup  first query permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Chapter 1 - Setup & First Query\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In this first chapter we're just going to get the bare minimum of a Nexus project setup. You'll learn about:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nexus\"), \" package\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The Nexus CLI\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Laying out and running a Nexus project\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"GraphQL Playground\"))), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"cli\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#cli\",\n    \"aria-label\": \"cli permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"CLI\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Start by creating your project directory, initializing your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \", and adding the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nexus\"), \" dependency.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir nexus-tutorial && cd nexus-tutorial\\nnpm init -y\\nnpm add nexus\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Nexus comes out of the box with a CLI. You'll use it often while working on your app. While you can access the CLI of your local nexus via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn\"), \" or npm scripts or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npx\"), \" but there's an even easier way. Install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nexus\"), \" globally. Then you can access the CLI from anywhere. Nexus is smart enough to delegate all invocations to the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"local\"), \" nexus. This is the idiomatic way to work with Nexus, but you aren't forced to do this.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-markdown\"\n  }), \"npm add --global nexus\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"There are just two CLI commands you need to know about right now:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nexus dev\"), \" : This command starts a development server in watch mode. Every time you change a file, your app will be restarted.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nexus build\"), \" : This command builds a \\\"production-ready\\\" server, ready to be deployed.\")), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Another is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nexus create app\"), \" which will scaffold a new Nexus project for you. That is how you should \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"normally\"), \" start your Nexus projects. We're avoiding it in this tutorial so that you can learn the basics from the ground up.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Despite having the global Nexus CLI, using package scripts can be a handy way of self-documenting your project's workflows. So feel free to add the following scripts to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \". If you work with team members this can help streamline collaboration.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\\"scripts\\\": {\\n  \\\"dev\\\": \\\"nexus dev\\\",\\n  \\\"build\\\": \\\"nexus build\\\"\\n}\\n\"))), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"conventional-entrypoint\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#conventional-entrypoint\",\n    \"aria-label\": \"conventional entrypoint permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Conventional Entrypoint\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We'll now create our first module at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"api/app.ts\"), \":\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir api && touch api/app.ts\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The directory name \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"api\"), \" is arbitrary but the module name \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app\"), \" has special meaning. Nexus will find \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app.ts\"), \" wherever you put it within your project and treat it as your entrypoint. Furthermore, every module that imports \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nexus\"), \" will be automatically included into the final build by Nexus. This makes growing and refactoring your project easy as you are freed from managing imoprt/export tedium. You might be wondering how import order is managed. The answer is that Nexus' APIs are declarative and so designed to be order independent.\")), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"contextual-feedback\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#contextual-feedback\",\n    \"aria-label\": \"contextual feedback permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Contextual Feedback\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Ok, with our entrypoint setup, let's boot up dev mode and see what happens.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"nexus dev\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Woops? You should be seeing a warning from Nexus:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"\\u25B2 nexus:schema Your GraphQL schema is empty. [...]\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"All good, you indeed haven't added any types to your GraphQL schema yet so Nexus is right here. This is the first example of Nexus' rich development mode contextual feedback. One of the goals of Nexus is to never leave you in a confused disoriented state. If Nexus can give you in inline feedback it should. Add rich jsDoc and precise TypeScript types into the mix, and ideally you can largely avoid getting lost and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"needing\"), \" to consult the Nexus website, community, so on.\")), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"try-it-out\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#try-it-out\",\n    \"aria-label\": \"try it out permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Try It Out\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Aside from the warning, you should also see a message indicating that your server is running, and where.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"\\u25CF nexus:server listening  --  url: 'http://localhost:4000/'\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Open it up, what do you see? It should be an instance of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/prisma-labs/graphql-playground\"\n  }), \"GraphQL Playground\"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://user-images.githubusercontent.com/284476/83534302-ae1b7d00-a4be-11ea-9a13-2665bf152e2a.png\",\n    \"alt\": \"image\"\n  }))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This is a graphical user inteface for interacting with GraphQL APIs. If you prefer you can run a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.electronjs.org/apps/graphql-playground\"\n  }), \"standalone\"), \" version as an app on your machine, or another GraphQL GUI entirely. Nexus ships with one out of the box for your convenience.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Take a look at the right-hand side SCHEAM tab. There you'll see a default schema that Nexus has prvoided for you. This, along with the warning you say before, will go away once you begin your own schema.\")), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"wrapping-up\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#wrapping-up\",\n    \"aria-label\": \"wrapping up permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Wrapping Up\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"That's it! In the next chapter you'll begin working on your app's schema.\"), mdx(\"div\", {\n    className: \"NextIs NextChapter\"\n  }), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/tutorial/chapter-2-writing-your-first-schema\"\n  }), \"\\u27B3\"))));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"1. Setup & First Query\",\n  \"metaTitle\": \"1. Setup & First Query\",\n  \"metaDescription\": \"TODO\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    {\n      /* ## Chapter 1 <br> Setup & First Query */\n    }\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"chapter-1---setup--first-query\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#chapter-1---setup--first-query\",\n          \"aria-label\": \"chapter 1   setup  first query permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Chapter 1 - Setup & First Query`}</h2><p parentName=\"section\">{`In this first chapter we're just going to get the bare minimum of a Nexus project setup. You'll learn about:`}</p><ul parentName=\"section\">\n        <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`nexus`}</inlineCode>{` package`}</li>\n        <li parentName=\"ul\">{`The Nexus CLI`}</li>\n        <li parentName=\"ul\">{`Laying out and running a Nexus project`}</li>\n        <li parentName=\"ul\">{`GraphQL Playground`}</li>\n      </ul></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"cli\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#cli\",\n          \"aria-label\": \"cli permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`CLI`}</h2><p parentName=\"section\">{`Start by creating your project directory, initializing your `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{`, and adding the `}<inlineCode parentName=\"p\">{`nexus`}</inlineCode>{` dependency.`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}>{`mkdir nexus-tutorial && cd nexus-tutorial\nnpm init -y\nnpm add nexus\n`}</code></pre><p parentName=\"section\">{`Nexus comes out of the box with a CLI. You'll use it often while working on your app. While you can access the CLI of your local nexus via `}<inlineCode parentName=\"p\">{`yarn`}</inlineCode>{` or npm scripts or `}<inlineCode parentName=\"p\">{`npx`}</inlineCode>{` but there's an even easier way. Install `}<inlineCode parentName=\"p\">{`nexus`}</inlineCode>{` globally. Then you can access the CLI from anywhere. Nexus is smart enough to delegate all invocations to the `}<em parentName=\"p\">{`local`}</em>{` nexus. This is the idiomatic way to work with Nexus, but you aren't forced to do this.`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-markdown\"\n        }}>{`npm add --global nexus\n`}</code></pre><p parentName=\"section\">{`There are just two CLI commands you need to know about right now:`}</p><ul parentName=\"section\">\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`nexus dev`}</inlineCode>{` : This command starts a development server in watch mode. Every time you change a file, your app will be restarted.`}</li>\n        <li parentName=\"ul\"><inlineCode parentName=\"li\">{`nexus build`}</inlineCode>{` : This command builds a \"production-ready\" server, ready to be deployed.`}</li>\n      </ul><blockquote parentName=\"section\">\n        <p parentName=\"blockquote\">{`Another is `}<inlineCode parentName=\"p\">{`nexus create app`}</inlineCode>{` which will scaffold a new Nexus project for you. That is how you should `}<em parentName=\"p\">{`normally`}</em>{` start your Nexus projects. We're avoiding it in this tutorial so that you can learn the basics from the ground up.`}</p>\n      </blockquote><p parentName=\"section\">{`Despite having the global Nexus CLI, using package scripts can be a handy way of self-documenting your project's workflows. So feel free to add the following scripts to your `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{`. If you work with team members this can help streamline collaboration.`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-json\"\n        }}>{`\"scripts\": {\n  \"dev\": \"nexus dev\",\n  \"build\": \"nexus build\"\n}\n`}</code></pre></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"conventional-entrypoint\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#conventional-entrypoint\",\n          \"aria-label\": \"conventional entrypoint permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Conventional Entrypoint`}</h2><p parentName=\"section\">{`We'll now create our first module at `}<inlineCode parentName=\"p\">{`api/app.ts`}</inlineCode>{`:`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}>{`mkdir api && touch api/app.ts\n`}</code></pre><p parentName=\"section\">{`The directory name `}<inlineCode parentName=\"p\">{`api`}</inlineCode>{` is arbitrary but the module name `}<inlineCode parentName=\"p\">{`app`}</inlineCode>{` has special meaning. Nexus will find `}<inlineCode parentName=\"p\">{`app.ts`}</inlineCode>{` wherever you put it within your project and treat it as your entrypoint. Furthermore, every module that imports `}<inlineCode parentName=\"p\">{`nexus`}</inlineCode>{` will be automatically included into the final build by Nexus. This makes growing and refactoring your project easy as you are freed from managing imoprt/export tedium. You might be wondering how import order is managed. The answer is that Nexus' APIs are declarative and so designed to be order independent.`}</p></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"contextual-feedback\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#contextual-feedback\",\n          \"aria-label\": \"contextual feedback permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Contextual Feedback`}</h2><p parentName=\"section\">{`Ok, with our entrypoint setup, let's boot up dev mode and see what happens.`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}>{`nexus dev\n`}</code></pre><p parentName=\"section\">{`Woops? You should be seeing a warning from Nexus:`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}>{`▲ nexus:schema Your GraphQL schema is empty. [...]\n`}</code></pre><p parentName=\"section\">{`All good, you indeed haven't added any types to your GraphQL schema yet so Nexus is right here. This is the first example of Nexus' rich development mode contextual feedback. One of the goals of Nexus is to never leave you in a confused disoriented state. If Nexus can give you in inline feedback it should. Add rich jsDoc and precise TypeScript types into the mix, and ideally you can largely avoid getting lost and `}<em parentName=\"p\">{`needing`}</em>{` to consult the Nexus website, community, so on.`}</p></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"try-it-out\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#try-it-out\",\n          \"aria-label\": \"try it out permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Try It Out`}</h2><p parentName=\"section\">{`Aside from the warning, you should also see a message indicating that your server is running, and where.`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}>{`● nexus:server listening  --  url: 'http://localhost:4000/'\n`}</code></pre><p parentName=\"section\">{`Open it up, what do you see? It should be an instance of `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/prisma-labs/graphql-playground\"\n        }}>{`GraphQL Playground`}</a>{`.`}</p><p parentName=\"section\"><img parentName=\"p\" {...{\n          \"src\": \"https://user-images.githubusercontent.com/284476/83534302-ae1b7d00-a4be-11ea-9a13-2665bf152e2a.png\",\n          \"alt\": \"image\"\n        }}></img></p><p parentName=\"section\">{`This is a graphical user inteface for interacting with GraphQL APIs. If you prefer you can run a `}<a parentName=\"p\" {...{\n          \"href\": \"https://www.electronjs.org/apps/graphql-playground\"\n        }}>{`standalone`}</a>{` version as an app on your machine, or another GraphQL GUI entirely. Nexus ships with one out of the box for your convenience.`}</p><p parentName=\"section\">{`Take a look at the right-hand side SCHEAM tab. There you'll see a default schema that Nexus has prvoided for you. This, along with the warning you say before, will go away once you begin your own schema.`}</p></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"wrapping-up\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#wrapping-up\",\n          \"aria-label\": \"wrapping up permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Wrapping Up`}</h2><p parentName=\"section\">{`That's it! In the next chapter you'll begin working on your app's schema.`}</p><div class=\"NextIs NextChapter\"></div><p parentName=\"section\"><a parentName=\"p\" {...{\n          \"href\": \"/tutorial/chapter-2-writing-your-first-schema\"\n        }}>{`➳`}</a></p></section>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}