{"expireTime":9007200846063716000,"key":"gatsby-plugin-mdx-entire-payload-a8d19892c7dc9275e99697d14b49ceb7-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Chapter 3 ","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":13,"offset":13},"indent":[]}},{"type":"jsx","value":"<br/>","position":{"start":{"line":2,"column":13,"offset":13},"end":{"line":2,"column":18,"offset":18},"indent":[]}},{"type":"text","value":" Adding Mutations to Your API","position":{"start":{"line":2,"column":18,"offset":18},"end":{"line":2,"column":47,"offset":47},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":47,"offset":47},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this chapter you're going to add some write capability to your API. You'll learn about:","position":{"start":{"line":4,"column":1,"offset":49},"end":{"line":4,"column":91,"offset":139},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":49},"end":{"line":4,"column":91,"offset":139},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Writing GraphQL mutations","position":{"start":{"line":6,"column":3,"offset":143},"end":{"line":6,"column":28,"offset":168},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":143},"end":{"line":6,"column":28,"offset":168},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":141},"end":{"line":6,"column":28,"offset":168},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Exposing GraphQL objects for mutation operations","position":{"start":{"line":7,"column":3,"offset":171},"end":{"line":7,"column":51,"offset":219},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":171},"end":{"line":7,"column":51,"offset":219},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":169},"end":{"line":7,"column":51,"offset":219},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Working with GraphQL Context","position":{"start":{"line":8,"column":3,"offset":222},"end":{"line":8,"column":31,"offset":250},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":222},"end":{"line":8,"column":31,"offset":250},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":220},"end":{"line":8,"column":31,"offset":250},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Working with GraphQL arguments","position":{"start":{"line":9,"column":3,"offset":253},"end":{"line":9,"column":33,"offset":283},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":253},"end":{"line":9,"column":33,"offset":283},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":251},"end":{"line":9,"column":33,"offset":283},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":141},"end":{"line":9,"column":33,"offset":283},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To keep our learning gradual we'll stick to in-memory data for now but rest assured a proper databases is coming in an upcoming chapter.","position":{"start":{"line":11,"column":1,"offset":285},"end":{"line":11,"column":137,"offset":421},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":285},"end":{"line":11,"column":137,"offset":421},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Wire Up The Context","position":{"start":{"line":13,"column":4,"offset":426},"end":{"line":13,"column":23,"offset":445},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":423},"end":{"line":13,"column":23,"offset":445},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first thing we'll do is setup an in-memory database and expose it to our resolvers using the ","position":{"start":{"line":15,"column":1,"offset":447},"end":{"line":15,"column":98,"offset":544},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"GraphQL context","position":{"start":{"line":15,"column":99,"offset":545},"end":{"line":15,"column":114,"offset":560},"indent":[]}}],"position":{"start":{"line":15,"column":98,"offset":544},"end":{"line":15,"column":115,"offset":561},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":15,"column":115,"offset":561},"end":{"line":15,"column":116,"offset":562},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":447},"end":{"line":15,"column":116,"offset":562},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The GraphQL Context is a plain JavaScript object shared across all resolvers. Nexus creates a new one for each request and adds a few of its own properties. Largely though, what it will contains will be defined by your app. It is a good place to, for example, attach information about the logged-in user.","position":{"start":{"line":17,"column":1,"offset":564},"end":{"line":17,"column":305,"offset":868},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":564},"end":{"line":17,"column":305,"offset":868},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So go ahead and create the database.","position":{"start":{"line":19,"column":1,"offset":870},"end":{"line":19,"column":37,"offset":906},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":870},"end":{"line":19,"column":37,"offset":906},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"touch api/db.ts","position":{"start":{"line":21,"column":1,"offset":908},"end":{"line":23,"column":4,"offset":935},"indent":[1,1]}},{"type":"code","lang":"ts","meta":null,"value":"// api/db.ts\n\nexport const db = {\n  posts: [{ id: 1, title: 'Nexus', body: '...', published: false }],\n}","position":{"start":{"line":25,"column":1,"offset":937},"end":{"line":31,"column":4,"offset":1051},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now to expose it in our GraphQL context we'll use a new schema method called ","position":{"start":{"line":33,"column":1,"offset":1053},"end":{"line":33,"column":78,"offset":1130},"indent":[]}},{"type":"inlineCode","value":"addToContext","position":{"start":{"line":33,"column":78,"offset":1130},"end":{"line":33,"column":92,"offset":1144},"indent":[]}},{"type":"text","value":". We can do this anywhere in our app but a fine place is the ","position":{"start":{"line":33,"column":92,"offset":1144},"end":{"line":33,"column":153,"offset":1205},"indent":[]}},{"type":"inlineCode","value":"api/app.ts","position":{"start":{"line":33,"column":153,"offset":1205},"end":{"line":33,"column":165,"offset":1217},"indent":[]}},{"type":"text","value":" module we already created in chapter 1.","position":{"start":{"line":33,"column":165,"offset":1217},"end":{"line":33,"column":205,"offset":1257},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1053},"end":{"line":33,"column":205,"offset":1257},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"// api/app.ts\n\nimport { schema } from 'nexus'\nimport { db } from './db'\n\nschema.addToContext(() => {\n  return {\n    db,\n  }\n})","position":{"start":{"line":35,"column":1,"offset":1259},"end":{"line":46,"column":4,"offset":1395},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"That's it. Behind the scenes Nexus will use the TypeScript compiler API to extract our return type here and propagate it to the parts of our app where the context is accessible. And if ever this process does not work for you for some reason you can use fallback to manually giving the types to Nexus like so:","position":{"start":{"line":48,"column":1,"offset":1397},"end":{"line":48,"column":309,"offset":1705},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1397},"end":{"line":48,"column":309,"offset":1705},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"module global {\n  interface NexusContext {\n    // type information here\n  }\n}","position":{"start":{"line":50,"column":1,"offset":1707},"end":{"line":56,"column":4,"offset":1794},"indent":[1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note","position":{"start":{"line":58,"column":5,"offset":1800},"end":{"line":58,"column":9,"offset":1804},"indent":[]}}],"position":{"start":{"line":58,"column":3,"offset":1798},"end":{"line":58,"column":11,"offset":1806},"indent":[]}},{"type":"text","value":" For those familiar with GraphQL, you might be grimacing that weâ€™re attaching static things to the context, instead of using export/import.\nThis is a matter of convenience. Feel free to take a purer approach in your apps if you want.","position":{"start":{"line":58,"column":11,"offset":1806},"end":{"line":59,"column":96,"offset":2041},"indent":[3]}}],"position":{"start":{"line":58,"column":3,"offset":1798},"end":{"line":59,"column":96,"offset":2041},"indent":[3]}}],"position":{"start":{"line":58,"column":1,"offset":1796},"end":{"line":59,"column":96,"offset":2041},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Use The Context","position":{"start":{"line":61,"column":4,"offset":2046},"end":{"line":61,"column":19,"offset":2061},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":2043},"end":{"line":61,"column":19,"offset":2061},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now let's use this data to reimplement the ","position":{"start":{"line":63,"column":1,"offset":2063},"end":{"line":63,"column":44,"offset":2106},"indent":[]}},{"type":"inlineCode","value":"Query.drafts","position":{"start":{"line":63,"column":44,"offset":2106},"end":{"line":63,"column":58,"offset":2120},"indent":[]}},{"type":"text","value":" resolver from the previous chapter.","position":{"start":{"line":63,"column":58,"offset":2120},"end":{"line":63,"column":94,"offset":2156},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":2063},"end":{"line":63,"column":94,"offset":2156},"indent":[]}},{"type":"code","lang":"diff","meta":null,"value":"schema.queryType({\n  name: 'Query',\n  definition(t) {\n    t.list.field('drafts', {\n      type: 'Post',\n-     resolve() {\n-       return [{ id: 1, title: 'Nexus', body: '...', published: false }]\n+     resolve(_root, _args, ctx) {                             // 1\n+       return ctx.db.posts.filter(p => p.published === false)  // 2\n      },\n    })\n  },\n})","position":{"start":{"line":65,"column":1,"offset":2158},"end":{"line":79,"column":4,"offset":2525},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Context is the ","position":{"start":{"line":81,"column":4,"offset":2530},"end":{"line":81,"column":19,"offset":2545},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"third","position":{"start":{"line":81,"column":20,"offset":2546},"end":{"line":81,"column":25,"offset":2551},"indent":[]}}],"position":{"start":{"line":81,"column":19,"offset":2545},"end":{"line":81,"column":26,"offset":2552},"indent":[]}},{"type":"text","value":" parameter, usually identified as ","position":{"start":{"line":81,"column":26,"offset":2552},"end":{"line":81,"column":60,"offset":2586},"indent":[]}},{"type":"inlineCode","value":"ctx","position":{"start":{"line":81,"column":60,"offset":2586},"end":{"line":81,"column":65,"offset":2591},"indent":[]}}],"position":{"start":{"line":81,"column":4,"offset":2530},"end":{"line":81,"column":65,"offset":2591},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":2527},"end":{"line":81,"column":65,"offset":2591},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Return the filtered data by un-published posts, ","position":{"start":{"line":82,"column":4,"offset":2595},"end":{"line":82,"column":52,"offset":2643},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"aka","position":{"start":{"line":82,"column":53,"offset":2644},"end":{"line":82,"column":56,"offset":2647},"indent":[]}}],"position":{"start":{"line":82,"column":52,"offset":2643},"end":{"line":82,"column":57,"offset":2648},"indent":[]}},{"type":"text","value":" drafts . Nexus makes sure the types line up.","position":{"start":{"line":82,"column":57,"offset":2648},"end":{"line":82,"column":102,"offset":2693},"indent":[]}}],"position":{"start":{"line":82,"column":4,"offset":2595},"end":{"line":82,"column":102,"offset":2693},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":2592},"end":{"line":82,"column":102,"offset":2693},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":2527},"end":{"line":82,"column":102,"offset":2693},"indent":[1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Did you notice?","position":{"start":{"line":84,"column":3,"offset":2697},"end":{"line":84,"column":18,"offset":2712},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2695},"end":{"line":84,"column":20,"offset":2714},"indent":[]}},{"type":"text","value":" Still no TypeScript type annotations required from you yet everything is still totally type safe. Prove it to yourself by hovering over the ","position":{"start":{"line":84,"column":20,"offset":2714},"end":{"line":84,"column":161,"offset":2855},"indent":[]}},{"type":"inlineCode","value":"ctx.db.posts","position":{"start":{"line":84,"column":161,"offset":2855},"end":{"line":84,"column":175,"offset":2869},"indent":[]}},{"type":"text","value":" property and witness the correct type information it gives you. This is the type propagation we just mentioned in action. ðŸ™Œ","position":{"start":{"line":84,"column":175,"offset":2869},"end":{"line":84,"column":300,"offset":2994},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2695},"end":{"line":84,"column":300,"offset":2994},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Your First Mutation","position":{"start":{"line":86,"column":4,"offset":2999},"end":{"line":86,"column":23,"offset":3018},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":2996},"end":{"line":86,"column":23,"offset":3018},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Alright, now that we know how to wire things into our context, let's implement our first mutation. We're going to make it possible for your API clients to create new drafts.","position":{"start":{"line":88,"column":1,"offset":3020},"end":{"line":88,"column":174,"offset":3193},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":3020},"end":{"line":88,"column":174,"offset":3193},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This mutation will need a name. Rather than simply call it ","position":{"start":{"line":90,"column":1,"offset":3195},"end":{"line":90,"column":60,"offset":3254},"indent":[]}},{"type":"inlineCode","value":"createPost","position":{"start":{"line":90,"column":60,"offset":3254},"end":{"line":90,"column":72,"offset":3266},"indent":[]}},{"type":"text","value":" we'll use language from our domain. In this case ","position":{"start":{"line":90,"column":72,"offset":3266},"end":{"line":90,"column":122,"offset":3316},"indent":[]}},{"type":"inlineCode","value":"createDraft","position":{"start":{"line":90,"column":122,"offset":3316},"end":{"line":90,"column":135,"offset":3329},"indent":[]}},{"type":"text","value":" seems reasonable. There are similarities with our previous work with ","position":{"start":{"line":90,"column":135,"offset":3329},"end":{"line":90,"column":205,"offset":3399},"indent":[]}},{"type":"inlineCode","value":"Query.drafts","position":{"start":{"line":90,"column":205,"offset":3399},"end":{"line":90,"column":219,"offset":3413},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":90,"column":219,"offset":3413},"end":{"line":90,"column":220,"offset":3414},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":3195},"end":{"line":90,"column":220,"offset":3414},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"Mutation","position":{"start":{"line":92,"column":3,"offset":3418},"end":{"line":92,"column":13,"offset":3428},"indent":[]}},{"type":"text","value":" is a root type, its fields are entrypoints.","position":{"start":{"line":92,"column":13,"offset":3428},"end":{"line":92,"column":57,"offset":3472},"indent":[]}}],"position":{"start":{"line":92,"column":3,"offset":3418},"end":{"line":92,"column":57,"offset":3472},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":3416},"end":{"line":92,"column":57,"offset":3472},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We can colocate mutation fields with the objects they relate to or centralize all mutation fields.","position":{"start":{"line":93,"column":3,"offset":3475},"end":{"line":93,"column":101,"offset":3573},"indent":[]}}],"position":{"start":{"line":93,"column":3,"offset":3475},"end":{"line":93,"column":101,"offset":3573},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":3473},"end":{"line":93,"column":101,"offset":3573},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":3416},"end":{"line":93,"column":101,"offset":3573},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"As before we will take the colocation approach.","position":{"start":{"line":95,"column":1,"offset":3575},"end":{"line":95,"column":48,"offset":3622},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":3575},"end":{"line":95,"column":48,"offset":3622},"indent":[]}},{"type":"jsx","value":"<div class=\"TightRow\">","position":{"start":{"line":97,"column":1,"offset":3624},"end":{"line":97,"column":23,"offset":3646},"indent":[]}},{"type":"jsx","value":"<!-- prettier-ignore -->","position":{"start":{"line":99,"column":1,"offset":3648},"end":{"line":99,"column":25,"offset":3672},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"// api/graphql/Post.ts\n// ...\n\nschema.extendType({\n  name: 'Mutation',\n  definition(t) {\n    t.field('createDraft', {\n      type: 'Post',\n      nullable: false,              // 1\n      resolve(_root, args, ctx) {\n        ctx.db.posts.push(/*...*/)\n        return // ...\n      },\n    })\n  },\n})","position":{"start":{"line":100,"column":1,"offset":3673},"end":{"line":117,"column":4,"offset":3976},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"graphql","meta":null,"value":"Mutation {\n  createDraft: Post!\n}","position":{"start":{"line":119,"column":1,"offset":3978},"end":{"line":123,"column":4,"offset":4026},"indent":[1,1,1,1]}},{"type":"jsx","value":"</div>","position":{"start":{"line":125,"column":1,"offset":4028},"end":{"line":125,"column":7,"offset":4034},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"By default in Nexus all output types are nullable. This is for ","position":{"start":{"line":127,"column":4,"offset":4039},"end":{"line":127,"column":67,"offset":4102},"indent":[]}},{"type":"link","title":null,"url":"https://graphql.org/learn/best-practices/#nullability","children":[{"type":"text","value":"best practice reasons","position":{"start":{"line":127,"column":68,"offset":4103},"end":{"line":127,"column":89,"offset":4124},"indent":[]}}],"position":{"start":{"line":127,"column":67,"offset":4102},"end":{"line":127,"column":145,"offset":4180},"indent":[]}},{"type":"text","value":". In this case, we want to guarantee ","position":{"start":{"line":127,"column":145,"offset":4180},"end":{"line":127,"column":182,"offset":4217},"indent":[]}},{"type":"linkReference","identifier":"to the client","label":"to the client","referenceType":"shortcut","children":[{"type":"text","value":"to the client","position":{"start":{"line":127,"column":183,"offset":4218},"end":{"line":127,"column":196,"offset":4231},"indent":[]}}],"position":{"start":{"line":127,"column":182,"offset":4217},"end":{"line":127,"column":197,"offset":4232},"indent":[]}},{"type":"text","value":" that a Post object will always be returned upon a successful signup mutation.","position":{"start":{"line":127,"column":197,"offset":4232},"end":{"line":127,"column":275,"offset":4310},"indent":[]}}],"position":{"start":{"line":127,"column":4,"offset":4039},"end":{"line":127,"column":275,"offset":4310},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you're ever dissatisfied with Nexus' defaults, not to worry, ","position":{"start":{"line":129,"column":4,"offset":4315},"end":{"line":129,"column":68,"offset":4379},"indent":[]}},{"type":"link","title":null,"url":"https://www.nexusjs.org/#/api/modules/main/exports/settings?id=schemanullableinputs","children":[{"type":"text","value":"you can change them globally","position":{"start":{"line":129,"column":69,"offset":4380},"end":{"line":129,"column":97,"offset":4408},"indent":[]}}],"position":{"start":{"line":129,"column":68,"offset":4379},"end":{"line":129,"column":183,"offset":4494},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":129,"column":183,"offset":4494},"end":{"line":129,"column":184,"offset":4495},"indent":[]}}],"position":{"start":{"line":129,"column":4,"offset":4315},"end":{"line":129,"column":184,"offset":4495},"indent":[]}}],"position":{"start":{"line":127,"column":1,"offset":4036},"end":{"line":129,"column":184,"offset":4495},"indent":[1,1]}}],"position":{"start":{"line":127,"column":1,"offset":4036},"end":{"line":129,"column":184,"offset":4495},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We need to get the client's input data to complete our resolver. This brings us to a new concept, GraphQL arguments. Every field in GraphQL may accept them. Effectively you can think of each field in GraphQL like a function, accepting some input, doing something, and returning an output. Most of the time \"doing something\" is a matter of some read-like operation but with ","position":{"start":{"line":131,"column":1,"offset":4497},"end":{"line":131,"column":374,"offset":4870},"indent":[]}},{"type":"inlineCode","value":"Mutation","position":{"start":{"line":131,"column":374,"offset":4870},"end":{"line":131,"column":384,"offset":4880},"indent":[]}},{"type":"text","value":" fields the \"doing something\" usually entails a process with side-effects (e.g. writing to the databse).","position":{"start":{"line":131,"column":384,"offset":4880},"end":{"line":131,"column":488,"offset":4984},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":4497},"end":{"line":131,"column":488,"offset":4984},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's revise our implementation with GraphQL arguments.","position":{"start":{"line":133,"column":1,"offset":4986},"end":{"line":133,"column":56,"offset":5041},"indent":[]}}],"position":{"start":{"line":133,"column":1,"offset":4986},"end":{"line":133,"column":56,"offset":5041},"indent":[]}},{"type":"jsx","value":"<div class=\"IntrinsicRow\">","position":{"start":{"line":135,"column":1,"offset":5043},"end":{"line":135,"column":27,"offset":5069},"indent":[]}},{"type":"code","lang":"diff","meta":null,"value":"schema.extendType({\n  name: 'Mutation',\n  definition(t) {\n    t.field('createDraft', {\n      type: 'Post',\n+     args: {                                        // 1\n+       title: schema.stringArg({ required: true }), // 2\n+       body: schema.stringArg({ required: true }),  // 2\n+     },\n      resolve(_root, args, ctx) {\n+       const draft = {\n+         id: ctx.db.posts.length + 1,\n+         title: args.title,                         // 3\n+         body: args.body,                           // 3\n+         published: false,\n+       }\n+       ctx.db.posts.push(draft)\n+       return draft\n-       ctx.db.posts.push(/*...*/)\n-       return // ...\n      },\n    })\n  },\n})","position":{"start":{"line":137,"column":1,"offset":5071},"end":{"line":162,"column":4,"offset":5758},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"diff","meta":null,"value":"Mutation {\n-  createDraft: Post\n+  createDraft(title: String!, body: String!): Post\n}","position":{"start":{"line":164,"column":1,"offset":5760},"end":{"line":169,"column":4,"offset":5857},"indent":[1,1,1,1,1]}},{"type":"jsx","value":"</div>","position":{"start":{"line":171,"column":1,"offset":5859},"end":{"line":171,"column":7,"offset":5865},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Add an ","position":{"start":{"line":173,"column":4,"offset":5870},"end":{"line":173,"column":11,"offset":5877},"indent":[]}},{"type":"inlineCode","value":"args","position":{"start":{"line":173,"column":11,"offset":5877},"end":{"line":173,"column":17,"offset":5883},"indent":[]}},{"type":"text","value":" property to the field definition to define its args. Keys are arg names and values are type specifications.","position":{"start":{"line":173,"column":17,"offset":5883},"end":{"line":173,"column":125,"offset":5991},"indent":[]}}],"position":{"start":{"line":173,"column":4,"offset":5870},"end":{"line":173,"column":125,"offset":5991},"indent":[]}}],"position":{"start":{"line":173,"column":1,"offset":5867},"end":{"line":173,"column":125,"offset":5991},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Use the Nexus helpers for defining an arg type. There is one such helper for every GraphQL scalar such as ","position":{"start":{"line":174,"column":4,"offset":5995},"end":{"line":174,"column":110,"offset":6101},"indent":[]}},{"type":"inlineCode","value":"schema.intArg","position":{"start":{"line":174,"column":110,"offset":6101},"end":{"line":174,"column":125,"offset":6116},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":174,"column":125,"offset":6116},"end":{"line":174,"column":130,"offset":6121},"indent":[]}},{"type":"inlineCode","value":"schema.booleanArg","position":{"start":{"line":174,"column":130,"offset":6121},"end":{"line":174,"column":149,"offset":6140},"indent":[]}},{"type":"text","value":". If you want to reference a type like some InputObject then use ","position":{"start":{"line":174,"column":149,"offset":6140},"end":{"line":174,"column":214,"offset":6205},"indent":[]}},{"type":"inlineCode","value":"schema.arg({ type: \"...\" })","position":{"start":{"line":174,"column":214,"offset":6205},"end":{"line":174,"column":243,"offset":6234},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":174,"column":243,"offset":6234},"end":{"line":174,"column":244,"offset":6235},"indent":[]}}],"position":{"start":{"line":174,"column":4,"offset":5995},"end":{"line":174,"column":244,"offset":6235},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":5992},"end":{"line":174,"column":244,"offset":6235},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In our resolver, access the args we specified above and pass them through to our custom logic. If you hover over the ","position":{"start":{"line":175,"column":4,"offset":6239},"end":{"line":175,"column":121,"offset":6356},"indent":[]}},{"type":"inlineCode","value":"args","position":{"start":{"line":175,"column":121,"offset":6356},"end":{"line":175,"column":127,"offset":6362},"indent":[]}},{"type":"text","value":" parameter you'll see that Nexus has properly typed them including the fact that they cannot be undefined.","position":{"start":{"line":175,"column":127,"offset":6362},"end":{"line":175,"column":233,"offset":6468},"indent":[]}}],"position":{"start":{"line":175,"column":4,"offset":6239},"end":{"line":175,"column":233,"offset":6468},"indent":[]}}],"position":{"start":{"line":175,"column":1,"offset":6236},"end":{"line":175,"column":233,"offset":6468},"indent":[]}}],"position":{"start":{"line":173,"column":1,"offset":5867},"end":{"line":175,"column":233,"offset":6468},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Model The Domain pt 2","position":{"start":{"line":177,"column":4,"offset":6473},"end":{"line":177,"column":25,"offset":6494},"indent":[]}}],"position":{"start":{"line":177,"column":1,"offset":6470},"end":{"line":177,"column":25,"offset":6494},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before we wrap this chapter let's flush out our schema a bit more. We'll add a ","position":{"start":{"line":179,"column":1,"offset":6496},"end":{"line":179,"column":80,"offset":6575},"indent":[]}},{"type":"inlineCode","value":"publish","position":{"start":{"line":179,"column":80,"offset":6575},"end":{"line":179,"column":89,"offset":6584},"indent":[]}},{"type":"text","value":" mutation to transform a draft into an actual published post, then we'll let API clients read the the published posts.","position":{"start":{"line":179,"column":89,"offset":6584},"end":{"line":179,"column":207,"offset":6702},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":6496},"end":{"line":179,"column":207,"offset":6702},"indent":[]}},{"type":"jsx","value":"<div class=\"IntrinsicRow\">","position":{"start":{"line":181,"column":1,"offset":6704},"end":{"line":181,"column":27,"offset":6730},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"// api/graphql/Post.ts\n\nimport { schema } from 'nexus'\n\nschema.extendType({\n  type: 'Mutation',\n  definition(t) {\n    // ...\n    t.field('publish', {\n      type: 'Post',\n      args: {\n        draftId: schema.intArg({ required: true }),\n      },\n      resolve(_root, args, ctx) {\n        let draftToPublish = ctx.inDb.posts.find((p) => p.id === args.draftId)\n\n        if (!draftToPublish) {\n          throw new Error('Could not find draft with id ' + args.draftId)\n        }\n\n        draftToPublish.published = true\n\n        return draftToPublish\n      },\n    })\n  },\n})","position":{"start":{"line":183,"column":1,"offset":6732},"end":{"line":211,"column":4,"offset":7311},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"diff","meta":null,"value":"type Mutation {\n  createDraft(body: String!, title: String!): Post\n+ publish(draftId: Int!): Post\n}","position":{"start":{"line":213,"column":1,"offset":7313},"end":{"line":218,"column":4,"offset":7424},"indent":[1,1,1,1,1]}},{"type":"jsx","value":"</div>","position":{"start":{"line":220,"column":1,"offset":7426},"end":{"line":220,"column":7,"offset":7432},"indent":[]}},{"type":"jsx","value":"<div class=\"IntrinsicRow\">","position":{"start":{"line":222,"column":1,"offset":7434},"end":{"line":222,"column":27,"offset":7460},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"// api/graphql/Post.ts\n\nimport { schema } from 'nexus'\n\nschema.extendType({\n  name: 'Query',\n  definition(t) {\n    // ...\n    t.list.field('posts', {\n      type: 'Post',\n      resolve(_root, _args, ctx) {\n        return ctx.inDb.posts.filter((p) => p.published === true)\n      },\n    })\n  },\n})","position":{"start":{"line":224,"column":1,"offset":7462},"end":{"line":241,"column":4,"offset":7766},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"diff","meta":null,"value":"type Query {\n  drafts: [Post!]\n+ posts: [Post!]\n}","position":{"start":{"line":243,"column":1,"offset":7768},"end":{"line":248,"column":4,"offset":7829},"indent":[1,1,1,1,1]}},{"type":"jsx","value":"</div>","position":{"start":{"line":250,"column":1,"offset":7831},"end":{"line":250,"column":7,"offset":7837},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Try It Out","position":{"start":{"line":252,"column":4,"offset":7842},"end":{"line":252,"column":14,"offset":7852},"indent":[]}}],"position":{"start":{"line":252,"column":1,"offset":7839},"end":{"line":252,"column":14,"offset":7852},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Great, now head on over to the GraphQL Playground and run this query (left). If everything went well, you should see a response like this (right):","position":{"start":{"line":254,"column":1,"offset":7854},"end":{"line":254,"column":147,"offset":8000},"indent":[]}}],"position":{"start":{"line":254,"column":1,"offset":7854},"end":{"line":254,"column":147,"offset":8000},"indent":[]}},{"type":"jsx","value":"<div class=\"TightRow\">","position":{"start":{"line":256,"column":1,"offset":8002},"end":{"line":256,"column":23,"offset":8024},"indent":[]}},{"type":"code","lang":"graphql","meta":null,"value":"mutation {\n  publish(draftId: 1) {\n    id\n    title\n    body\n    published\n  }\n}","position":{"start":{"line":258,"column":1,"offset":8026},"end":{"line":267,"column":4,"offset":8121},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"json","meta":null,"value":"{\n  \"data\": {\n    \"publish\": {\n      \"id\": 1,\n      \"title\": \"Nexus\",\n      \"body\": \"...\",\n      \"published\": true\n    }\n  }\n}","position":{"start":{"line":269,"column":1,"offset":8123},"end":{"line":280,"column":4,"offset":8261},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"</div>","position":{"start":{"line":282,"column":1,"offset":8263},"end":{"line":282,"column":7,"offset":8269},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now, that published draft should be visible via the ","position":{"start":{"line":284,"column":1,"offset":8271},"end":{"line":284,"column":53,"offset":8323},"indent":[]}},{"type":"inlineCode","value":"posts","position":{"start":{"line":284,"column":53,"offset":8323},"end":{"line":284,"column":60,"offset":8330},"indent":[]}},{"type":"text","value":" Query. Run this query (left) and expect the following response (right):","position":{"start":{"line":284,"column":60,"offset":8330},"end":{"line":284,"column":132,"offset":8402},"indent":[]}}],"position":{"start":{"line":284,"column":1,"offset":8271},"end":{"line":284,"column":132,"offset":8402},"indent":[]}},{"type":"jsx","value":"<div class=\"TightRow\">","position":{"start":{"line":286,"column":1,"offset":8404},"end":{"line":286,"column":23,"offset":8426},"indent":[]}},{"type":"code","lang":"graphql","meta":null,"value":"query {\n  posts {\n    id\n    title\n    body\n    published\n  }\n}","position":{"start":{"line":288,"column":1,"offset":8428},"end":{"line":297,"column":4,"offset":8506},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"json","meta":null,"value":"{\n  \"data\": {\n    \"posts\": [\n      {\n        \"id\": 1,\n        \"title\": \"Nexus\",\n        \"body\": \"...\",\n        \"published\": true\n      }\n    ]\n  }\n}","position":{"start":{"line":299,"column":1,"offset":8508},"end":{"line":312,"column":4,"offset":8668},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"</div>","position":{"start":{"line":314,"column":1,"offset":8670},"end":{"line":314,"column":7,"offset":8676},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Wrapping Up","position":{"start":{"line":316,"column":4,"offset":8681},"end":{"line":316,"column":15,"offset":8692},"indent":[]}}],"position":{"start":{"line":316,"column":1,"offset":8678},"end":{"line":316,"column":15,"offset":8692},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Congratulations! You can now read and write to your API.","position":{"start":{"line":318,"column":1,"offset":8694},"end":{"line":318,"column":57,"offset":8750},"indent":[]}}],"position":{"start":{"line":318,"column":1,"offset":8694},"end":{"line":318,"column":57,"offset":8750},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"But, so far you've been validating your work by manually interacting with the Playground. That may be reasonable at first (depending on your relationship to TDD) but it will not scale. At some point you are going to want automated testing. Nexus takes testing seriously and in the next chapter we'll show you how. See you there!","position":{"start":{"line":320,"column":1,"offset":8752},"end":{"line":320,"column":329,"offset":9080},"indent":[]}}],"position":{"start":{"line":320,"column":1,"offset":8752},"end":{"line":320,"column":329,"offset":9080},"indent":[]}},{"type":"jsx","value":"<div class=\"NextIs NextChapter\"></div>","position":{"start":{"line":322,"column":1,"offset":9082},"end":{"line":322,"column":39,"offset":9120},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"/tutorial/chapter-4-testing-your-api","children":[{"type":"text","value":"âž³","position":{"start":{"line":324,"column":2,"offset":9123},"end":{"line":324,"column":3,"offset":9124},"indent":[]}}],"position":{"start":{"line":324,"column":1,"offset":9122},"end":{"line":324,"column":42,"offset":9163},"indent":[]}}],"position":{"start":{"line":324,"column":1,"offset":9122},"end":{"line":324,"column":42,"offset":9163},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"3. Adding Mutations to Your API\",\"metaTitle\":\"3. Adding Mutations to Your API\",\"metaDescription\":\"TODO\"}","position":{"start":{"line":327,"column":1,"offset":9166},"end":{"line":327,"column":143,"offset":9308},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":327,"column":143,"offset":9308}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"3. Adding Mutations to Your API\",\n  \"metaTitle\": \"3. Adding Mutations to Your API\",\n  \"metaDescription\": \"TODO\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h1\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"chapter-3-br-adding-mutations-to-your-api\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#chapter-3-br-adding-mutations-to-your-api\",\n    \"aria-label\": \"chapter 3 br adding mutations to your api permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Chapter 3 \", mdx(\"br\", null), \" Adding Mutations to Your API\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In this chapter you're going to add some write capability to your API. You'll learn about:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Writing GraphQL mutations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Exposing GraphQL objects for mutation operations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Working with GraphQL Context\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Working with GraphQL arguments\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To keep our learning gradual we'll stick to in-memory data for now but rest assured a proper databases is coming in an upcoming chapter.\"), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"wire-up-the-context\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#wire-up-the-context\",\n    \"aria-label\": \"wire up the context permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Wire Up The Context\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The first thing we'll do is setup an in-memory database and expose it to our resolvers using the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"GraphQL context\"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The GraphQL Context is a plain JavaScript object shared across all resolvers. Nexus creates a new one for each request and adds a few of its own properties. Largely though, what it will contains will be defined by your app. It is a good place to, for example, attach information about the logged-in user.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"So go ahead and create the database.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"touch api/db.ts\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// api/db.ts\\n\\nexport const db = {\\n  posts: [{ id: 1, title: 'Nexus', body: '...', published: false }],\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Now to expose it in our GraphQL context we'll use a new schema method called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"addToContext\"), \". We can do this anywhere in our app but a fine place is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"api/app.ts\"), \" module we already created in chapter 1.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// api/app.ts\\n\\nimport { schema } from 'nexus'\\nimport { db } from './db'\\n\\nschema.addToContext(() => {\\n  return {\\n    db,\\n  }\\n})\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"That's it. Behind the scenes Nexus will use the TypeScript compiler API to extract our return type here and propagate it to the parts of our app where the context is accessible. And if ever this process does not work for you for some reason you can use fallback to manually giving the types to Nexus like so:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"module global {\\n  interface NexusContext {\\n    // type information here\\n  }\\n}\\n\")), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \" For those familiar with GraphQL, you might be grimacing that we\\u2019re attaching static things to the context, instead of using export/import.\\nThis is a matter of convenience. Feel free to take a purer approach in your apps if you want.\"))), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"use-the-context\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#use-the-context\",\n    \"aria-label\": \"use the context permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Use The Context\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Now let's use this data to reimplement the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Query.drafts\"), \" resolver from the previous chapter.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"schema.queryType({\\n  name: 'Query',\\n  definition(t) {\\n    t.list.field('drafts', {\\n      type: 'Post',\\n-     resolve() {\\n-       return [{ id: 1, title: 'Nexus', body: '...', published: false }]\\n+     resolve(_root, _args, ctx) {                             // 1\\n+       return ctx.db.posts.filter(p => p.published === false)  // 2\\n      },\\n    })\\n  },\\n})\\n\")), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Context is the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"third\"), \" parameter, usually identified as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ctx\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Return the filtered data by un-published posts, \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"aka\"), \" drafts . Nexus makes sure the types line up.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Did you notice?\"), \" Still no TypeScript type annotations required from you yet everything is still totally type safe. Prove it to yourself by hovering over the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ctx.db.posts\"), \" property and witness the correct type information it gives you. This is the type propagation we just mentioned in action. \\uD83D\\uDE4C\")), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"your-first-mutation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#your-first-mutation\",\n    \"aria-label\": \"your first mutation permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Your First Mutation\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Alright, now that we know how to wire things into our context, let's implement our first mutation. We're going to make it possible for your API clients to create new drafts.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This mutation will need a name. Rather than simply call it \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createPost\"), \" we'll use language from our domain. In this case \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createDraft\"), \" seems reasonable. There are similarities with our previous work with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Query.drafts\"), \":\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Mutation\"), \" is a root type, its fields are entrypoints.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We can colocate mutation fields with the objects they relate to or centralize all mutation fields.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"As before we will take the colocation approach.\"), mdx(\"div\", {\n    className: \"TightRow\"\n  }, mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// api/graphql/Post.ts\\n// ...\\n\\nschema.extendType({\\n  name: 'Mutation',\\n  definition(t) {\\n    t.field('createDraft', {\\n      type: 'Post',\\n      nullable: false,              // 1\\n      resolve(_root, args, ctx) {\\n        ctx.db.posts.push(/*...*/)\\n        return // ...\\n      },\\n    })\\n  },\\n})\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"Mutation {\\n  createDraft: Post!\\n}\\n\"))), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"By default in Nexus all output types are nullable. This is for \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://graphql.org/learn/best-practices/#nullability\"\n  }), \"best practice reasons\"), \". In this case, we want to guarantee \", \"[to the client]\", \" that a Post object will always be returned upon a successful signup mutation.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If you're ever dissatisfied with Nexus' defaults, not to worry, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.nexusjs.org/#/api/modules/main/exports/settings?id=schemanullableinputs\"\n  }), \"you can change them globally\"), \".\"))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We need to get the client's input data to complete our resolver. This brings us to a new concept, GraphQL arguments. Every field in GraphQL may accept them. Effectively you can think of each field in GraphQL like a function, accepting some input, doing something, and returning an output. Most of the time \\\"doing something\\\" is a matter of some read-like operation but with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Mutation\"), \" fields the \\\"doing something\\\" usually entails a process with side-effects (e.g. writing to the databse).\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Let's revise our implementation with GraphQL arguments.\"), mdx(\"div\", {\n    className: \"IntrinsicRow\"\n  }, mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"schema.extendType({\\n  name: 'Mutation',\\n  definition(t) {\\n    t.field('createDraft', {\\n      type: 'Post',\\n+     args: {                                        // 1\\n+       title: schema.stringArg({ required: true }), // 2\\n+       body: schema.stringArg({ required: true }),  // 2\\n+     },\\n      resolve(_root, args, ctx) {\\n+       const draft = {\\n+         id: ctx.db.posts.length + 1,\\n+         title: args.title,                         // 3\\n+         body: args.body,                           // 3\\n+         published: false,\\n+       }\\n+       ctx.db.posts.push(draft)\\n+       return draft\\n-       ctx.db.posts.push(/*...*/)\\n-       return // ...\\n      },\\n    })\\n  },\\n})\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"Mutation {\\n-  createDraft: Post\\n+  createDraft(title: String!, body: String!): Post\\n}\\n\"))), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add an \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"args\"), \" property to the field definition to define its args. Keys are arg names and values are type specifications.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use the Nexus helpers for defining an arg type. There is one such helper for every GraphQL scalar such as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"schema.intArg\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"schema.booleanArg\"), \". If you want to reference a type like some InputObject then use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"schema.arg({ type: \\\"...\\\" })\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In our resolver, access the args we specified above and pass them through to our custom logic. If you hover over the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"args\"), \" parameter you'll see that Nexus has properly typed them including the fact that they cannot be undefined.\"))), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"model-the-domain-pt-2\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#model-the-domain-pt-2\",\n    \"aria-label\": \"model the domain pt 2 permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Model The Domain pt 2\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Before we wrap this chapter let's flush out our schema a bit more. We'll add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"publish\"), \" mutation to transform a draft into an actual published post, then we'll let API clients read the the published posts.\"), mdx(\"div\", {\n    className: \"IntrinsicRow\"\n  }, mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// api/graphql/Post.ts\\n\\nimport { schema } from 'nexus'\\n\\nschema.extendType({\\n  type: 'Mutation',\\n  definition(t) {\\n    // ...\\n    t.field('publish', {\\n      type: 'Post',\\n      args: {\\n        draftId: schema.intArg({ required: true }),\\n      },\\n      resolve(_root, args, ctx) {\\n        let draftToPublish = ctx.inDb.posts.find((p) => p.id === args.draftId)\\n\\n        if (!draftToPublish) {\\n          throw new Error('Could not find draft with id ' + args.draftId)\\n        }\\n\\n        draftToPublish.published = true\\n\\n        return draftToPublish\\n      },\\n    })\\n  },\\n})\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"type Mutation {\\n  createDraft(body: String!, title: String!): Post\\n+ publish(draftId: Int!): Post\\n}\\n\"))), mdx(\"div\", {\n    className: \"IntrinsicRow\"\n  }, mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// api/graphql/Post.ts\\n\\nimport { schema } from 'nexus'\\n\\nschema.extendType({\\n  name: 'Query',\\n  definition(t) {\\n    // ...\\n    t.list.field('posts', {\\n      type: 'Post',\\n      resolve(_root, _args, ctx) {\\n        return ctx.inDb.posts.filter((p) => p.published === true)\\n      },\\n    })\\n  },\\n})\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"type Query {\\n  drafts: [Post!]\\n+ posts: [Post!]\\n}\\n\")))), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"try-it-out\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#try-it-out\",\n    \"aria-label\": \"try it out permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Try It Out\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Great, now head on over to the GraphQL Playground and run this query (left). If everything went well, you should see a response like this (right):\"), mdx(\"div\", {\n    className: \"TightRow\"\n  }, mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"mutation {\\n  publish(draftId: 1) {\\n    id\\n    title\\n    body\\n    published\\n  }\\n}\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"publish\\\": {\\n      \\\"id\\\": 1,\\n      \\\"title\\\": \\\"Nexus\\\",\\n      \\\"body\\\": \\\"...\\\",\\n      \\\"published\\\": true\\n    }\\n  }\\n}\\n\"))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Now, that published draft should be visible via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"posts\"), \" Query. Run this query (left) and expect the following response (right):\"), mdx(\"div\", {\n    className: \"TightRow\"\n  }, mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query {\\n  posts {\\n    id\\n    title\\n    body\\n    published\\n  }\\n}\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"posts\\\": [\\n      {\\n        \\\"id\\\": 1,\\n        \\\"title\\\": \\\"Nexus\\\",\\n        \\\"body\\\": \\\"...\\\",\\n        \\\"published\\\": true\\n      }\\n    ]\\n  }\\n}\\n\")))), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"wrapping-up\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#wrapping-up\",\n    \"aria-label\": \"wrapping up permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Wrapping Up\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Congratulations! You can now read and write to your API.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"But, so far you've been validating your work by manually interacting with the Playground. That may be reasonable at first (depending on your relationship to TDD) but it will not scale. At some point you are going to want automated testing. Nexus takes testing seriously and in the next chapter we'll show you how. See you there!\"), mdx(\"div\", {\n    className: \"NextIs NextChapter\"\n  }), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/tutorial/chapter-4-testing-your-api\"\n  }), \"\\u27B3\")))));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"3. Adding Mutations to Your API\",\n  \"metaTitle\": \"3. Adding Mutations to Your API\",\n  \"metaDescription\": \"TODO\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <section><h1 parentName=\"section\" {...{\n        \"id\": \"chapter-3-br-adding-mutations-to-your-api\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h1\" {...{\n          \"href\": \"#chapter-3-br-adding-mutations-to-your-api\",\n          \"aria-label\": \"chapter 3 br adding mutations to your api permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Chapter 3 `}<br />{` Adding Mutations to Your API`}</h1><p parentName=\"section\">{`In this chapter you're going to add some write capability to your API. You'll learn about:`}</p><ul parentName=\"section\">\n        <li parentName=\"ul\">{`Writing GraphQL mutations`}</li>\n        <li parentName=\"ul\">{`Exposing GraphQL objects for mutation operations`}</li>\n        <li parentName=\"ul\">{`Working with GraphQL Context`}</li>\n        <li parentName=\"ul\">{`Working with GraphQL arguments`}</li>\n      </ul><p parentName=\"section\">{`To keep our learning gradual we'll stick to in-memory data for now but rest assured a proper databases is coming in an upcoming chapter.`}</p><section parentName=\"section\"><h2 parentName=\"section\" {...{\n          \"id\": \"wire-up-the-context\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h2\" {...{\n            \"href\": \"#wire-up-the-context\",\n            \"aria-label\": \"wire up the context permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Wire Up The Context`}</h2><p parentName=\"section\">{`The first thing we'll do is setup an in-memory database and expose it to our resolvers using the `}<em parentName=\"p\">{`GraphQL context`}</em>{`.`}</p><p parentName=\"section\">{`The GraphQL Context is a plain JavaScript object shared across all resolvers. Nexus creates a new one for each request and adds a few of its own properties. Largely though, what it will contains will be defined by your app. It is a good place to, for example, attach information about the logged-in user.`}</p><p parentName=\"section\">{`So go ahead and create the database.`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`touch api/db.ts\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}>{`// api/db.ts\n\nexport const db = {\n  posts: [{ id: 1, title: 'Nexus', body: '...', published: false }],\n}\n`}</code></pre><p parentName=\"section\">{`Now to expose it in our GraphQL context we'll use a new schema method called `}<inlineCode parentName=\"p\">{`addToContext`}</inlineCode>{`. We can do this anywhere in our app but a fine place is the `}<inlineCode parentName=\"p\">{`api/app.ts`}</inlineCode>{` module we already created in chapter 1.`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}>{`// api/app.ts\n\nimport { schema } from 'nexus'\nimport { db } from './db'\n\nschema.addToContext(() => {\n  return {\n    db,\n  }\n})\n`}</code></pre><p parentName=\"section\">{`That's it. Behind the scenes Nexus will use the TypeScript compiler API to extract our return type here and propagate it to the parts of our app where the context is accessible. And if ever this process does not work for you for some reason you can use fallback to manually giving the types to Nexus like so:`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}>{`module global {\n  interface NexusContext {\n    // type information here\n  }\n}\n`}</code></pre><blockquote parentName=\"section\">\n          <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note`}</strong>{` For those familiar with GraphQL, you might be grimacing that weâ€™re attaching static things to the context, instead of using export/import.\nThis is a matter of convenience. Feel free to take a purer approach in your apps if you want.`}</p>\n        </blockquote></section><section parentName=\"section\"><h2 parentName=\"section\" {...{\n          \"id\": \"use-the-context\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h2\" {...{\n            \"href\": \"#use-the-context\",\n            \"aria-label\": \"use the context permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Use The Context`}</h2><p parentName=\"section\">{`Now let's use this data to reimplement the `}<inlineCode parentName=\"p\">{`Query.drafts`}</inlineCode>{` resolver from the previous chapter.`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n            \"className\": \"language-diff\"\n          }}>{`schema.queryType({\n  name: 'Query',\n  definition(t) {\n    t.list.field('drafts', {\n      type: 'Post',\n-     resolve() {\n-       return [{ id: 1, title: 'Nexus', body: '...', published: false }]\n+     resolve(_root, _args, ctx) {                             // 1\n+       return ctx.db.posts.filter(p => p.published === false)  // 2\n      },\n    })\n  },\n})\n`}</code></pre><ol parentName=\"section\">\n          <li parentName=\"ol\">{`Context is the `}<em parentName=\"li\">{`third`}</em>{` parameter, usually identified as `}<inlineCode parentName=\"li\">{`ctx`}</inlineCode></li>\n          <li parentName=\"ol\">{`Return the filtered data by un-published posts, `}<em parentName=\"li\">{`aka`}</em>{` drafts . Nexus makes sure the types line up.`}</li>\n        </ol><p parentName=\"section\"><strong parentName=\"p\">{`Did you notice?`}</strong>{` Still no TypeScript type annotations required from you yet everything is still totally type safe. Prove it to yourself by hovering over the `}<inlineCode parentName=\"p\">{`ctx.db.posts`}</inlineCode>{` property and witness the correct type information it gives you. This is the type propagation we just mentioned in action. ðŸ™Œ`}</p></section><section parentName=\"section\"><h2 parentName=\"section\" {...{\n          \"id\": \"your-first-mutation\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h2\" {...{\n            \"href\": \"#your-first-mutation\",\n            \"aria-label\": \"your first mutation permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Your First Mutation`}</h2><p parentName=\"section\">{`Alright, now that we know how to wire things into our context, let's implement our first mutation. We're going to make it possible for your API clients to create new drafts.`}</p><p parentName=\"section\">{`This mutation will need a name. Rather than simply call it `}<inlineCode parentName=\"p\">{`createPost`}</inlineCode>{` we'll use language from our domain. In this case `}<inlineCode parentName=\"p\">{`createDraft`}</inlineCode>{` seems reasonable. There are similarities with our previous work with `}<inlineCode parentName=\"p\">{`Query.drafts`}</inlineCode>{`:`}</p><ul parentName=\"section\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Mutation`}</inlineCode>{` is a root type, its fields are entrypoints.`}</li>\n          <li parentName=\"ul\">{`We can colocate mutation fields with the objects they relate to or centralize all mutation fields.`}</li>\n        </ul><p parentName=\"section\">{`As before we will take the colocation approach.`}</p><div class=\"TightRow\">{\n            /* prettier-ignore */\n          }<pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-ts\"\n            }}>{`// api/graphql/Post.ts\n// ...\n\nschema.extendType({\n  name: 'Mutation',\n  definition(t) {\n    t.field('createDraft', {\n      type: 'Post',\n      nullable: false,              // 1\n      resolve(_root, args, ctx) {\n        ctx.db.posts.push(/*...*/)\n        return // ...\n      },\n    })\n  },\n})\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-graphql\"\n            }}>{`Mutation {\n  createDraft: Post!\n}\n`}</code></pre></div><ol parentName=\"section\">\n          <li parentName=\"ol\">\n            <p parentName=\"li\">{`By default in Nexus all output types are nullable. This is for `}<a parentName=\"p\" {...{\n                \"href\": \"https://graphql.org/learn/best-practices/#nullability\"\n              }}>{`best practice reasons`}</a>{`. In this case, we want to guarantee `}{`[to the client]`}{` that a Post object will always be returned upon a successful signup mutation.`}</p>\n            <p parentName=\"li\">{`If you're ever dissatisfied with Nexus' defaults, not to worry, `}<a parentName=\"p\" {...{\n                \"href\": \"https://www.nexusjs.org/#/api/modules/main/exports/settings?id=schemanullableinputs\"\n              }}>{`you can change them globally`}</a>{`.`}</p>\n          </li>\n        </ol><p parentName=\"section\">{`We need to get the client's input data to complete our resolver. This brings us to a new concept, GraphQL arguments. Every field in GraphQL may accept them. Effectively you can think of each field in GraphQL like a function, accepting some input, doing something, and returning an output. Most of the time \"doing something\" is a matter of some read-like operation but with `}<inlineCode parentName=\"p\">{`Mutation`}</inlineCode>{` fields the \"doing something\" usually entails a process with side-effects (e.g. writing to the databse).`}</p><p parentName=\"section\">{`Let's revise our implementation with GraphQL arguments.`}</p><div class=\"IntrinsicRow\"><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-diff\"\n            }}>{`schema.extendType({\n  name: 'Mutation',\n  definition(t) {\n    t.field('createDraft', {\n      type: 'Post',\n+     args: {                                        // 1\n+       title: schema.stringArg({ required: true }), // 2\n+       body: schema.stringArg({ required: true }),  // 2\n+     },\n      resolve(_root, args, ctx) {\n+       const draft = {\n+         id: ctx.db.posts.length + 1,\n+         title: args.title,                         // 3\n+         body: args.body,                           // 3\n+         published: false,\n+       }\n+       ctx.db.posts.push(draft)\n+       return draft\n-       ctx.db.posts.push(/*...*/)\n-       return // ...\n      },\n    })\n  },\n})\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-diff\"\n            }}>{`Mutation {\n-  createDraft: Post\n+  createDraft(title: String!, body: String!): Post\n}\n`}</code></pre></div><ol parentName=\"section\">\n          <li parentName=\"ol\">{`Add an `}<inlineCode parentName=\"li\">{`args`}</inlineCode>{` property to the field definition to define its args. Keys are arg names and values are type specifications.`}</li>\n          <li parentName=\"ol\">{`Use the Nexus helpers for defining an arg type. There is one such helper for every GraphQL scalar such as `}<inlineCode parentName=\"li\">{`schema.intArg`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`schema.booleanArg`}</inlineCode>{`. If you want to reference a type like some InputObject then use `}<inlineCode parentName=\"li\">{`schema.arg({ type: \"...\" })`}</inlineCode>{`.`}</li>\n          <li parentName=\"ol\">{`In our resolver, access the args we specified above and pass them through to our custom logic. If you hover over the `}<inlineCode parentName=\"li\">{`args`}</inlineCode>{` parameter you'll see that Nexus has properly typed them including the fact that they cannot be undefined.`}</li>\n        </ol></section><section parentName=\"section\"><h2 parentName=\"section\" {...{\n          \"id\": \"model-the-domain-pt-2\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h2\" {...{\n            \"href\": \"#model-the-domain-pt-2\",\n            \"aria-label\": \"model the domain pt 2 permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Model The Domain pt 2`}</h2><p parentName=\"section\">{`Before we wrap this chapter let's flush out our schema a bit more. We'll add a `}<inlineCode parentName=\"p\">{`publish`}</inlineCode>{` mutation to transform a draft into an actual published post, then we'll let API clients read the the published posts.`}</p><div class=\"IntrinsicRow\"><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-ts\"\n            }}>{`// api/graphql/Post.ts\n\nimport { schema } from 'nexus'\n\nschema.extendType({\n  type: 'Mutation',\n  definition(t) {\n    // ...\n    t.field('publish', {\n      type: 'Post',\n      args: {\n        draftId: schema.intArg({ required: true }),\n      },\n      resolve(_root, args, ctx) {\n        let draftToPublish = ctx.inDb.posts.find((p) => p.id === args.draftId)\n\n        if (!draftToPublish) {\n          throw new Error('Could not find draft with id ' + args.draftId)\n        }\n\n        draftToPublish.published = true\n\n        return draftToPublish\n      },\n    })\n  },\n})\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-diff\"\n            }}>{`type Mutation {\n  createDraft(body: String!, title: String!): Post\n+ publish(draftId: Int!): Post\n}\n`}</code></pre></div><div class=\"IntrinsicRow\"><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-ts\"\n            }}>{`// api/graphql/Post.ts\n\nimport { schema } from 'nexus'\n\nschema.extendType({\n  name: 'Query',\n  definition(t) {\n    // ...\n    t.list.field('posts', {\n      type: 'Post',\n      resolve(_root, _args, ctx) {\n        return ctx.inDb.posts.filter((p) => p.published === true)\n      },\n    })\n  },\n})\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-diff\"\n            }}>{`type Query {\n  drafts: [Post!]\n+ posts: [Post!]\n}\n`}</code></pre></div></section><section parentName=\"section\"><h2 parentName=\"section\" {...{\n          \"id\": \"try-it-out\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h2\" {...{\n            \"href\": \"#try-it-out\",\n            \"aria-label\": \"try it out permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Try It Out`}</h2><p parentName=\"section\">{`Great, now head on over to the GraphQL Playground and run this query (left). If everything went well, you should see a response like this (right):`}</p><div class=\"TightRow\"><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-graphql\"\n            }}>{`mutation {\n  publish(draftId: 1) {\n    id\n    title\n    body\n    published\n  }\n}\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-json\"\n            }}>{`{\n  \"data\": {\n    \"publish\": {\n      \"id\": 1,\n      \"title\": \"Nexus\",\n      \"body\": \"...\",\n      \"published\": true\n    }\n  }\n}\n`}</code></pre></div><p parentName=\"section\">{`Now, that published draft should be visible via the `}<inlineCode parentName=\"p\">{`posts`}</inlineCode>{` Query. Run this query (left) and expect the following response (right):`}</p><div class=\"TightRow\"><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-graphql\"\n            }}>{`query {\n  posts {\n    id\n    title\n    body\n    published\n  }\n}\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-json\"\n            }}>{`{\n  \"data\": {\n    \"posts\": [\n      {\n        \"id\": 1,\n        \"title\": \"Nexus\",\n        \"body\": \"...\",\n        \"published\": true\n      }\n    ]\n  }\n}\n`}</code></pre></div></section><section parentName=\"section\"><h2 parentName=\"section\" {...{\n          \"id\": \"wrapping-up\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h2\" {...{\n            \"href\": \"#wrapping-up\",\n            \"aria-label\": \"wrapping up permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Wrapping Up`}</h2><p parentName=\"section\">{`Congratulations! You can now read and write to your API.`}</p><p parentName=\"section\">{`But, so far you've been validating your work by manually interacting with the Playground. That may be reasonable at first (depending on your relationship to TDD) but it will not scale. At some point you are going to want automated testing. Nexus takes testing seriously and in the next chapter we'll show you how. See you there!`}</p><div class=\"NextIs NextChapter\"></div><p parentName=\"section\"><a parentName=\"p\" {...{\n            \"href\": \"/tutorial/chapter-4-testing-your-api\"\n          }}>{`âž³`}</a></p></section></section>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}