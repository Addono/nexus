{"expireTime":9007200846068255000,"key":"gatsby-plugin-mdx-entire-payload-fb67b307111e58b3a393577a3f608872-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Schema","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":10,"offset":10},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":10,"offset":10},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"/api/modules/main/exports/schema","children":[{"type":"text","value":"API Reference","position":{"start":{"line":4,"column":2,"offset":13},"end":{"line":4,"column":15,"offset":26},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":12},"end":{"line":4,"column":50,"offset":61},"indent":[]}},{"type":"text","value":" ‚åÅ ","position":{"start":{"line":4,"column":50,"offset":61},"end":{"line":4,"column":53,"offset":64},"indent":[]}},{"type":"link","title":null,"url":"https://nxs.li/issues/component/schema","children":[{"type":"text","value":"issues","position":{"start":{"line":4,"column":54,"offset":65},"end":{"line":4,"column":60,"offset":71},"indent":[]}}],"position":{"start":{"line":4,"column":53,"offset":64},"end":{"line":4,"column":101,"offset":112},"indent":[]}},{"type":"text","value":" / ","position":{"start":{"line":4,"column":101,"offset":112},"end":{"line":4,"column":104,"offset":115},"indent":[]}},{"type":"link","title":null,"url":"https://nxs.li/issues/components/schema/features","children":[{"type":"text","value":"features","position":{"start":{"line":4,"column":105,"offset":116},"end":{"line":4,"column":113,"offset":124},"indent":[]}}],"position":{"start":{"line":4,"column":104,"offset":115},"end":{"line":4,"column":164,"offset":175},"indent":[]}},{"type":"text","value":" | ","position":{"start":{"line":4,"column":164,"offset":175},"end":{"line":4,"column":167,"offset":178},"indent":[]}},{"type":"link","title":null,"url":"https://nxs.li/issues/component/schema/bugs","children":[{"type":"text","value":"bugs","position":{"start":{"line":4,"column":168,"offset":179},"end":{"line":4,"column":172,"offset":183},"indent":[]}}],"position":{"start":{"line":4,"column":167,"offset":178},"end":{"line":4,"column":218,"offset":229},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":12},"end":{"line":4,"column":218,"offset":229},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is the Nexus schema component guide. Here you will find concepts explained and a survey of how to use the API. If you are not familiar with Nexus this is a good document to read. If you are familiar, then the ","position":{"start":{"line":6,"column":1,"offset":231},"end":{"line":6,"column":215,"offset":445},"indent":[]}},{"type":"link","title":null,"url":"/api/modules/main/exports/schema","children":[{"type":"text","value":"Schema API Docs","position":{"start":{"line":6,"column":216,"offset":446},"end":{"line":6,"column":231,"offset":461},"indent":[]}}],"position":{"start":{"line":6,"column":215,"offset":445},"end":{"line":6,"column":266,"offset":496},"indent":[]}},{"type":"text","value":" may be of more use to you.","position":{"start":{"line":6,"column":266,"offset":496},"end":{"line":6,"column":293,"offset":523},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":231},"end":{"line":6,"column":293,"offset":523},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Introduction","position":{"start":{"line":8,"column":4,"offset":528},"end":{"line":8,"column":16,"offset":540},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":525},"end":{"line":8,"column":16,"offset":540},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Importing","position":{"start":{"line":10,"column":5,"offset":546},"end":{"line":10,"column":14,"offset":555},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":542},"end":{"line":10,"column":14,"offset":555},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You will use the schema component of Nexus to build your GraphQL schema. You can import it as a named export from the main module of the ","position":{"start":{"line":12,"column":1,"offset":557},"end":{"line":12,"column":138,"offset":694},"indent":[]}},{"type":"inlineCode","value":"nexus","position":{"start":{"line":12,"column":138,"offset":694},"end":{"line":12,"column":145,"offset":701},"indent":[]}},{"type":"text","value":" package. If you prefer you can also import the default ","position":{"start":{"line":12,"column":145,"offset":701},"end":{"line":12,"column":201,"offset":757},"indent":[]}},{"type":"inlineCode","value":"app","position":{"start":{"line":12,"column":201,"offset":757},"end":{"line":12,"column":206,"offset":762},"indent":[]}},{"type":"text","value":" export and then access the ","position":{"start":{"line":12,"column":206,"offset":762},"end":{"line":12,"column":234,"offset":790},"indent":[]}},{"type":"inlineCode","value":"schema","position":{"start":{"line":12,"column":234,"offset":790},"end":{"line":12,"column":242,"offset":798},"indent":[]}},{"type":"text","value":" property.","position":{"start":{"line":12,"column":242,"offset":798},"end":{"line":12,"column":252,"offset":808},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":557},"end":{"line":12,"column":252,"offset":808},"indent":[]}},{"type":"jsx","value":"<!-- prettier-ignore -->","position":{"start":{"line":14,"column":1,"offset":810},"end":{"line":14,"column":25,"offset":834},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"import app from 'nexus'        // default style\nimport { schema } from 'nexus' // named-export style\n\napp.schema === schema // true","position":{"start":{"line":15,"column":1,"offset":835},"end":{"line":20,"column":4,"offset":976},"indent":[1,1,1,1,1]}},{"type":"jsx","value":"<p class=\"NextIs Tip\"></p>","position":{"start":{"line":22,"column":1,"offset":978},"end":{"line":22,"column":27,"offset":1004},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Leverage ","position":{"start":{"line":24,"column":3,"offset":1008},"end":{"line":24,"column":12,"offset":1017},"indent":[]}},{"type":"link","title":null,"url":"https://code.visualstudio.com/docs/languages/typescript#_auto-imports","children":[{"type":"text","value":"VSCode auto-import","position":{"start":{"line":24,"column":13,"offset":1018},"end":{"line":24,"column":31,"offset":1036},"indent":[]}}],"position":{"start":{"line":24,"column":12,"offset":1017},"end":{"line":24,"column":103,"offset":1108},"indent":[]}},{"type":"text","value":". Anywhere in a TypeScript module in your project type either ","position":{"start":{"line":24,"column":103,"offset":1108},"end":{"line":24,"column":165,"offset":1170},"indent":[]}},{"type":"inlineCode","value":"app","position":{"start":{"line":24,"column":165,"offset":1170},"end":{"line":24,"column":170,"offset":1175},"indent":[]}},{"type":"text","value":" to summon auto-import for the default style or ","position":{"start":{"line":24,"column":170,"offset":1175},"end":{"line":24,"column":218,"offset":1223},"indent":[]}},{"type":"inlineCode","value":"schema","position":{"start":{"line":24,"column":218,"offset":1223},"end":{"line":24,"column":226,"offset":1231},"indent":[]}},{"type":"text","value":" for named-export style.","position":{"start":{"line":24,"column":226,"offset":1231},"end":{"line":24,"column":250,"offset":1255},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":1008},"end":{"line":24,"column":250,"offset":1255},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1006},"end":{"line":24,"column":250,"offset":1255},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Singleton & Mutation","position":{"start":{"line":26,"column":5,"offset":1261},"end":{"line":26,"column":25,"offset":1281},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1257},"end":{"line":26,"column":25,"offset":1281},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The schema component is part of the app singleton and usage of its methods affects the overall app state. While this is not a functionally pure approach it does allow you to use its methods throughout your project without having to think about exporting/importing values. One of Nexus' design goals is to approach the ease and readability of ","position":{"start":{"line":28,"column":1,"offset":1283},"end":{"line":28,"column":343,"offset":1625},"indent":[]}},{"type":"link","title":null,"url":"https://www.prisma.io/blog/graphql-sdl-schema-definition-language-6755bcb9ce51","children":[{"type":"text","value":"GraphQL SDL","position":{"start":{"line":28,"column":344,"offset":1626},"end":{"line":28,"column":355,"offset":1637},"indent":[]}}],"position":{"start":{"line":28,"column":343,"offset":1625},"end":{"line":28,"column":436,"offset":1718},"indent":[]}},{"type":"text","value":" where we can. This is one example of doing that.","position":{"start":{"line":28,"column":436,"offset":1718},"end":{"line":28,"column":485,"offset":1767},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1283},"end":{"line":28,"column":485,"offset":1767},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As an example, the following snippet shows the addition of an object type to the GraphQL schema. Notice how the return value is not used in any way. The method is actually mutating the app state.","position":{"start":{"line":30,"column":1,"offset":1769},"end":{"line":30,"column":196,"offset":1964},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1769},"end":{"line":30,"column":196,"offset":1964},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"import { schema } from 'nexus'\n\nschema.objectType({\n  name: 'Foo',\n  definition(t) {\n    t.string('bar', () => 'qux')\n  },\n})","position":{"start":{"line":32,"column":1,"offset":1966},"end":{"line":41,"column":4,"offset":2101},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"GraphQL Type Builders","position":{"start":{"line":43,"column":4,"offset":2106},"end":{"line":43,"column":25,"offset":2127},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":2103},"end":{"line":43,"column":25,"offset":2127},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We will now begin exploring the GraphQL schema building parts of the schema component. Having prior knowledge of GraphQL language itself will greatly help. If you are new to GraphQL you may want to read some of the resources listed below.","position":{"start":{"line":45,"column":1,"offset":2129},"end":{"line":45,"column":239,"offset":2367},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":2129},"end":{"line":45,"column":239,"offset":2367},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://graphql.org","children":[{"type":"text","value":"graphql.org","position":{"start":{"line":47,"column":4,"offset":2372},"end":{"line":47,"column":15,"offset":2383},"indent":[]}}],"position":{"start":{"line":47,"column":3,"offset":2371},"end":{"line":47,"column":37,"offset":2405},"indent":[]}}],"position":{"start":{"line":47,"column":3,"offset":2371},"end":{"line":47,"column":37,"offset":2405},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":2369},"end":{"line":47,"column":37,"offset":2405},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.howtographql.com","children":[{"type":"text","value":"howtographql.com","position":{"start":{"line":48,"column":4,"offset":2409},"end":{"line":48,"column":20,"offset":2425},"indent":[]}}],"position":{"start":{"line":48,"column":3,"offset":2408},"end":{"line":48,"column":51,"offset":2456},"indent":[]}}],"position":{"start":{"line":48,"column":3,"offset":2408},"end":{"line":48,"column":51,"offset":2456},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":2406},"end":{"line":48,"column":51,"offset":2456},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://book.productionreadygraphql.com/","children":[{"type":"text","value":"Production Ready GraphQL","position":{"start":{"line":49,"column":4,"offset":2460},"end":{"line":49,"column":28,"offset":2484},"indent":[]}}],"position":{"start":{"line":49,"column":3,"offset":2459},"end":{"line":49,"column":71,"offset":2527},"indent":[]}}],"position":{"start":{"line":49,"column":3,"offset":2459},"end":{"line":49,"column":71,"offset":2527},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":2457},"end":{"line":49,"column":71,"offset":2527},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":2369},"end":{"line":49,"column":71,"offset":2527},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Object Type","position":{"start":{"line":51,"column":5,"offset":2533},"end":{"line":51,"column":16,"offset":2544},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":2529},"end":{"line":51,"column":16,"offset":2544},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://graphql.org/learn/schema/#object-types-and-fields","children":[{"type":"text","value":"graphql.org Object Types","position":{"start":{"line":53,"column":2,"offset":2547},"end":{"line":53,"column":26,"offset":2571},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":2546},"end":{"line":53,"column":86,"offset":2631},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":2546},"end":{"line":53,"column":86,"offset":2631},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Basic Anatomy","position":{"start":{"line":55,"column":6,"offset":2638},"end":{"line":55,"column":19,"offset":2651},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":2633},"end":{"line":55,"column":19,"offset":2651},"indent":[]}},{"type":"jsx","value":"<!-- prettier-ignore -->","position":{"start":{"line":57,"column":1,"offset":2653},"end":{"line":57,"column":25,"offset":2677},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"                                      schema.objectType({\n// The singleton instance of ---------^      |\n// the Nexus schema component                |\n//                                           |\n// A type Builder method --------------------^\n                                        name: 'Foo',\n// The name of this type ----------------------^\n                                        definition(t) {\n// The type definition block -----------^          |\n// Where fields are defined                        |\n//                                                 |\n// Object of Object Type Field --------------------^\n// Builder methods\n                                          t.field('bar', {\n// A field builder method ------------------^      |\n// The name of this field -------------------------^\n                                            type: 'Bar',\n// The type of this field -------------------------^\n                                            resolve(parent, args, ctx, info) {\n// The method called to return a -----------^       |       |     |    |\n// value for this field when queried                |       |     |    |\n//                                                  |       |     |    |\n// The backing data model for Foo ------------------^       |     |    |\n//                                                          |     |    |\n// The client arguments to this field ----------------------^     |    |\n//                                                                |    |\n// Contextual data for this request ------------------------------^    |\n// Shared across all resolvers                                         |\n//                                                                     |\n// Technical detail about this request --------------------------------^\n// E.g. client's query AST\n\n// Your logic to return a value ------------> ...\n// for this field\n                                            },\n                                          })\n\n                                          t.string('qux')\n// A scalar-type convenience builder -------^       |\n//                                                  |\n// No resolver means Nexus returns the -------------^\n// `qux` property from the backing data model\n\n                                        },\n                                      })","position":{"start":{"line":58,"column":1,"offset":2678},"end":{"line":104,"column":4,"offset":5019},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Scalar Fields","position":{"start":{"line":106,"column":6,"offset":5026},"end":{"line":106,"column":19,"offset":5039},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":5021},"end":{"line":106,"column":19,"offset":5039},"indent":[]}},{"type":"jsx","value":"<cols>","position":{"start":{"line":108,"column":1,"offset":5041},"end":{"line":108,"column":7,"offset":5047},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"schema.objectType({\n  name: 'Alpha',\n  definition(t) {\n    t.id('a')\n    t.string('b')\n    t.int('c')\n    t.float('d')\n    t.boolean('e')\n  },\n})","position":{"start":{"line":110,"column":1,"offset":5049},"end":{"line":121,"column":4,"offset":5204},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"graphql","meta":null,"value":"type Alpha {\n  a: ID!\n  b: String!\n  c: Int!\n  d: Float!\n  e: Boolean!\n}","position":{"start":{"line":123,"column":1,"offset":5206},"end":{"line":131,"column":4,"offset":5293},"indent":[1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"</cols>","position":{"start":{"line":133,"column":1,"offset":5295},"end":{"line":133,"column":8,"offset":5302},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Relational Fields","position":{"start":{"line":135,"column":6,"offset":5309},"end":{"line":135,"column":23,"offset":5326},"indent":[]}}],"position":{"start":{"line":135,"column":1,"offset":5304},"end":{"line":135,"column":23,"offset":5326},"indent":[]}},{"type":"jsx","value":"<cols>","position":{"start":{"line":137,"column":1,"offset":5328},"end":{"line":137,"column":7,"offset":5334},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"schema.objectType({\n  name: 'Alpha',\n  definition(t) {\n    t.field('beta', {\n      type: 'Beta',\n      resolve() {\n        return { foo: 'bar' }\n      },\n    })\n  },\n})\nschema.objectType({\n  name: 'Beta',\n  definition(t) {\n    t.string('foo')\n  },\n})","position":{"start":{"line":139,"column":1,"offset":5336},"end":{"line":157,"column":4,"offset":5596},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"graphql","meta":null,"value":"type Alpha {\n  beta: Beta!\n}\n\ntype Beta {\n  foo: String!\n}","position":{"start":{"line":159,"column":1,"offset":5598},"end":{"line":167,"column":4,"offset":5671},"indent":[1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"</cols>","position":{"start":{"line":169,"column":1,"offset":5673},"end":{"line":169,"column":8,"offset":5680},"indent":[]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Lists & Nullability","position":{"start":{"line":171,"column":8,"offset":5689},"end":{"line":171,"column":27,"offset":5708},"indent":[]}}],"position":{"start":{"line":171,"column":1,"offset":5682},"end":{"line":171,"column":27,"offset":5708},"indent":[]}},{"type":"jsx","value":"<cols>","position":{"start":{"line":173,"column":1,"offset":5710},"end":{"line":173,"column":7,"offset":5716},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"schema.objectType({\n  name: 'Alpha',\n  definition(t) {\n    t.id('a', { nullable: true })\n    t.list.id('b')\n    t.list.id('c', { nullable: true })\n    t.list.id('c', { list: [false] })\n    t.list.id('c', { list: [false], nullable: true })\n  },\n})","position":{"start":{"line":175,"column":1,"offset":5718},"end":{"line":186,"column":4,"offset":5974},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"graphql","meta":null,"value":"type Alpha {\n  a: ID\n  b: [ID!]!\n  c: [ID!]\n  c: [ID]!\n  c: [ID]\n}","position":{"start":{"line":188,"column":1,"offset":5976},"end":{"line":196,"column":4,"offset":6057},"indent":[1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"</cols>","position":{"start":{"line":198,"column":1,"offset":6059},"end":{"line":198,"column":8,"offset":6066},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Entrypoint Types","position":{"start":{"line":200,"column":5,"offset":6072},"end":{"line":200,"column":21,"offset":6088},"indent":[]}}],"position":{"start":{"line":200,"column":1,"offset":6068},"end":{"line":200,"column":21,"offset":6088},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Enum Type","position":{"start":{"line":202,"column":5,"offset":6094},"end":{"line":202,"column":14,"offset":6103},"indent":[]}}],"position":{"start":{"line":202,"column":1,"offset":6090},"end":{"line":202,"column":14,"offset":6103},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Enum types are a scalar with a finite set of allowed values. They can be used as argument types and as field types.","position":{"start":{"line":204,"column":1,"offset":6105},"end":{"line":204,"column":116,"offset":6220},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":6105},"end":{"line":204,"column":116,"offset":6220},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://graphql.org/learn/schema/#enumeration-types","children":[{"type":"text","value":"graphql.org Enumeration Types docs","position":{"start":{"line":206,"column":2,"offset":6223},"end":{"line":206,"column":36,"offset":6257},"indent":[]}}],"position":{"start":{"line":206,"column":1,"offset":6222},"end":{"line":206,"column":90,"offset":6311},"indent":[]}}],"position":{"start":{"line":206,"column":1,"offset":6222},"end":{"line":206,"column":90,"offset":6311},"indent":[]}},{"type":"jsx","value":"<cols>","position":{"start":{"line":208,"column":1,"offset":6313},"end":{"line":208,"column":7,"offset":6319},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"schema.enum({\n  name: 'Alpha',\n  members: ['Zeta', 'Yolo'],\n})","position":{"start":{"line":210,"column":1,"offset":6321},"end":{"line":215,"column":4,"offset":6393},"indent":[1,1,1,1,1]}},{"type":"code","lang":"graphql","meta":null,"value":"enum Alpha {\n  Zeta\n  Yolo\n}","position":{"start":{"line":217,"column":1,"offset":6395},"end":{"line":222,"column":4,"offset":6438},"indent":[1,1,1,1,1]}},{"type":"jsx","value":"</cols>","position":{"start":{"line":224,"column":1,"offset":6440},"end":{"line":224,"column":8,"offset":6447},"indent":[]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Example: As argument type & field type","position":{"start":{"line":226,"column":8,"offset":6456},"end":{"line":226,"column":46,"offset":6494},"indent":[]}}],"position":{"start":{"line":226,"column":1,"offset":6449},"end":{"line":226,"column":46,"offset":6494},"indent":[]}},{"type":"jsx","value":"<cols>","position":{"start":{"line":228,"column":1,"offset":6496},"end":{"line":228,"column":7,"offset":6502},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"schema.queryType({\n  definition(t) {\n    t.field('anyAlpha', {\n      type: 'Alpha',\n      resolve(t) {\n        return Math.random() > 0.1 : 'Zeta' : 'Yolo'\n      }\n    })\n    t.list.field('alphas', {\n      type: 'Alpha',\n      args: {\n        except: schema.arg({\n          list: true,\n          type: \"Alpha\",\n          required: true,\n        })\n      },\n      resolve(_root, args) {\n        return ['Zeta', 'Yolo'].filter(alpha => {\n          return !args.except.includes(alpha)\n        })\n      }\n    })\n  }\n})","position":{"start":{"line":230,"column":1,"offset":6504},"end":{"line":256,"column":4,"offset":7028},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"graphql","meta":null,"value":"type Query {\n  anyAlpha: Alpha!\n  alphas(except: [Alpha!]!): [Alpha!]!\n}","position":{"start":{"line":258,"column":1,"offset":7030},"end":{"line":263,"column":4,"offset":7117},"indent":[1,1,1,1,1]}},{"type":"jsx","value":"</cols>\n<cols>","position":{"start":{"line":265,"column":1,"offset":7119},"end":{"line":266,"column":7,"offset":7133},"indent":[1]}},{"type":"code","lang":"graphql","meta":null,"value":"query {\n  anyAlpha\n  alphas(except: [\"Zeta\"])\n}","position":{"start":{"line":268,"column":1,"offset":7135},"end":{"line":273,"column":4,"offset":7197},"indent":[1,1,1,1,1]}},{"type":"code","lang":"json","meta":null,"value":"{\n  \"data\": {\n    \"anyAlpha\": \"Zeta\",\n    \"alphas\": [\"Yolo\"]\n  }\n}","position":{"start":{"line":275,"column":1,"offset":7199},"end":{"line":282,"column":4,"offset":7277},"indent":[1,1,1,1,1,1,1]}},{"type":"jsx","value":"</cols>","position":{"start":{"line":284,"column":1,"offset":7279},"end":{"line":284,"column":8,"offset":7286},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Union Type","position":{"start":{"line":286,"column":5,"offset":7292},"end":{"line":286,"column":15,"offset":7302},"indent":[]}}],"position":{"start":{"line":286,"column":1,"offset":7288},"end":{"line":286,"column":15,"offset":7302},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Interface Type","position":{"start":{"line":288,"column":5,"offset":7308},"end":{"line":288,"column":19,"offset":7322},"indent":[]}}],"position":{"start":{"line":288,"column":1,"offset":7304},"end":{"line":288,"column":19,"offset":7322},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Field Arguments","position":{"start":{"line":290,"column":5,"offset":7328},"end":{"line":290,"column":20,"offset":7343},"indent":[]}}],"position":{"start":{"line":290,"column":1,"offset":7324},"end":{"line":290,"column":20,"offset":7343},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Input Object Type","position":{"start":{"line":292,"column":5,"offset":7349},"end":{"line":292,"column":22,"offset":7366},"indent":[]}}],"position":{"start":{"line":292,"column":1,"offset":7345},"end":{"line":292,"column":22,"offset":7366},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Lists","position":{"start":{"line":294,"column":5,"offset":7372},"end":{"line":294,"column":10,"offset":7377},"indent":[]}}],"position":{"start":{"line":294,"column":1,"offset":7368},"end":{"line":294,"column":10,"offset":7377},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Descriptions","position":{"start":{"line":296,"column":5,"offset":7383},"end":{"line":296,"column":17,"offset":7395},"indent":[]}}],"position":{"start":{"line":296,"column":1,"offset":7379},"end":{"line":296,"column":17,"offset":7395},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Deprecations","position":{"start":{"line":298,"column":5,"offset":7401},"end":{"line":298,"column":17,"offset":7413},"indent":[]}}],"position":{"start":{"line":298,"column":1,"offset":7397},"end":{"line":298,"column":17,"offset":7413},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Data Modelling","position":{"start":{"line":300,"column":4,"offset":7418},"end":{"line":300,"column":18,"offset":7432},"indent":[]}}],"position":{"start":{"line":300,"column":1,"offset":7415},"end":{"line":300,"column":18,"offset":7432},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As the API author, there are three design tasks you will invariable perform over and over again:","position":{"start":{"line":302,"column":1,"offset":7434},"end":{"line":302,"column":97,"offset":7530},"indent":[]}}],"position":{"start":{"line":302,"column":1,"offset":7434},"end":{"line":302,"column":97,"offset":7530},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create data types that model logical entities and concepts in your business domain.","position":{"start":{"line":304,"column":4,"offset":7535},"end":{"line":304,"column":87,"offset":7618},"indent":[]}}],"position":{"start":{"line":304,"column":4,"offset":7535},"end":{"line":304,"column":87,"offset":7618},"indent":[]}}],"position":{"start":{"line":304,"column":1,"offset":7532},"end":{"line":304,"column":87,"offset":7618},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Define connections between these data types that model how logical entities and concepts relate in your business domain.","position":{"start":{"line":305,"column":4,"offset":7622},"end":{"line":305,"column":124,"offset":7742},"indent":[]}}],"position":{"start":{"line":305,"column":4,"offset":7622},"end":{"line":305,"column":124,"offset":7742},"indent":[]}}],"position":{"start":{"line":305,"column":1,"offset":7619},"end":{"line":305,"column":124,"offset":7742},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Define entrypoints which allow traversal into this graph of data.","position":{"start":{"line":306,"column":4,"offset":7746},"end":{"line":306,"column":69,"offset":7811},"indent":[]}}],"position":{"start":{"line":306,"column":4,"offset":7746},"end":{"line":306,"column":69,"offset":7811},"indent":[]}}],"position":{"start":{"line":306,"column":1,"offset":7743},"end":{"line":306,"column":69,"offset":7811},"indent":[]}}],"position":{"start":{"line":304,"column":1,"offset":7532},"end":{"line":306,"column":69,"offset":7811},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is an iterative process that can generally be seen as an finite loop wherein your team gradually refines and expands (or contracts!) the data graph as you respond to changing client app needs, business needs, and so on. Data modelling is hard work. For one thing it is a suble art, occasionally underappreciated. There are typically multiple ways to model any one thing and competing tradeoffs that leave no obvious winner abound. If the process of data modelling itself or data modelling in GraphQL is new to you, you may find this book by ","position":{"start":{"line":308,"column":1,"offset":7813},"end":{"line":308,"column":547,"offset":8359},"indent":[]}},{"type":"link","title":null,"url":"https://twitter.com/__xuorig__","children":[{"type":"text","value":"Marc-Andre Giroux","position":{"start":{"line":308,"column":548,"offset":8360},"end":{"line":308,"column":565,"offset":8377},"indent":[]}}],"position":{"start":{"line":308,"column":547,"offset":8359},"end":{"line":308,"column":598,"offset":8410},"indent":[]}},{"type":"text","value":" helpful: ","position":{"start":{"line":308,"column":598,"offset":8410},"end":{"line":308,"column":608,"offset":8420},"indent":[]}},{"type":"link","title":null,"url":"https://book.productionreadygraphql.com/","children":[{"type":"text","value":"Production Ready GraphQL","position":{"start":{"line":308,"column":609,"offset":8421},"end":{"line":308,"column":633,"offset":8445},"indent":[]}}],"position":{"start":{"line":308,"column":608,"offset":8420},"end":{"line":308,"column":676,"offset":8488},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":308,"column":676,"offset":8488},"end":{"line":308,"column":677,"offset":8489},"indent":[]}}],"position":{"start":{"line":308,"column":1,"offset":7813},"end":{"line":308,"column":677,"offset":8489},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Nullability in Principal","position":{"start":{"line":310,"column":4,"offset":8494},"end":{"line":310,"column":28,"offset":8518},"indent":[]}}],"position":{"start":{"line":310,"column":1,"offset":8491},"end":{"line":310,"column":28,"offset":8518},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When creating an API, especially before going to production or lifting features out of beta, thinking about if arguments and input object fields (","position":{"start":{"line":312,"column":1,"offset":8520},"end":{"line":312,"column":147,"offset":8666},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"inputs","position":{"start":{"line":312,"column":148,"offset":8667},"end":{"line":312,"column":154,"offset":8673},"indent":[]}}],"position":{"start":{"line":312,"column":147,"offset":8666},"end":{"line":312,"column":155,"offset":8674},"indent":[]}},{"type":"text","value":") should be required and if object type fields (","position":{"start":{"line":312,"column":155,"offset":8674},"end":{"line":312,"column":203,"offset":8722},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"outputs","position":{"start":{"line":312,"column":204,"offset":8723},"end":{"line":312,"column":211,"offset":8730},"indent":[]}}],"position":{"start":{"line":312,"column":203,"offset":8722},"end":{"line":312,"column":212,"offset":8731},"indent":[]}},{"type":"text","value":") should be nullable is an important design consideration. How easy your API is to consume trades for how easy it is to change and some reliability characteristics.","position":{"start":{"line":312,"column":212,"offset":8731},"end":{"line":312,"column":376,"offset":8895},"indent":[]}}],"position":{"start":{"line":312,"column":1,"offset":8520},"end":{"line":312,"column":376,"offset":8895},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If inputs are optional or outputs are guaranteed then client developers will have a simpler API to deal with since making requests demands no up front configuration and handling responses presents no null cases. On the other hand, for the API developer, changing the API becomes harder since turning inputs from optional to required or making outputs go from guaranteed to nullable are breaking changes from the client's point of view.","position":{"start":{"line":314,"column":1,"offset":8897},"end":{"line":314,"column":436,"offset":9332},"indent":[]}}],"position":{"start":{"line":314,"column":1,"offset":8897},"end":{"line":314,"column":436,"offset":9332},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Also, as more outputs are guaranteed, the greater the potential of the \"null blast radius\" can be. This is the effect where, within a schema rutime, a ","position":{"start":{"line":316,"column":1,"offset":9334},"end":{"line":316,"column":152,"offset":9485},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":316,"column":152,"offset":9485},"end":{"line":316,"column":158,"offset":9491},"indent":[]}},{"type":"text","value":" or error received from some data source where the schema states there shall be no ","position":{"start":{"line":316,"column":158,"offset":9491},"end":{"line":316,"column":241,"offset":9574},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":316,"column":241,"offset":9574},"end":{"line":316,"column":247,"offset":9580},"indent":[]}},{"type":"text","value":" requires propagating the ","position":{"start":{"line":316,"column":247,"offset":9580},"end":{"line":316,"column":273,"offset":9606},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":316,"column":273,"offset":9606},"end":{"line":316,"column":279,"offset":9612},"indent":[]}},{"type":"text","value":" up the data tree until a nullable type is found (or, at root, finally error).","position":{"start":{"line":316,"column":279,"offset":9612},"end":{"line":316,"column":357,"offset":9690},"indent":[]}}],"position":{"start":{"line":316,"column":1,"offset":9334},"end":{"line":316,"column":357,"offset":9690},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you'd like to see these design considerations discussed further here are a few articles/resources you may find helpful:","position":{"start":{"line":318,"column":1,"offset":9692},"end":{"line":318,"column":123,"offset":9814},"indent":[]}}],"position":{"start":{"line":318,"column":1,"offset":9692},"end":{"line":318,"column":123,"offset":9814},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"2019 ","position":{"start":{"line":320,"column":3,"offset":9818},"end":{"line":320,"column":8,"offset":9823},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com/expedia-group-tech/nullability-in-graphql-b8d06fbd8a3c","children":[{"type":"text","value":"Nullability in GraphQL","position":{"start":{"line":320,"column":9,"offset":9824},"end":{"line":320,"column":31,"offset":9846},"indent":[]}}],"position":{"start":{"line":320,"column":8,"offset":9823},"end":{"line":320,"column":107,"offset":9922},"indent":[]}},{"type":"text","value":" by Grant Norwood","position":{"start":{"line":320,"column":107,"offset":9922},"end":{"line":320,"column":124,"offset":9939},"indent":[]}}],"position":{"start":{"line":320,"column":3,"offset":9818},"end":{"line":320,"column":124,"offset":9939},"indent":[]}}],"position":{"start":{"line":320,"column":1,"offset":9816},"end":{"line":320,"column":124,"offset":9939},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"2018 ","position":{"start":{"line":321,"column":3,"offset":9942},"end":{"line":321,"column":8,"offset":9947},"indent":[]}},{"type":"link","title":null,"url":"https://blog.apollographql.com/using-nullability-in-graphql-2254f84c4ed7","children":[{"type":"text","value":"Using nullability in GraphQL","position":{"start":{"line":321,"column":9,"offset":9948},"end":{"line":321,"column":37,"offset":9976},"indent":[]}}],"position":{"start":{"line":321,"column":8,"offset":9947},"end":{"line":321,"column":112,"offset":10051},"indent":[]}},{"type":"text","value":" by Sashko Stubailo","position":{"start":{"line":321,"column":112,"offset":10051},"end":{"line":321,"column":131,"offset":10070},"indent":[]}}],"position":{"start":{"line":321,"column":3,"offset":9942},"end":{"line":321,"column":131,"offset":10070},"indent":[]}}],"position":{"start":{"line":321,"column":1,"offset":9940},"end":{"line":321,"column":131,"offset":10070},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"2017 ","position":{"start":{"line":322,"column":3,"offset":10073},"end":{"line":322,"column":8,"offset":10078},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com/@calebmer/when-to-use-graphql-non-null-fields-4059337f6fc8","children":[{"type":"text","value":"When To Use GraphQL Non-Null Fields","position":{"start":{"line":322,"column":9,"offset":10079},"end":{"line":322,"column":44,"offset":10114},"indent":[]}}],"position":{"start":{"line":322,"column":8,"offset":10078},"end":{"line":322,"column":124,"offset":10194},"indent":[]}},{"type":"text","value":" by Caleb Meredith","position":{"start":{"line":322,"column":124,"offset":10194},"end":{"line":322,"column":142,"offset":10212},"indent":[]}}],"position":{"start":{"line":322,"column":3,"offset":10073},"end":{"line":322,"column":142,"offset":10212},"indent":[]}}],"position":{"start":{"line":322,"column":1,"offset":10071},"end":{"line":322,"column":142,"offset":10212},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://graphql.org/learn/best-practices/#nullability","children":[{"type":"text","value":"Nullability Best Practices","position":{"start":{"line":323,"column":4,"offset":10216},"end":{"line":323,"column":30,"offset":10242},"indent":[]}}],"position":{"start":{"line":323,"column":3,"offset":10215},"end":{"line":323,"column":86,"offset":10298},"indent":[]}},{"type":"text","value":" on grpahql.org","position":{"start":{"line":323,"column":86,"offset":10298},"end":{"line":323,"column":101,"offset":10313},"indent":[]}}],"position":{"start":{"line":323,"column":3,"offset":10215},"end":{"line":323,"column":101,"offset":10313},"indent":[]}}],"position":{"start":{"line":323,"column":1,"offset":10213},"end":{"line":323,"column":101,"offset":10313},"indent":[]}}],"position":{"start":{"line":320,"column":1,"offset":9816},"end":{"line":323,"column":101,"offset":10313},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Nullability in Nexus","position":{"start":{"line":325,"column":4,"offset":10318},"end":{"line":325,"column":24,"offset":10338},"indent":[]}}],"position":{"start":{"line":325,"column":1,"offset":10315},"end":{"line":325,"column":24,"offset":10338},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Nexus defaults to both inputs and outputs being nullable. This means by default your API is conservative in what it sends but flexible in what it accepts. With this approach, by default:","position":{"start":{"line":327,"column":1,"offset":10340},"end":{"line":327,"column":187,"offset":10526},"indent":[]}}],"position":{"start":{"line":327,"column":1,"offset":10340},"end":{"line":327,"column":187,"offset":10526},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"You're free to defer some hard thinking about output nullability, knowing you can always change your mind later without breaking clients.","position":{"start":{"line":329,"column":3,"offset":10530},"end":{"line":329,"column":140,"offset":10667},"indent":[]}}],"position":{"start":{"line":329,"column":3,"offset":10530},"end":{"line":329,"column":140,"offset":10667},"indent":[]}}],"position":{"start":{"line":329,"column":1,"offset":10528},"end":{"line":329,"column":140,"offset":10667},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Client developers work more to processing API respones, having to handle null conditions.","position":{"start":{"line":330,"column":3,"offset":10670},"end":{"line":330,"column":92,"offset":10759},"indent":[]}}],"position":{"start":{"line":330,"column":3,"offset":10670},"end":{"line":330,"column":92,"offset":10759},"indent":[]}}],"position":{"start":{"line":330,"column":1,"offset":10668},"end":{"line":330,"column":92,"offset":10759},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"You're forced to frontload some hard thinking about inputs, since realizing something should have been required later will require breaking clients.","position":{"start":{"line":331,"column":3,"offset":10762},"end":{"line":331,"column":151,"offset":10910},"indent":[]}}],"position":{"start":{"line":331,"column":3,"offset":10762},"end":{"line":331,"column":151,"offset":10910},"indent":[]}}],"position":{"start":{"line":331,"column":1,"offset":10760},"end":{"line":331,"column":151,"offset":10910},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Client developers work less to satisfy minimum query requirements.","position":{"start":{"line":332,"column":3,"offset":10913},"end":{"line":332,"column":69,"offset":10979},"indent":[]}}],"position":{"start":{"line":332,"column":3,"offset":10913},"end":{"line":332,"column":69,"offset":10979},"indent":[]}}],"position":{"start":{"line":332,"column":1,"offset":10911},"end":{"line":332,"column":69,"offset":10979},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The \"null blast radius\" (refer to ","position":{"start":{"line":333,"column":3,"offset":10982},"end":{"line":333,"column":37,"offset":11016},"indent":[]}},{"type":"link","title":null,"url":"#nullability-in-principal","children":[{"type":"text","value":"Nullability in Principal","position":{"start":{"line":333,"column":38,"offset":11017},"end":{"line":333,"column":62,"offset":11041},"indent":[]}}],"position":{"start":{"line":333,"column":37,"offset":11016},"end":{"line":333,"column":90,"offset":11069},"indent":[]}},{"type":"text","value":") is reduced to zero.","position":{"start":{"line":333,"column":90,"offset":11069},"end":{"line":333,"column":111,"offset":11090},"indent":[]}}],"position":{"start":{"line":333,"column":3,"offset":10982},"end":{"line":333,"column":111,"offset":11090},"indent":[]}}],"position":{"start":{"line":333,"column":1,"offset":10980},"end":{"line":333,"column":111,"offset":11090},"indent":[]}}],"position":{"start":{"line":329,"column":1,"offset":10528},"end":{"line":333,"column":111,"offset":11090},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"There is no right or wrong answer to nullability. These are just defaults, not judgements. Understand the tradeoffs, and react to your use-case, above all.","position":{"start":{"line":335,"column":1,"offset":11092},"end":{"line":335,"column":156,"offset":11247},"indent":[]}}],"position":{"start":{"line":335,"column":1,"offset":11092},"end":{"line":335,"column":156,"offset":11247},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can override the global defaults at the per-type level or per-field level. If you find yourself writing local overrides in a majority of cases then it might mean the global defaults are a bad fit for your API. In that case you can change the global defaults.","position":{"start":{"line":337,"column":1,"offset":11249},"end":{"line":337,"column":263,"offset":11511},"indent":[]}}],"position":{"start":{"line":337,"column":1,"offset":11249},"end":{"line":337,"column":263,"offset":11511},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When you make an input nullable then Nexus will alter its TypeScript type inside your resolver to have ","position":{"start":{"line":339,"column":1,"offset":11513},"end":{"line":339,"column":104,"offset":11616},"indent":[]}},{"type":"inlineCode","value":"null | undefined","position":{"start":{"line":339,"column":104,"offset":11616},"end":{"line":339,"column":122,"offset":11634},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":339,"column":122,"offset":11634},"end":{"line":339,"column":124,"offset":11636},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":339,"column":124,"offset":11636},"end":{"line":339,"column":130,"offset":11642},"indent":[]}},{"type":"text","value":" is for the case that the client passed in an explicit ","position":{"start":{"line":339,"column":130,"offset":11642},"end":{"line":339,"column":185,"offset":11697},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":339,"column":185,"offset":11697},"end":{"line":339,"column":191,"offset":11703},"indent":[]}},{"type":"text","value":" while ","position":{"start":{"line":339,"column":191,"offset":11703},"end":{"line":339,"column":198,"offset":11710},"indent":[]}},{"type":"inlineCode","value":"undefined","position":{"start":{"line":339,"column":198,"offset":11710},"end":{"line":339,"column":209,"offset":11721},"indent":[]}},{"type":"text","value":" is for the case where the client simply did not specify the input at all.","position":{"start":{"line":339,"column":209,"offset":11721},"end":{"line":339,"column":283,"offset":11795},"indent":[]}}],"position":{"start":{"line":339,"column":1,"offset":11513},"end":{"line":339,"column":283,"offset":11795},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If an arg has been given a default value, then it will be used when the client passes nothing, but since clients can still pass explicit ","position":{"start":{"line":341,"column":1,"offset":11797},"end":{"line":341,"column":138,"offset":11934},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":341,"column":138,"offset":11934},"end":{"line":341,"column":144,"offset":11940},"indent":[]}},{"type":"text","value":", resolvers must still handle nullability. If this surprises you then you may be interested in ","position":{"start":{"line":341,"column":144,"offset":11940},"end":{"line":341,"column":239,"offset":12035},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/graphql-nexus/nexus/issues/485","children":[{"type":"text","value":"#485","position":{"start":{"line":341,"column":240,"offset":12036},"end":{"line":341,"column":244,"offset":12040},"indent":[]}}],"position":{"start":{"line":341,"column":239,"offset":12035},"end":{"line":341,"column":296,"offset":12092},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":341,"column":296,"offset":12092},"end":{"line":341,"column":297,"offset":12093},"indent":[]}}],"position":{"start":{"line":341,"column":1,"offset":11797},"end":{"line":341,"column":297,"offset":12093},"indent":[]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Example: Default Nullability Settings","position":{"start":{"line":343,"column":8,"offset":12102},"end":{"line":343,"column":45,"offset":12139},"indent":[]}}],"position":{"start":{"line":343,"column":1,"offset":12095},"end":{"line":343,"column":45,"offset":12139},"indent":[]}},{"type":"jsx","value":"<cols>","position":{"start":{"line":345,"column":1,"offset":12141},"end":{"line":345,"column":7,"offset":12147},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"schema.queryType({\n  definition(t) {\n    t.string('echo', {\n      args: {\n        message: 'String',\n      },\n      resolve(_root, args) {\n        return args.message ?? 'nil'\n      },\n    })\n  },\n})","position":{"start":{"line":347,"column":1,"offset":12149},"end":{"line":360,"column":4,"offset":12358},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"graphql","meta":null,"value":"type Query {\n  echo(message: String): String\n}","position":{"start":{"line":362,"column":1,"offset":12360},"end":{"line":366,"column":4,"offset":12421},"indent":[1,1,1,1]}},{"type":"jsx","value":"</cols>","position":{"start":{"line":368,"column":1,"offset":12423},"end":{"line":368,"column":8,"offset":12430},"indent":[]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Example: Nullability Flipped at Global Level","position":{"start":{"line":370,"column":8,"offset":12439},"end":{"line":370,"column":52,"offset":12483},"indent":[]}}],"position":{"start":{"line":370,"column":1,"offset":12432},"end":{"line":370,"column":52,"offset":12483},"indent":[]}},{"type":"jsx","value":"<cols>","position":{"start":{"line":372,"column":1,"offset":12485},"end":{"line":372,"column":7,"offset":12491},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"settings.change({\n  schema: {\n    nullable: {\n      outputs: false,\n      inputs: false,\n    },\n  },\n})\n\nschema.queryType({\n  definition(t) {\n    t.string('echo', {\n      args: {\n        message: 'String',\n      },\n      resolve(_root, args) {\n        return args.message\n      },\n    })\n  },\n})","position":{"start":{"line":374,"column":1,"offset":12493},"end":{"line":396,"column":4,"offset":12798},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"graphql","meta":null,"value":"type Query {\n  echo(message: String): String!\n}","position":{"start":{"line":398,"column":1,"offset":12800},"end":{"line":402,"column":4,"offset":12862},"indent":[1,1,1,1]}},{"type":"jsx","value":"</cols>","position":{"start":{"line":404,"column":1,"offset":12864},"end":{"line":404,"column":8,"offset":12871},"indent":[]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Example: Nullability Flipped at Type Level","position":{"start":{"line":406,"column":8,"offset":12880},"end":{"line":406,"column":50,"offset":12922},"indent":[]}}],"position":{"start":{"line":406,"column":1,"offset":12873},"end":{"line":406,"column":50,"offset":12922},"indent":[]}},{"type":"jsx","value":"<cols>","position":{"start":{"line":408,"column":1,"offset":12924},"end":{"line":408,"column":7,"offset":12930},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"schema.queryType({\n  nonNullDefaults: {\n    input: true,\n    output: true,\n  },\n  definition(t) {\n    t.string('echo', {\n      args: {\n        message: 'String',\n      },\n      resolve(_root, args) {\n        return args.message\n      },\n    })\n  },\n})","position":{"start":{"line":410,"column":1,"offset":12932},"end":{"line":427,"column":4,"offset":13193},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"graphql","meta":null,"value":"type Query {\n  echo(message: String): String!\n}","position":{"start":{"line":429,"column":1,"offset":13195},"end":{"line":433,"column":4,"offset":13257},"indent":[1,1,1,1]}},{"type":"jsx","value":"</cols>","position":{"start":{"line":435,"column":1,"offset":13259},"end":{"line":435,"column":8,"offset":13266},"indent":[]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Example: Nullability Flipped at Input & Field Level","position":{"start":{"line":437,"column":8,"offset":13275},"end":{"line":437,"column":59,"offset":13326},"indent":[]}}],"position":{"start":{"line":437,"column":1,"offset":13268},"end":{"line":437,"column":59,"offset":13326},"indent":[]}},{"type":"jsx","value":"<cols>","position":{"start":{"line":439,"column":1,"offset":13328},"end":{"line":439,"column":7,"offset":13334},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"schema.queryType({\n  definition(t) {\n    t.string('echo', {\n      args: {\n        message: schema.arg({\n          type: 'String',\n          nullable: false,\n        }),\n      },\n      nullable: false,\n      resolve(_root, args) {\n        return args.message\n      },\n    })\n  },\n})","position":{"start":{"line":441,"column":1,"offset":13336},"end":{"line":458,"column":4,"offset":13627},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"graphql","meta":null,"value":"type Query {\n  echo(message: String): String!\n}","position":{"start":{"line":460,"column":1,"offset":13629},"end":{"line":464,"column":4,"offset":13691},"indent":[1,1,1,1]}},{"type":"jsx","value":"</cols>","position":{"start":{"line":466,"column":1,"offset":13693},"end":{"line":466,"column":8,"offset":13700},"indent":[]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Example: Mixing Levels","position":{"start":{"line":468,"column":8,"offset":13709},"end":{"line":468,"column":30,"offset":13731},"indent":[]}}],"position":{"start":{"line":468,"column":1,"offset":13702},"end":{"line":468,"column":30,"offset":13731},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It is possible to use type and input/field layers together. This provides flexibility to optimize for local sections of your API that have different characteristics. For example here, a type deviates from the global default for all but but one field and its input.","position":{"start":{"line":470,"column":1,"offset":13733},"end":{"line":470,"column":265,"offset":13997},"indent":[]}}],"position":{"start":{"line":470,"column":1,"offset":13733},"end":{"line":470,"column":265,"offset":13997},"indent":[]}},{"type":"jsx","value":"<cols>","position":{"start":{"line":472,"column":1,"offset":13999},"end":{"line":472,"column":7,"offset":14005},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"schema.queryType({\n  // flip the global defaults\n  nonNullDefaults: {\n    input: true,\n    output: true,\n  },\n  definition(t) {\n    // ... Everything in this type uses the type-level\n    // nullability config ... Except the following,\n    // which effectively reverts back to what the global\n    // defaults are:\n    t.string('echo', {\n      nullable: false,\n      args: {\n        message: schema.arg({\n          type: 'String',\n          nullable: false,\n        }),\n      },\n      resolve(_root, args) {\n        return args.message\n      },\n    })\n  },\n})","position":{"start":{"line":474,"column":1,"offset":14007},"end":{"line":500,"column":4,"offset":14574},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"graphql","meta":null,"value":"type Query {\n  foo(bar: String): String!\n}","position":{"start":{"line":502,"column":1,"offset":14576},"end":{"line":506,"column":4,"offset":14633},"indent":[1,1,1,1]}},{"type":"jsx","value":"</cols>","position":{"start":{"line":508,"column":1,"offset":14635},"end":{"line":508,"column":8,"offset":14642},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Example: Args That Have Default Values","position":{"start":{"line":510,"column":6,"offset":14649},"end":{"line":510,"column":44,"offset":14687},"indent":[]}}],"position":{"start":{"line":510,"column":1,"offset":14644},"end":{"line":510,"column":44,"offset":14687},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When an arg has a default you might think that then it should be nullable to the client but non-nullable within your resolver logic. However it turns out that if the client passes an ","position":{"start":{"line":512,"column":1,"offset":14689},"end":{"line":512,"column":184,"offset":14872},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"explicit","position":{"start":{"line":512,"column":185,"offset":14873},"end":{"line":512,"column":193,"offset":14881},"indent":[]}}],"position":{"start":{"line":512,"column":184,"offset":14872},"end":{"line":512,"column":194,"offset":14882},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":512,"column":194,"offset":14882},"end":{"line":512,"column":195,"offset":14883},"indent":[]}},{"type":"inlineCode","value":"null","position":{"start":{"line":512,"column":195,"offset":14883},"end":{"line":512,"column":201,"offset":14889},"indent":[]}},{"type":"text","value":" then that is considered an actual value, and hence is not subject to being assigned the default value. Thus, and then, the resolver still can observe null from the client. If you are curious about seeing this change and/or become configurable then please refer to ","position":{"start":{"line":512,"column":201,"offset":14889},"end":{"line":512,"column":466,"offset":15154},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/graphql-nexus/nexus/issues/485","children":[{"type":"text","value":"#485","position":{"start":{"line":512,"column":467,"offset":15155},"end":{"line":512,"column":471,"offset":15159},"indent":[]}}],"position":{"start":{"line":512,"column":466,"offset":15154},"end":{"line":512,"column":523,"offset":15211},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":512,"column":523,"offset":15211},"end":{"line":512,"column":524,"offset":15212},"indent":[]}}],"position":{"start":{"line":512,"column":1,"offset":14689},"end":{"line":512,"column":524,"offset":15212},"indent":[]}},{"type":"jsx","value":"<cols>","position":{"start":{"line":514,"column":1,"offset":15214},"end":{"line":514,"column":7,"offset":15220},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"schema.queryType({\n  definition(t) {\n    t.string('echo', {\n      args: {\n        message: schema.arg({\n          type: 'String',\n          default: 'nil via default',\n        }),\n      },\n      nullable: false,\n      resolve(_root, args) {\n        const fallback = 'nil via client null'\n        return args.message ?? fallback\n      },\n    })\n  },\n})","position":{"start":{"line":516,"column":1,"offset":15222},"end":{"line":534,"column":4,"offset":15583},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"graphql","meta":null,"value":"type Query {\n  echo(message: String = \"nothing via default\"): String!\n}}","position":{"start":{"line":536,"column":1,"offset":15585},"end":{"line":540,"column":4,"offset":15672},"indent":[1,1,1,1]}},{"type":"jsx","value":"</cols>\n<cols>","position":{"start":{"line":542,"column":1,"offset":15674},"end":{"line":543,"column":7,"offset":15688},"indent":[1]}},{"type":"code","lang":"graphql","meta":null,"value":"query {\n  echo1: echo\n  echo2: echo(message: null)\n}","position":{"start":{"line":545,"column":1,"offset":15690},"end":{"line":550,"column":4,"offset":15757},"indent":[1,1,1,1,1]}},{"type":"code","lang":"json","meta":null,"value":"{\n  \"data\": {\n    \"echo1\": \"nil via default\",\n    \"echo2\": \"nil via client null\"\n  }\n}","position":{"start":{"line":552,"column":1,"offset":15759},"end":{"line":559,"column":4,"offset":15857},"indent":[1,1,1,1,1,1,1]}},{"type":"jsx","value":"</cols>","position":{"start":{"line":561,"column":1,"offset":15859},"end":{"line":561,"column":8,"offset":15866},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Backing Types in Principal","position":{"start":{"line":563,"column":4,"offset":15871},"end":{"line":563,"column":30,"offset":15897},"indent":[]}}],"position":{"start":{"line":563,"column":1,"offset":15868},"end":{"line":563,"column":30,"offset":15897},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As you begin to implement a schema for the first time you will notice something that may not have been obvious at first. The data that the client sees in the data graph is ","position":{"start":{"line":565,"column":1,"offset":15899},"end":{"line":565,"column":173,"offset":16071},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"not","position":{"start":{"line":565,"column":174,"offset":16072},"end":{"line":565,"column":177,"offset":16075},"indent":[]}}],"position":{"start":{"line":565,"column":173,"offset":16071},"end":{"line":565,"column":178,"offset":16076},"indent":[]}},{"type":"text","value":" the same data flowing through the internal resolvers used to fulfill that graph. The client sees the API types but the API author deals with something else, ","position":{"start":{"line":565,"column":178,"offset":16076},"end":{"line":565,"column":336,"offset":16234},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"backing types","position":{"start":{"line":565,"column":337,"offset":16235},"end":{"line":565,"column":350,"offset":16248},"indent":[]}}],"position":{"start":{"line":565,"column":336,"offset":16234},"end":{"line":565,"column":351,"offset":16249},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":565,"column":351,"offset":16249},"end":{"line":565,"column":352,"offset":16250},"indent":[]}}],"position":{"start":{"line":565,"column":1,"offset":15899},"end":{"line":565,"column":352,"offset":16250},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is an example of resolution for a query as it would be seen roughly from a GraphQL type ","position":{"start":{"line":567,"column":1,"offset":16252},"end":{"line":567,"column":94,"offset":16345},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"only","position":{"start":{"line":567,"column":95,"offset":16346},"end":{"line":567,"column":99,"offset":16350},"indent":[]}}],"position":{"start":{"line":567,"column":94,"offset":16345},"end":{"line":567,"column":100,"offset":16351},"indent":[]}},{"type":"text","value":" point of view.","position":{"start":{"line":567,"column":100,"offset":16351},"end":{"line":567,"column":115,"offset":16366},"indent":[]}}],"position":{"start":{"line":567,"column":1,"offset":16252},"end":{"line":567,"column":115,"offset":16366},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"../assets/diagram-backing-types-1.png","alt":null,"position":{"start":{"line":569,"column":1,"offset":16368},"end":{"line":569,"column":43,"offset":16410},"indent":[]}}],"position":{"start":{"line":569,"column":1,"offset":16368},"end":{"line":569,"column":43,"offset":16410},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When a field's type is an object, then the field's resolver returns a backing type. Concretely this might for example be a plain JavaScript object containing node/row/document data from a database call. This backing type data is in turn passed down to all the object type's own field resolvers.","position":{"start":{"line":571,"column":1,"offset":16412},"end":{"line":571,"column":295,"offset":16706},"indent":[]}}],"position":{"start":{"line":571,"column":1,"offset":16412},"end":{"line":571,"column":295,"offset":16706},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is the above diagram updated to include backing types now.","position":{"start":{"line":573,"column":1,"offset":16708},"end":{"line":573,"column":64,"offset":16771},"indent":[]}}],"position":{"start":{"line":573,"column":1,"offset":16708},"end":{"line":573,"column":64,"offset":16771},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"../assets/diagram-backing-types-2.png","alt":null,"position":{"start":{"line":575,"column":1,"offset":16773},"end":{"line":575,"column":43,"offset":16815},"indent":[]}}],"position":{"start":{"line":575,"column":1,"offset":16773},"end":{"line":575,"column":43,"offset":16815},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is a step-by-step breakdown of what is going on (follow the diagram annotation numbers):","position":{"start":{"line":577,"column":1,"offset":16817},"end":{"line":577,"column":94,"offset":16910},"indent":[]}}],"position":{"start":{"line":577,"column":1,"offset":16817},"end":{"line":577,"column":94,"offset":16910},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Client sends a query","position":{"start":{"line":579,"column":4,"offset":16915},"end":{"line":579,"column":24,"offset":16935},"indent":[]}}],"position":{"start":{"line":579,"column":4,"offset":16915},"end":{"line":579,"column":24,"offset":16935},"indent":[]}}],"position":{"start":{"line":579,"column":1,"offset":16912},"end":{"line":579,"column":24,"offset":16935},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The field resolver for ","position":{"start":{"line":580,"column":4,"offset":16939},"end":{"line":580,"column":27,"offset":16962},"indent":[]}},{"type":"inlineCode","value":"Query.user","position":{"start":{"line":580,"column":27,"offset":16962},"end":{"line":580,"column":39,"offset":16974},"indent":[]}},{"type":"text","value":" runs. Remember ","position":{"start":{"line":580,"column":39,"offset":16974},"end":{"line":580,"column":55,"offset":16990},"indent":[]}},{"type":"inlineCode","value":"Query","position":{"start":{"line":580,"column":55,"offset":16990},"end":{"line":580,"column":62,"offset":16997},"indent":[]}},{"type":"text","value":" fields (along with ","position":{"start":{"line":580,"column":62,"offset":16997},"end":{"line":580,"column":82,"offset":17017},"indent":[]}},{"type":"inlineCode","value":"Subscription","position":{"start":{"line":580,"column":82,"offset":17017},"end":{"line":580,"column":96,"offset":17031},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":580,"column":96,"offset":17031},"end":{"line":580,"column":98,"offset":17033},"indent":[]}},{"type":"inlineCode","value":"Mutation","position":{"start":{"line":580,"column":98,"offset":17033},"end":{"line":580,"column":108,"offset":17043},"indent":[]}},{"type":"text","value":") are ","position":{"start":{"line":580,"column":108,"offset":17043},"end":{"line":580,"column":114,"offset":17049},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"entrypoints","position":{"start":{"line":580,"column":115,"offset":17050},"end":{"line":580,"column":126,"offset":17061},"indent":[]}}],"position":{"start":{"line":580,"column":114,"offset":17049},"end":{"line":580,"column":127,"offset":17062},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":580,"column":127,"offset":17062},"end":{"line":580,"column":128,"offset":17063},"indent":[]}}],"position":{"start":{"line":580,"column":4,"offset":16939},"end":{"line":580,"column":128,"offset":17063},"indent":[]}}],"position":{"start":{"line":580,"column":1,"offset":16936},"end":{"line":580,"column":128,"offset":17063},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Within this resolver, the database client fetches a user from the database. The resolver returns this data. This data will now become ","position":{"start":{"line":581,"column":4,"offset":17067},"end":{"line":581,"column":138,"offset":17201},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"backing type","position":{"start":{"line":581,"column":140,"offset":17203},"end":{"line":581,"column":152,"offset":17215},"indent":[]}}],"position":{"start":{"line":581,"column":138,"offset":17201},"end":{"line":581,"column":154,"offset":17217},"indent":[]}},{"type":"text","value":" data...","position":{"start":{"line":581,"column":154,"offset":17217},"end":{"line":581,"column":162,"offset":17225},"indent":[]}}],"position":{"start":{"line":581,"column":4,"offset":17067},"end":{"line":581,"column":162,"offset":17225},"indent":[]}}],"position":{"start":{"line":581,"column":1,"offset":17064},"end":{"line":581,"column":162,"offset":17225},"indent":[]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Resolution continues since the type of ","position":{"start":{"line":582,"column":4,"offset":17229},"end":{"line":582,"column":43,"offset":17268},"indent":[]}},{"type":"inlineCode","value":"Query.user","position":{"start":{"line":582,"column":43,"offset":17268},"end":{"line":582,"column":55,"offset":17280},"indent":[]}},{"type":"text","value":" field is an object, not a scalar. As such its own fields need resolving. The fields that get resolved are limited to those selected by the client, in this case: ","position":{"start":{"line":582,"column":55,"offset":17280},"end":{"line":582,"column":217,"offset":17442},"indent":[]}},{"type":"inlineCode","value":"fullName","position":{"start":{"line":582,"column":217,"offset":17442},"end":{"line":582,"column":227,"offset":17452},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":582,"column":227,"offset":17452},"end":{"line":582,"column":229,"offset":17454},"indent":[]}},{"type":"inlineCode","value":"age","position":{"start":{"line":582,"column":229,"offset":17454},"end":{"line":582,"column":234,"offset":17459},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":582,"column":234,"offset":17459},"end":{"line":582,"column":236,"offset":17461},"indent":[]}},{"type":"inlineCode","value":"comments","position":{"start":{"line":582,"column":236,"offset":17461},"end":{"line":582,"column":246,"offset":17471},"indent":[]}},{"type":"text","value":". Those three field resolvers run. Their ","position":{"start":{"line":582,"column":246,"offset":17471},"end":{"line":582,"column":287,"offset":17512},"indent":[]}},{"type":"inlineCode","value":"parent","position":{"start":{"line":582,"column":287,"offset":17512},"end":{"line":582,"column":295,"offset":17520},"indent":[]}},{"type":"text","value":" argument is the user model data fetched in step 3. ","position":{"start":{"line":582,"column":295,"offset":17520},"end":{"line":582,"column":347,"offset":17572},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"This is the backing type data for the GraphQL ","position":{"start":{"line":582,"column":348,"offset":17573},"end":{"line":582,"column":394,"offset":17619},"indent":[]}},{"type":"inlineCode","value":"User","position":{"start":{"line":582,"column":394,"offset":17619},"end":{"line":582,"column":400,"offset":17625},"indent":[]}},{"type":"text","value":" object","position":{"start":{"line":582,"column":400,"offset":17625},"end":{"line":582,"column":407,"offset":17632},"indent":[]}}],"position":{"start":{"line":582,"column":347,"offset":17572},"end":{"line":582,"column":408,"offset":17633},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":582,"column":408,"offset":17633},"end":{"line":582,"column":409,"offset":17634},"indent":[]}}],"position":{"start":{"line":582,"column":4,"offset":17229},"end":{"line":582,"column":409,"offset":17634},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"t.field('...', {\n  resolve(parent, args, ctx, info) {\n    //    ^------------------------------- Here\n  },\n}","position":{"start":{"line":584,"column":4,"offset":17639},"end":{"line":590,"column":7,"offset":17775},"indent":[4,4,4,4,4,4]}}],"position":{"start":{"line":582,"column":1,"offset":17226},"end":{"line":591,"column":1,"offset":17776},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":592,"column":4,"offset":17780},"end":{"line":592,"column":8,"offset":17784},"indent":[]}},{"type":"inlineCode","value":"comments","position":{"start":{"line":592,"column":8,"offset":17784},"end":{"line":592,"column":18,"offset":17794},"indent":[]}},{"type":"text","value":" field is is an object type so just like with ","position":{"start":{"line":592,"column":18,"offset":17794},"end":{"line":592,"column":64,"offset":17840},"indent":[]}},{"type":"inlineCode","value":"Query.users","position":{"start":{"line":592,"column":64,"offset":17840},"end":{"line":592,"column":77,"offset":17853},"indent":[]}},{"type":"text","value":" before, its own fields must be resolved. The ","position":{"start":{"line":592,"column":77,"offset":17853},"end":{"line":592,"column":123,"offset":17899},"indent":[]}},{"type":"inlineCode","value":"comments","position":{"start":{"line":592,"column":123,"offset":17899},"end":{"line":592,"column":133,"offset":17909},"indent":[]}},{"type":"text","value":" resolver fetches comments data from the database. Like in step 3 this data becomes ","position":{"start":{"line":592,"column":133,"offset":17909},"end":{"line":592,"column":217,"offset":17993},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"backing type","position":{"start":{"line":592,"column":218,"offset":17994},"end":{"line":592,"column":230,"offset":18006},"indent":[]}}],"position":{"start":{"line":592,"column":217,"offset":17993},"end":{"line":592,"column":231,"offset":18007},"indent":[]}},{"type":"text","value":" data.","position":{"start":{"line":592,"column":231,"offset":18007},"end":{"line":592,"column":237,"offset":18013},"indent":[]}}],"position":{"start":{"line":592,"column":4,"offset":17780},"end":{"line":592,"column":237,"offset":18013},"indent":[]}}],"position":{"start":{"line":592,"column":1,"offset":17777},"end":{"line":593,"column":1,"offset":18014},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Much like the GraphQL ","position":{"start":{"line":594,"column":4,"offset":18018},"end":{"line":594,"column":26,"offset":18040},"indent":[]}},{"type":"inlineCode","value":"Comment","position":{"start":{"line":594,"column":26,"offset":18040},"end":{"line":594,"column":35,"offset":18049},"indent":[]}},{"type":"text","value":" object field were resolved, so is ","position":{"start":{"line":594,"column":35,"offset":18049},"end":{"line":594,"column":70,"offset":18084},"indent":[]}},{"type":"inlineCode","value":"Comment","position":{"start":{"line":594,"column":70,"offset":18084},"end":{"line":594,"column":79,"offset":18093},"indent":[]}},{"type":"text","value":". Resolution runs once for every comment retrived from the database in the previous step. The ","position":{"start":{"line":594,"column":79,"offset":18093},"end":{"line":594,"column":173,"offset":18187},"indent":[]}},{"type":"inlineCode","value":"text","position":{"start":{"line":594,"column":173,"offset":18187},"end":{"line":594,"column":179,"offset":18193},"indent":[]}},{"type":"text","value":" field is scalar so resolution of that path can terminate there. But the ","position":{"start":{"line":594,"column":179,"offset":18193},"end":{"line":594,"column":252,"offset":18266},"indent":[]}},{"type":"inlineCode","value":"likers","position":{"start":{"line":594,"column":252,"offset":18266},"end":{"line":594,"column":260,"offset":18274},"indent":[]}},{"type":"text","value":" field is typed to an object and so once again goes through the object-field resolution pattern.","position":{"start":{"line":594,"column":260,"offset":18274},"end":{"line":594,"column":356,"offset":18370},"indent":[]}}],"position":{"start":{"line":594,"column":4,"offset":18018},"end":{"line":594,"column":356,"offset":18370},"indent":[]}}],"position":{"start":{"line":594,"column":1,"offset":18015},"end":{"line":595,"column":1,"offset":18371},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A request to the database for users who liked this comment is made.","position":{"start":{"line":596,"column":4,"offset":18375},"end":{"line":596,"column":71,"offset":18442},"indent":[]}}],"position":{"start":{"line":596,"column":4,"offset":18375},"end":{"line":596,"column":71,"offset":18442},"indent":[]}}],"position":{"start":{"line":596,"column":1,"offset":18372},"end":{"line":597,"column":1,"offset":18443},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A repeat of step 4. But this time from a different edge in the graph. Before it was the entrypoint field ","position":{"start":{"line":598,"column":4,"offset":18447},"end":{"line":598,"column":109,"offset":18552},"indent":[]}},{"type":"inlineCode","value":"Query.user","position":{"start":{"line":598,"column":109,"offset":18552},"end":{"line":598,"column":121,"offset":18564},"indent":[]}},{"type":"text","value":". Now we're resolving from relation with ","position":{"start":{"line":598,"column":121,"offset":18564},"end":{"line":598,"column":162,"offset":18605},"indent":[]}},{"type":"inlineCode","value":"Comment","position":{"start":{"line":598,"column":162,"offset":18605},"end":{"line":598,"column":171,"offset":18614},"indent":[]}},{"type":"text","value":". Note how the backing type requirements of ","position":{"start":{"line":598,"column":171,"offset":18614},"end":{"line":598,"column":215,"offset":18658},"indent":[]}},{"type":"inlineCode","value":"User","position":{"start":{"line":598,"column":215,"offset":18658},"end":{"line":598,"column":221,"offset":18664},"indent":[]}},{"type":"text","value":", regardless of which part of the graph is pointing at it, remain the same. One other difference from step 4 is that, like in step 6, we are dealing with a list of data. That is, this resolution is run every user returned in step 7.","position":{"start":{"line":598,"column":221,"offset":18664},"end":{"line":598,"column":453,"offset":18896},"indent":[]}}],"position":{"start":{"line":598,"column":4,"offset":18447},"end":{"line":598,"column":453,"offset":18896},"indent":[]}}],"position":{"start":{"line":598,"column":1,"offset":18444},"end":{"line":598,"column":453,"offset":18896},"indent":[]}}],"position":{"start":{"line":579,"column":1,"offset":16912},"end":{"line":598,"column":453,"offset":18896},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Hopefully you can see how the GraphQL types seen by the client are distinct from the backing types flowing through the resolvers. Below, you can find a code sample of how the implementation of this schema might look like.","position":{"start":{"line":600,"column":1,"offset":18898},"end":{"line":600,"column":222,"offset":19119},"indent":[]}}],"position":{"start":{"line":600,"column":1,"offset":18898},"end":{"line":600,"column":222,"offset":19119},"indent":[]}},{"type":"jsx","value":"<details>\n<summary>See code implementation</summary>","position":{"start":{"line":602,"column":1,"offset":19121},"end":{"line":603,"column":43,"offset":19173},"indent":[1]}},{"type":"code","lang":"ts","meta":null,"value":"schema.query({\n  definition(t) {\n    t.user({\n      args: {\n        id: schema.arg({ type: 'ID', required: true }),\n      },\n      resolve(_, { id }, { db }) {\n        return db.fetchUser({ where: { id } })\n      },\n    })\n  },\n})\n\nschema.object({\n  name: 'User',\n  rootTyping: 'Prisma.User',\n  definition(t) {\n    t.string('fullName', {\n      resolve(user) {\n        return [user.firstName, user.middleName, user.lastName].join(', ')\n      },\n    })\n    t.int('age', {\n      resolve(user) {\n        return yearsSinceUnixTimestamp(user.birthDate)\n      },\n    })\n    t.list.field('comments', {\n      type: 'Comment',\n      resolve(user, _args, { db }) {\n        return db.comment.fetchMany({ where: { author: user.id } })\n      },\n    })\n  },\n})\n\nschema.object({\n  name: 'Comment',\n  rootTyping: 'Prisma.Comment',\n  definition(t) {\n    t.string('title', {\n      resolve(comment) {\n        return comment.title\n      },\n    })\n    t.field('body', {\n      resolve(comment) {\n        return comment.body\n      },\n    })\n    t.field('post', {\n      type: 'Post',\n      resolve(comment, _args, { db }) {\n        return db.post.fetchOne({ where: { id: comment.postId } })\n      },\n    })\n    t.field('author', {\n      type: 'User',\n      resolve(comment, _args, { db }) {\n        return db.user.fetchOne({ where: { id: comment.authorId } })\n      },\n    })\n  },\n})\n\nschema.object({\n  name: 'Post',\n  rootTyping: 'Prisma.Post',\n  definition(t) {\n    t.string('title', {\n      resolve(post) {\n        return post.title\n      },\n    })\n    t.field('body', {\n      resolve(post) {\n        return post.body\n      },\n    })\n    t.list.field('comments', {\n      type: 'Comment',\n      resolve(post, _args, { db }) {\n        return db.comment.fetchMany({ where: { id: post.commentId } })\n      },\n    })\n  },\n})","position":{"start":{"line":605,"column":1,"offset":19175},"end":{"line":693,"column":4,"offset":20982},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"</details>","position":{"start":{"line":695,"column":1,"offset":20984},"end":{"line":695,"column":11,"offset":20994},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Backing Types in Nexus","position":{"start":{"line":697,"column":4,"offset":20999},"end":{"line":697,"column":26,"offset":21021},"indent":[]}}],"position":{"start":{"line":697,"column":1,"offset":20996},"end":{"line":697,"column":26,"offset":21021},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Inferred Types","position":{"start":{"line":699,"column":6,"offset":21028},"end":{"line":699,"column":20,"offset":21042},"indent":[]}}],"position":{"start":{"line":699,"column":1,"offset":21023},"end":{"line":699,"column":20,"offset":21042},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When you first begin creating your schema, you may have objects without backing types setup. In these cases Nexus infers that the backing type is an exact match of the GraphQL type. Take this schema for example:","position":{"start":{"line":701,"column":1,"offset":21044},"end":{"line":701,"column":212,"offset":21255},"indent":[]}}],"position":{"start":{"line":701,"column":1,"offset":21044},"end":{"line":701,"column":212,"offset":21255},"indent":[]}},{"type":"jsx","value":"<!-- prettier-ignore -->","position":{"start":{"line":703,"column":1,"offset":21257},"end":{"line":703,"column":25,"offset":21281},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"// Nexus infers the backing type of:\n//\n// { fullName: string, age: number } ---> |\n//                                        |\nschema.object({                        // |\n  name: 'User',                        // |\n  definition(t) {                      // |\n    t.string('fullName', {             // |\n      resolve(user) {                  // |\n//            ^-------------------------- | \n        return user.fullName           // |\n      },                               // |\n    })                                 // |\n    t.int('age', {                     // |\n      resolve(user) {                  // |\n//            ^-------------------------- |\n        return user.age                // |\n      },                               // |\n    })                                 // |\n  },                                   // |\n})                                     // |\n                                       // |\nschema.queryType({                     // |\n  definition(t) {                      // |\n    t.list.field('users', {            // |\n      type: 'User',                    // |\n      resolve() {                      // |\n        return [/**/]                  // |\n//               ^----------------------- |\n      },\n    })\n  },\n})","position":{"start":{"line":704,"column":1,"offset":21282},"end":{"line":738,"column":4,"offset":22544},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This may suffice well enough for some time, but most apps will eventually see their GraphQL and backing types diverge. Once this happens, you can tell Nexus about it using the ","position":{"start":{"line":740,"column":1,"offset":22546},"end":{"line":740,"column":177,"offset":22722},"indent":[]}},{"type":"inlineCode","value":"rootTyping","position":{"start":{"line":740,"column":177,"offset":22722},"end":{"line":740,"column":189,"offset":22734},"indent":[]}},{"type":"text","value":" object type config property.","position":{"start":{"line":740,"column":189,"offset":22734},"end":{"line":740,"column":218,"offset":22763},"indent":[]}}],"position":{"start":{"line":740,"column":1,"offset":22546},"end":{"line":740,"column":218,"offset":22763},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"rootTyping Property","position":{"start":{"line":742,"column":6,"offset":22770},"end":{"line":742,"column":25,"offset":22789},"indent":[]}}],"position":{"start":{"line":742,"column":1,"offset":22765},"end":{"line":742,"column":25,"offset":22789},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"export interface MyDBUser {\n  // |           ^-------------------- Create your backing type\n  // ^-------------------------------- Export your backing type (required)\n  firstName: string\n  lastName: string\n  birthDate: number\n}\n\nschema.object({\n  name: 'User',\n  rootTyping: 'MyDBUser',\n  //           ^---------------------- Tell Nexus what the backing type is.\n  //                                   Now, Nexus types...\n  definition(t) {\n    t.string('fullName', {\n      resolve(user) {\n        //    ^----------------------- as: MyDBUser\n        return [user.firstName, user.lastName].join(', ')\n      },\n    })\n    t.int('age', {\n      resolve(user) {\n        //    ^------------------------ as: MyDBUser\n        return yearsSinceUnixTimestamp(user.birthDate)\n      },\n    })\n  },\n})\n\nschema.queryType({\n  definition(t) {\n    t.list.field('users', {\n      type: 'User',\n      resolve(_root, args, ctx) {\n        //                     ^------- return as: MyDBUser[]\n        return ctx.db.user.getMany()\n      },\n    })\n  },\n})","position":{"start":{"line":744,"column":1,"offset":22791},"end":{"line":785,"column":4,"offset":23831},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Nexus does not care about where ","position":{"start":{"line":787,"column":1,"offset":23833},"end":{"line":787,"column":33,"offset":23865},"indent":[]}},{"type":"inlineCode","value":"MyDBUser","position":{"start":{"line":787,"column":33,"offset":23865},"end":{"line":787,"column":43,"offset":23875},"indent":[]}},{"type":"text","value":" is defined. So long as it is defined and exported from a module within your app, it will be available for use in any ","position":{"start":{"line":787,"column":43,"offset":23875},"end":{"line":787,"column":161,"offset":23993},"indent":[]}},{"type":"inlineCode","value":"rootTyping","position":{"start":{"line":787,"column":161,"offset":23993},"end":{"line":787,"column":173,"offset":24005},"indent":[]}},{"type":"text","value":" property.","position":{"start":{"line":787,"column":173,"offset":24005},"end":{"line":787,"column":183,"offset":24015},"indent":[]}}],"position":{"start":{"line":787,"column":1,"offset":23833},"end":{"line":787,"column":183,"offset":24015},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":789,"column":1,"offset":24017},"end":{"line":789,"column":5,"offset":24021},"indent":[]}},{"type":"inlineCode","value":"rootTyping","position":{"start":{"line":789,"column":5,"offset":24021},"end":{"line":789,"column":17,"offset":24033},"indent":[]}},{"type":"text","value":" property is statically typed as a union of all the valid possibile types your app makes available. Thus, your IDE will/should give you autocompletion here.","position":{"start":{"line":789,"column":17,"offset":24033},"end":{"line":789,"column":173,"offset":24189},"indent":[]}}],"position":{"start":{"line":789,"column":1,"offset":24017},"end":{"line":789,"column":173,"offset":24189},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Third-Party Types","position":{"start":{"line":791,"column":6,"offset":24196},"end":{"line":791,"column":23,"offset":24213},"indent":[]}}],"position":{"start":{"line":791,"column":1,"offset":24191},"end":{"line":791,"column":23,"offset":24213},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you would like to use types from a third party package, you can just re-export them in your own app. Here's the above example re-visited using some third party typings:","position":{"start":{"line":793,"column":1,"offset":24215},"end":{"line":793,"column":172,"offset":24386},"indent":[]}}],"position":{"start":{"line":793,"column":1,"offset":24215},"end":{"line":793,"column":172,"offset":24386},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"export type * as Spotify from 'spotify-api'\n//                             ^------ Export your third-party type(s)\n//                                     Can be anywhere within your app\n\nschema.object({\n  name: 'User',\n  rootTyping: 'Spotify.Foo',\n  //           ^---------------------- Tell Nexus what the backing type is.\n  //                                   Now, Nexus types...\n  definition(t) {\n    t.string('fullName', {\n      resolve(user) {\n        //    ^----------------------- as: Spotify.Foo\n        return user.fullName\n      },\n    })\n    t.int('age', {\n      resolve(user) {\n        //    ^------------------------ as: Spotify.Foo\n        return user.age\n      },\n    })\n  },\n})\n\nschema.queryType({\n  definition(t) {\n    t.list.field('users', {\n      type: 'User',\n      resolve(_root, args, ctx) {\n        //                     ^------- return as: Spotify.Foo[]\n        return ctx.db.user.getMany()\n      },\n    })\n  },\n})","position":{"start":{"line":795,"column":1,"offset":24388},"end":{"line":832,"column":4,"offset":25338},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<p class=\"NextIs Detail\"></p>","position":{"start":{"line":834,"column":1,"offset":25340},"end":{"line":834,"column":30,"offset":25369},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The backing type configuration is co-located with the GraphQL object because Nexus takes the view that a GraphQL object owns its backing type requirements and all nodes in the graph pointing to it must then satisfy those requirements in their own resolvers. We saw a bit of this in the Backing Types Conepts section before, where ","position":{"start":{"line":836,"column":3,"offset":25373},"end":{"line":836,"column":333,"offset":25703},"indent":[]}},{"type":"inlineCode","value":"User","position":{"start":{"line":836,"column":333,"offset":25703},"end":{"line":836,"column":339,"offset":25709},"indent":[]}},{"type":"text","value":" object was related to by multiple nodes in the graph, and those various nodes passed the same kinds of backing types during resolution.","position":{"start":{"line":836,"column":339,"offset":25709},"end":{"line":836,"column":475,"offset":25845},"indent":[]}}],"position":{"start":{"line":836,"column":3,"offset":25373},"end":{"line":836,"column":475,"offset":25845},"indent":[]}}],"position":{"start":{"line":836,"column":1,"offset":25371},"end":{"line":836,"column":475,"offset":25845},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Schema\"}","position":{"start":{"line":839,"column":1,"offset":25848},"end":{"line":839,"column":47,"offset":25894},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":839,"column":47,"offset":25894}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Schema\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"schema\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#schema\",\n    \"aria-label\": \"schema permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Schema\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/api/modules/main/exports/schema\"\n  }), \"API Reference\"), \" \\u2301 \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nxs.li/issues/component/schema\"\n  }), \"issues\"), \" / \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nxs.li/issues/components/schema/features\"\n  }), \"features\"), \" | \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nxs.li/issues/component/schema/bugs\"\n  }), \"bugs\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This is the Nexus schema component guide. Here you will find concepts explained and a survey of how to use the API. If you are not familiar with Nexus this is a good document to read. If you are familiar, then the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/api/modules/main/exports/schema\"\n  }), \"Schema API Docs\"), \" may be of more use to you.\")), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"introduction\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Introduction\"), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h3\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"importing\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#importing\",\n    \"aria-label\": \"importing permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Importing\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You will use the schema component of Nexus to build your GraphQL schema. You can import it as a named export from the main module of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nexus\"), \" package. If you prefer you can also import the default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app\"), \" export and then access the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"schema\"), \" property.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import app from 'nexus'        // default style\\nimport { schema } from 'nexus' // named-export style\\n\\napp.schema === schema // true\\n\")), mdx(\"p\", {\n    className: \"NextIs Tip\"\n  }), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Leverage \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://code.visualstudio.com/docs/languages/typescript#_auto-imports\"\n  }), \"VSCode auto-import\"), \". Anywhere in a TypeScript module in your project type either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app\"), \" to summon auto-import for the default style or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"schema\"), \" for named-export style.\"))), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h3\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"singleton--mutation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#singleton--mutation\",\n    \"aria-label\": \"singleton  mutation permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Singleton & Mutation\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The schema component is part of the app singleton and usage of its methods affects the overall app state. While this is not a functionally pure approach it does allow you to use its methods throughout your project without having to think about exporting/importing values. One of Nexus' design goals is to approach the ease and readability of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.prisma.io/blog/graphql-sdl-schema-definition-language-6755bcb9ce51\"\n  }), \"GraphQL SDL\"), \" where we can. This is one example of doing that.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"As an example, the following snippet shows the addition of an object type to the GraphQL schema. Notice how the return value is not used in any way. The method is actually mutating the app state.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { schema } from 'nexus'\\n\\nschema.objectType({\\n  name: 'Foo',\\n  definition(t) {\\n    t.string('bar', () => 'qux')\\n  },\\n})\\n\")))), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"graphql-type-builders\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#graphql-type-builders\",\n    \"aria-label\": \"graphql type builders permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"GraphQL Type Builders\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We will now begin exploring the GraphQL schema building parts of the schema component. Having prior knowledge of GraphQL language itself will greatly help. If you are new to GraphQL you may want to read some of the resources listed below.\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://graphql.org\"\n  }), \"graphql.org\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.howtographql.com\"\n  }), \"howtographql.com\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://book.productionreadygraphql.com/\"\n  }), \"Production Ready GraphQL\"))), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h3\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"object-type\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#object-type\",\n    \"aria-label\": \"object type permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Object Type\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://graphql.org/learn/schema/#object-types-and-fields\"\n  }), \"graphql.org Object Types\")), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h4\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"basic-anatomy\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#basic-anatomy\",\n    \"aria-label\": \"basic anatomy permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Basic Anatomy\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"                                      schema.objectType({\\n// The singleton instance of ---------^      |\\n// the Nexus schema component                |\\n//                                           |\\n// A type Builder method --------------------^\\n                                        name: 'Foo',\\n// The name of this type ----------------------^\\n                                        definition(t) {\\n// The type definition block -----------^          |\\n// Where fields are defined                        |\\n//                                                 |\\n// Object of Object Type Field --------------------^\\n// Builder methods\\n                                          t.field('bar', {\\n// A field builder method ------------------^      |\\n// The name of this field -------------------------^\\n                                            type: 'Bar',\\n// The type of this field -------------------------^\\n                                            resolve(parent, args, ctx, info) {\\n// The method called to return a -----------^       |       |     |    |\\n// value for this field when queried                |       |     |    |\\n//                                                  |       |     |    |\\n// The backing data model for Foo ------------------^       |     |    |\\n//                                                          |     |    |\\n// The client arguments to this field ----------------------^     |    |\\n//                                                                |    |\\n// Contextual data for this request ------------------------------^    |\\n// Shared across all resolvers                                         |\\n//                                                                     |\\n// Technical detail about this request --------------------------------^\\n// E.g. client's query AST\\n\\n// Your logic to return a value ------------> ...\\n// for this field\\n                                            },\\n                                          })\\n\\n                                          t.string('qux')\\n// A scalar-type convenience builder -------^       |\\n//                                                  |\\n// No resolver means Nexus returns the -------------^\\n// `qux` property from the backing data model\\n\\n                                        },\\n                                      })\\n\"))), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h4\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"scalar-fields\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#scalar-fields\",\n    \"aria-label\": \"scalar fields permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Scalar Fields\"), mdx(\"cols\", null, mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"schema.objectType({\\n  name: 'Alpha',\\n  definition(t) {\\n    t.id('a')\\n    t.string('b')\\n    t.int('c')\\n    t.float('d')\\n    t.boolean('e')\\n  },\\n})\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type Alpha {\\n  a: ID!\\n  b: String!\\n  c: Int!\\n  d: Float!\\n  e: Boolean!\\n}\\n\")))), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h4\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"relational-fields\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#relational-fields\",\n    \"aria-label\": \"relational fields permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Relational Fields\"), mdx(\"cols\", null, mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"schema.objectType({\\n  name: 'Alpha',\\n  definition(t) {\\n    t.field('beta', {\\n      type: 'Beta',\\n      resolve() {\\n        return { foo: 'bar' }\\n      },\\n    })\\n  },\\n})\\nschema.objectType({\\n  name: 'Beta',\\n  definition(t) {\\n    t.string('foo')\\n  },\\n})\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type Alpha {\\n  beta: Beta!\\n}\\n\\ntype Beta {\\n  foo: String!\\n}\\n\"))), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h6\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"lists--nullability\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h6\"\n  }, {\n    \"href\": \"#lists--nullability\",\n    \"aria-label\": \"lists  nullability permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Lists & Nullability\"), mdx(\"cols\", null, mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"schema.objectType({\\n  name: 'Alpha',\\n  definition(t) {\\n    t.id('a', { nullable: true })\\n    t.list.id('b')\\n    t.list.id('c', { nullable: true })\\n    t.list.id('c', { list: [false] })\\n    t.list.id('c', { list: [false], nullable: true })\\n  },\\n})\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type Alpha {\\n  a: ID\\n  b: [ID!]!\\n  c: [ID!]\\n  c: [ID]!\\n  c: [ID]\\n}\\n\")))))), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h3\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"entrypoint-types\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#entrypoint-types\",\n    \"aria-label\": \"entrypoint types permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Entrypoint Types\")), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h3\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"enum-type\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#enum-type\",\n    \"aria-label\": \"enum type permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Enum Type\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Enum types are a scalar with a finite set of allowed values. They can be used as argument types and as field types.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://graphql.org/learn/schema/#enumeration-types\"\n  }), \"graphql.org Enumeration Types docs\")), mdx(\"cols\", null, mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"schema.enum({\\n  name: 'Alpha',\\n  members: ['Zeta', 'Yolo'],\\n})\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"enum Alpha {\\n  Zeta\\n  Yolo\\n}\\n\"))), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h6\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"example-as-argument-type--field-type\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h6\"\n  }, {\n    \"href\": \"#example-as-argument-type--field-type\",\n    \"aria-label\": \"example as argument type  field type permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Example: As argument type & field type\"), mdx(\"cols\", null, mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"schema.queryType({\\n  definition(t) {\\n    t.field('anyAlpha', {\\n      type: 'Alpha',\\n      resolve(t) {\\n        return Math.random() > 0.1 : 'Zeta' : 'Yolo'\\n      }\\n    })\\n    t.list.field('alphas', {\\n      type: 'Alpha',\\n      args: {\\n        except: schema.arg({\\n          list: true,\\n          type: \\\"Alpha\\\",\\n          required: true,\\n        })\\n      },\\n      resolve(_root, args) {\\n        return ['Zeta', 'Yolo'].filter(alpha => {\\n          return !args.except.includes(alpha)\\n        })\\n      }\\n    })\\n  }\\n})\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type Query {\\n  anyAlpha: Alpha!\\n  alphas(except: [Alpha!]!): [Alpha!]!\\n}\\n\"))), mdx(\"cols\", null, mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query {\\n  anyAlpha\\n  alphas(except: [\\\"Zeta\\\"])\\n}\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"anyAlpha\\\": \\\"Zeta\\\",\\n    \\\"alphas\\\": [\\\"Yolo\\\"]\\n  }\\n}\\n\"))))), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h3\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"union-type\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#union-type\",\n    \"aria-label\": \"union type permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Union Type\")), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h3\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"interface-type\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#interface-type\",\n    \"aria-label\": \"interface type permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Interface Type\")), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h3\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"field-arguments\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#field-arguments\",\n    \"aria-label\": \"field arguments permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Field Arguments\")), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h3\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"input-object-type\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#input-object-type\",\n    \"aria-label\": \"input object type permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Input Object Type\")), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h3\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"lists\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#lists\",\n    \"aria-label\": \"lists permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Lists\")), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h3\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"descriptions\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#descriptions\",\n    \"aria-label\": \"descriptions permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Descriptions\")), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h3\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"deprecations\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#deprecations\",\n    \"aria-label\": \"deprecations permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Deprecations\"))), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"data-modelling\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#data-modelling\",\n    \"aria-label\": \"data modelling permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Data Modelling\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"As the API author, there are three design tasks you will invariable perform over and over again:\"), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create data types that model logical entities and concepts in your business domain.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Define connections between these data types that model how logical entities and concepts relate in your business domain.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Define entrypoints which allow traversal into this graph of data.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This is an iterative process that can generally be seen as an finite loop wherein your team gradually refines and expands (or contracts!) the data graph as you respond to changing client app needs, business needs, and so on. Data modelling is hard work. For one thing it is a suble art, occasionally underappreciated. There are typically multiple ways to model any one thing and competing tradeoffs that leave no obvious winner abound. If the process of data modelling itself or data modelling in GraphQL is new to you, you may find this book by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/__xuorig__\"\n  }), \"Marc-Andre Giroux\"), \" helpful: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://book.productionreadygraphql.com/\"\n  }), \"Production Ready GraphQL\"), \".\")), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"nullability-in-principal\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#nullability-in-principal\",\n    \"aria-label\": \"nullability in principal permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Nullability in Principal\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"When creating an API, especially before going to production or lifting features out of beta, thinking about if arguments and input object fields (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"inputs\"), \") should be required and if object type fields (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"outputs\"), \") should be nullable is an important design consideration. How easy your API is to consume trades for how easy it is to change and some reliability characteristics.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If inputs are optional or outputs are guaranteed then client developers will have a simpler API to deal with since making requests demands no up front configuration and handling responses presents no null cases. On the other hand, for the API developer, changing the API becomes harder since turning inputs from optional to required or making outputs go from guaranteed to nullable are breaking changes from the client's point of view.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Also, as more outputs are guaranteed, the greater the potential of the \\\"null blast radius\\\" can be. This is the effect where, within a schema rutime, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" or error received from some data source where the schema states there shall be no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" requires propagating the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" up the data tree until a nullable type is found (or, at root, finally error).\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If you'd like to see these design considerations discussed further here are a few articles/resources you may find helpful:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"2019 \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://medium.com/expedia-group-tech/nullability-in-graphql-b8d06fbd8a3c\"\n  }), \"Nullability in GraphQL\"), \" by Grant Norwood\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"2018 \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://blog.apollographql.com/using-nullability-in-graphql-2254f84c4ed7\"\n  }), \"Using nullability in GraphQL\"), \" by Sashko Stubailo\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"2017 \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://medium.com/@calebmer/when-to-use-graphql-non-null-fields-4059337f6fc8\"\n  }), \"When To Use GraphQL Non-Null Fields\"), \" by Caleb Meredith\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://graphql.org/learn/best-practices/#nullability\"\n  }), \"Nullability Best Practices\"), \" on grpahql.org\"))), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"nullability-in-nexus\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#nullability-in-nexus\",\n    \"aria-label\": \"nullability in nexus permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Nullability in Nexus\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Nexus defaults to both inputs and outputs being nullable. This means by default your API is conservative in what it sends but flexible in what it accepts. With this approach, by default:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You're free to defer some hard thinking about output nullability, knowing you can always change your mind later without breaking clients.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Client developers work more to processing API respones, having to handle null conditions.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You're forced to frontload some hard thinking about inputs, since realizing something should have been required later will require breaking clients.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Client developers work less to satisfy minimum query requirements.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \\\"null blast radius\\\" (refer to \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#nullability-in-principal\"\n  }), \"Nullability in Principal\"), \") is reduced to zero.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"There is no right or wrong answer to nullability. These are just defaults, not judgements. Understand the tradeoffs, and react to your use-case, above all.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can override the global defaults at the per-type level or per-field level. If you find yourself writing local overrides in a majority of cases then it might mean the global defaults are a bad fit for your API. In that case you can change the global defaults.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"When you make an input nullable then Nexus will alter its TypeScript type inside your resolver to have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null | undefined\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" is for the case that the client passed in an explicit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" while \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undefined\"), \" is for the case where the client simply did not specify the input at all.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If an arg has been given a default value, then it will be used when the client passes nothing, but since clients can still pass explicit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \", resolvers must still handle nullability. If this surprises you then you may be interested in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/graphql-nexus/nexus/issues/485\"\n  }), \"#485\"), \".\"), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h6\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"example-default-nullability-settings\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h6\"\n  }, {\n    \"href\": \"#example-default-nullability-settings\",\n    \"aria-label\": \"example default nullability settings permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Example: Default Nullability Settings\"), mdx(\"cols\", null, mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"schema.queryType({\\n  definition(t) {\\n    t.string('echo', {\\n      args: {\\n        message: 'String',\\n      },\\n      resolve(_root, args) {\\n        return args.message ?? 'nil'\\n      },\\n    })\\n  },\\n})\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type Query {\\n  echo(message: String): String\\n}\\n\")))), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h6\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"example-nullability-flipped-at-global-level\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h6\"\n  }, {\n    \"href\": \"#example-nullability-flipped-at-global-level\",\n    \"aria-label\": \"example nullability flipped at global level permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Example: Nullability Flipped at Global Level\"), mdx(\"cols\", null, mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"settings.change({\\n  schema: {\\n    nullable: {\\n      outputs: false,\\n      inputs: false,\\n    },\\n  },\\n})\\n\\nschema.queryType({\\n  definition(t) {\\n    t.string('echo', {\\n      args: {\\n        message: 'String',\\n      },\\n      resolve(_root, args) {\\n        return args.message\\n      },\\n    })\\n  },\\n})\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type Query {\\n  echo(message: String): String!\\n}\\n\")))), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h6\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"example-nullability-flipped-at-type-level\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h6\"\n  }, {\n    \"href\": \"#example-nullability-flipped-at-type-level\",\n    \"aria-label\": \"example nullability flipped at type level permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Example: Nullability Flipped at Type Level\"), mdx(\"cols\", null, mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"schema.queryType({\\n  nonNullDefaults: {\\n    input: true,\\n    output: true,\\n  },\\n  definition(t) {\\n    t.string('echo', {\\n      args: {\\n        message: 'String',\\n      },\\n      resolve(_root, args) {\\n        return args.message\\n      },\\n    })\\n  },\\n})\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type Query {\\n  echo(message: String): String!\\n}\\n\")))), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h6\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"example-nullability-flipped-at-input--field-level\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h6\"\n  }, {\n    \"href\": \"#example-nullability-flipped-at-input--field-level\",\n    \"aria-label\": \"example nullability flipped at input  field level permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Example: Nullability Flipped at Input & Field Level\"), mdx(\"cols\", null, mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"schema.queryType({\\n  definition(t) {\\n    t.string('echo', {\\n      args: {\\n        message: schema.arg({\\n          type: 'String',\\n          nullable: false,\\n        }),\\n      },\\n      nullable: false,\\n      resolve(_root, args) {\\n        return args.message\\n      },\\n    })\\n  },\\n})\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type Query {\\n  echo(message: String): String!\\n}\\n\")))), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h6\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"example-mixing-levels\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h6\"\n  }, {\n    \"href\": \"#example-mixing-levels\",\n    \"aria-label\": \"example mixing levels permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Example: Mixing Levels\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"It is possible to use type and input/field layers together. This provides flexibility to optimize for local sections of your API that have different characteristics. For example here, a type deviates from the global default for all but but one field and its input.\"), mdx(\"cols\", null, mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"schema.queryType({\\n  // flip the global defaults\\n  nonNullDefaults: {\\n    input: true,\\n    output: true,\\n  },\\n  definition(t) {\\n    // ... Everything in this type uses the type-level\\n    // nullability config ... Except the following,\\n    // which effectively reverts back to what the global\\n    // defaults are:\\n    t.string('echo', {\\n      nullable: false,\\n      args: {\\n        message: schema.arg({\\n          type: 'String',\\n          nullable: false,\\n        }),\\n      },\\n      resolve(_root, args) {\\n        return args.message\\n      },\\n    })\\n  },\\n})\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type Query {\\n  foo(bar: String): String!\\n}\\n\")))), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h4\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"example-args-that-have-default-values\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#example-args-that-have-default-values\",\n    \"aria-label\": \"example args that have default values permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Example: Args That Have Default Values\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"When an arg has a default you might think that then it should be nullable to the client but non-nullable within your resolver logic. However it turns out that if the client passes an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"explicit\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" then that is considered an actual value, and hence is not subject to being assigned the default value. Thus, and then, the resolver still can observe null from the client. If you are curious about seeing this change and/or become configurable then please refer to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/graphql-nexus/nexus/issues/485\"\n  }), \"#485\"), \".\"), mdx(\"cols\", null, mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"schema.queryType({\\n  definition(t) {\\n    t.string('echo', {\\n      args: {\\n        message: schema.arg({\\n          type: 'String',\\n          default: 'nil via default',\\n        }),\\n      },\\n      nullable: false,\\n      resolve(_root, args) {\\n        const fallback = 'nil via client null'\\n        return args.message ?? fallback\\n      },\\n    })\\n  },\\n})\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type Query {\\n  echo(message: String = \\\"nothing via default\\\"): String!\\n}}\\n\"))), mdx(\"cols\", null, mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query {\\n  echo1: echo\\n  echo2: echo(message: null)\\n}\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"echo1\\\": \\\"nil via default\\\",\\n    \\\"echo2\\\": \\\"nil via client null\\\"\\n  }\\n}\\n\"))))), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"backing-types-in-principal\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#backing-types-in-principal\",\n    \"aria-label\": \"backing types in principal permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Backing Types in Principal\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"As you begin to implement a schema for the first time you will notice something that may not have been obvious at first. The data that the client sees in the data graph is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"not\"), \" the same data flowing through the internal resolvers used to fulfill that graph. The client sees the API types but the API author deals with something else, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"backing types\"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Here is an example of resolution for a query as it would be seen roughly from a GraphQL type \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"only\"), \" point of view.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"../assets/diagram-backing-types-1.png\",\n    \"alt\": null\n  }))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"When a field's type is an object, then the field's resolver returns a backing type. Concretely this might for example be a plain JavaScript object containing node/row/document data from a database call. This backing type data is in turn passed down to all the object type's own field resolvers.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Here is the above diagram updated to include backing types now.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"../assets/diagram-backing-types-2.png\",\n    \"alt\": null\n  }))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Here is a step-by-step breakdown of what is going on (follow the diagram annotation numbers):\"), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Client sends a query\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The field resolver for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Query.user\"), \" runs. Remember \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Query\"), \" fields (along with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Subscription\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Mutation\"), \") are \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"entrypoints\"), \".\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Within this resolver, the database client fetches a user from the database. The resolver returns this data. This data will now become \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"backing type\"), \" data...\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Resolution continues since the type of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Query.user\"), \" field is an object, not a scalar. As such its own fields need resolving. The fields that get resolved are limited to those selected by the client, in this case: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fullName\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"age\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"comments\"), \". Those three field resolvers run. Their \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"parent\"), \" argument is the user model data fetched in step 3. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"This is the backing type data for the GraphQL \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"User\"), \" object\"), \".\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"t.field('...', {\\n  resolve(parent, args, ctx, info) {\\n    //    ^------------------------------- Here\\n  },\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"comments\"), \" field is is an object type so just like with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Query.users\"), \" before, its own fields must be resolved. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"comments\"), \" resolver fetches comments data from the database. Like in step 3 this data becomes \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"backing type\"), \" data.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Much like the GraphQL \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Comment\"), \" object field were resolved, so is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Comment\"), \". Resolution runs once for every comment retrived from the database in the previous step. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"text\"), \" field is scalar so resolution of that path can terminate there. But the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"likers\"), \" field is typed to an object and so once again goes through the object-field resolution pattern.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A request to the database for users who liked this comment is made.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"A repeat of step 4. But this time from a different edge in the graph. Before it was the entrypoint field \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Query.user\"), \". Now we're resolving from relation with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Comment\"), \". Note how the backing type requirements of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"User\"), \", regardless of which part of the graph is pointing at it, remain the same. One other difference from step 4 is that, like in step 6, we are dealing with a list of data. That is, this resolution is run every user returned in step 7.\"))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Hopefully you can see how the GraphQL types seen by the client are distinct from the backing types flowing through the resolvers. Below, you can find a code sample of how the implementation of this schema might look like.\"), mdx(\"details\", null, mdx(\"summary\", null, \"See code implementation\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"schema.query({\\n  definition(t) {\\n    t.user({\\n      args: {\\n        id: schema.arg({ type: 'ID', required: true }),\\n      },\\n      resolve(_, { id }, { db }) {\\n        return db.fetchUser({ where: { id } })\\n      },\\n    })\\n  },\\n})\\n\\nschema.object({\\n  name: 'User',\\n  rootTyping: 'Prisma.User',\\n  definition(t) {\\n    t.string('fullName', {\\n      resolve(user) {\\n        return [user.firstName, user.middleName, user.lastName].join(', ')\\n      },\\n    })\\n    t.int('age', {\\n      resolve(user) {\\n        return yearsSinceUnixTimestamp(user.birthDate)\\n      },\\n    })\\n    t.list.field('comments', {\\n      type: 'Comment',\\n      resolve(user, _args, { db }) {\\n        return db.comment.fetchMany({ where: { author: user.id } })\\n      },\\n    })\\n  },\\n})\\n\\nschema.object({\\n  name: 'Comment',\\n  rootTyping: 'Prisma.Comment',\\n  definition(t) {\\n    t.string('title', {\\n      resolve(comment) {\\n        return comment.title\\n      },\\n    })\\n    t.field('body', {\\n      resolve(comment) {\\n        return comment.body\\n      },\\n    })\\n    t.field('post', {\\n      type: 'Post',\\n      resolve(comment, _args, { db }) {\\n        return db.post.fetchOne({ where: { id: comment.postId } })\\n      },\\n    })\\n    t.field('author', {\\n      type: 'User',\\n      resolve(comment, _args, { db }) {\\n        return db.user.fetchOne({ where: { id: comment.authorId } })\\n      },\\n    })\\n  },\\n})\\n\\nschema.object({\\n  name: 'Post',\\n  rootTyping: 'Prisma.Post',\\n  definition(t) {\\n    t.string('title', {\\n      resolve(post) {\\n        return post.title\\n      },\\n    })\\n    t.field('body', {\\n      resolve(post) {\\n        return post.body\\n      },\\n    })\\n    t.list.field('comments', {\\n      type: 'Comment',\\n      resolve(post, _args, { db }) {\\n        return db.comment.fetchMany({ where: { id: post.commentId } })\\n      },\\n    })\\n  },\\n})\\n\")))), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"backing-types-in-nexus\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#backing-types-in-nexus\",\n    \"aria-label\": \"backing types in nexus permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Backing Types in Nexus\"), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h4\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"inferred-types\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#inferred-types\",\n    \"aria-label\": \"inferred types permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Inferred Types\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"When you first begin creating your schema, you may have objects without backing types setup. In these cases Nexus infers that the backing type is an exact match of the GraphQL type. Take this schema for example:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// Nexus infers the backing type of:\\n//\\n// { fullName: string, age: number } ---> |\\n//                                        |\\nschema.object({                        // |\\n  name: 'User',                        // |\\n  definition(t) {                      // |\\n    t.string('fullName', {             // |\\n      resolve(user) {                  // |\\n//            ^-------------------------- | \\n        return user.fullName           // |\\n      },                               // |\\n    })                                 // |\\n    t.int('age', {                     // |\\n      resolve(user) {                  // |\\n//            ^-------------------------- |\\n        return user.age                // |\\n      },                               // |\\n    })                                 // |\\n  },                                   // |\\n})                                     // |\\n                                       // |\\nschema.queryType({                     // |\\n  definition(t) {                      // |\\n    t.list.field('users', {            // |\\n      type: 'User',                    // |\\n      resolve() {                      // |\\n        return [/**/]                  // |\\n//               ^----------------------- |\\n      },\\n    })\\n  },\\n})\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This may suffice well enough for some time, but most apps will eventually see their GraphQL and backing types diverge. Once this happens, you can tell Nexus about it using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rootTyping\"), \" object type config property.\")), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h4\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"roottyping-property\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#roottyping-property\",\n    \"aria-label\": \"roottyping property permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"rootTyping Property\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"export interface MyDBUser {\\n  // |           ^-------------------- Create your backing type\\n  // ^-------------------------------- Export your backing type (required)\\n  firstName: string\\n  lastName: string\\n  birthDate: number\\n}\\n\\nschema.object({\\n  name: 'User',\\n  rootTyping: 'MyDBUser',\\n  //           ^---------------------- Tell Nexus what the backing type is.\\n  //                                   Now, Nexus types...\\n  definition(t) {\\n    t.string('fullName', {\\n      resolve(user) {\\n        //    ^----------------------- as: MyDBUser\\n        return [user.firstName, user.lastName].join(', ')\\n      },\\n    })\\n    t.int('age', {\\n      resolve(user) {\\n        //    ^------------------------ as: MyDBUser\\n        return yearsSinceUnixTimestamp(user.birthDate)\\n      },\\n    })\\n  },\\n})\\n\\nschema.queryType({\\n  definition(t) {\\n    t.list.field('users', {\\n      type: 'User',\\n      resolve(_root, args, ctx) {\\n        //                     ^------- return as: MyDBUser[]\\n        return ctx.db.user.getMany()\\n      },\\n    })\\n  },\\n})\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Nexus does not care about where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyDBUser\"), \" is defined. So long as it is defined and exported from a module within your app, it will be available for use in any \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rootTyping\"), \" property.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rootTyping\"), \" property is statically typed as a union of all the valid possibile types your app makes available. Thus, your IDE will/should give you autocompletion here.\")), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h4\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"third-party-types\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#third-party-types\",\n    \"aria-label\": \"third party types permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Third-Party Types\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If you would like to use types from a third party package, you can just re-export them in your own app. Here's the above example re-visited using some third party typings:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"export type * as Spotify from 'spotify-api'\\n//                             ^------ Export your third-party type(s)\\n//                                     Can be anywhere within your app\\n\\nschema.object({\\n  name: 'User',\\n  rootTyping: 'Spotify.Foo',\\n  //           ^---------------------- Tell Nexus what the backing type is.\\n  //                                   Now, Nexus types...\\n  definition(t) {\\n    t.string('fullName', {\\n      resolve(user) {\\n        //    ^----------------------- as: Spotify.Foo\\n        return user.fullName\\n      },\\n    })\\n    t.int('age', {\\n      resolve(user) {\\n        //    ^------------------------ as: Spotify.Foo\\n        return user.age\\n      },\\n    })\\n  },\\n})\\n\\nschema.queryType({\\n  definition(t) {\\n    t.list.field('users', {\\n      type: 'User',\\n      resolve(_root, args, ctx) {\\n        //                     ^------- return as: Spotify.Foo[]\\n        return ctx.db.user.getMany()\\n      },\\n    })\\n  },\\n})\\n\")), mdx(\"p\", {\n    className: \"NextIs Detail\"\n  }), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The backing type configuration is co-located with the GraphQL object because Nexus takes the view that a GraphQL object owns its backing type requirements and all nodes in the graph pointing to it must then satisfy those requirements in their own resolvers. We saw a bit of this in the Backing Types Conepts section before, where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"User\"), \" object was related to by multiple nodes in the graph, and those various nodes passed the same kinds of backing types during resolution.\")))));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Schema\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"schema\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#schema\",\n          \"aria-label\": \"schema permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Schema`}</h2><p parentName=\"section\"><a parentName=\"p\" {...{\n          \"href\": \"/api/modules/main/exports/schema\"\n        }}>{`API Reference`}</a>{` ‚åÅ `}<a parentName=\"p\" {...{\n          \"href\": \"https://nxs.li/issues/component/schema\"\n        }}>{`issues`}</a>{` / `}<a parentName=\"p\" {...{\n          \"href\": \"https://nxs.li/issues/components/schema/features\"\n        }}>{`features`}</a>{` | `}<a parentName=\"p\" {...{\n          \"href\": \"https://nxs.li/issues/component/schema/bugs\"\n        }}>{`bugs`}</a></p><p parentName=\"section\">{`This is the Nexus schema component guide. Here you will find concepts explained and a survey of how to use the API. If you are not familiar with Nexus this is a good document to read. If you are familiar, then the `}<a parentName=\"p\" {...{\n          \"href\": \"/api/modules/main/exports/schema\"\n        }}>{`Schema API Docs`}</a>{` may be of more use to you.`}</p></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"introduction\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#introduction\",\n          \"aria-label\": \"introduction permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Introduction`}</h2><section parentName=\"section\"><h3 parentName=\"section\" {...{\n          \"id\": \"importing\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h3\" {...{\n            \"href\": \"#importing\",\n            \"aria-label\": \"importing permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Importing`}</h3><p parentName=\"section\">{`You will use the schema component of Nexus to build your GraphQL schema. You can import it as a named export from the main module of the `}<inlineCode parentName=\"p\">{`nexus`}</inlineCode>{` package. If you prefer you can also import the default `}<inlineCode parentName=\"p\">{`app`}</inlineCode>{` export and then access the `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{` property.`}</p>{\n          /* prettier-ignore */\n        }<pre parentName=\"section\"><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}>{`import app from 'nexus'        // default style\nimport { schema } from 'nexus' // named-export style\n\napp.schema === schema // true\n`}</code></pre><p class=\"NextIs Tip\"></p><blockquote parentName=\"section\">\n          <p parentName=\"blockquote\">{`Leverage `}<a parentName=\"p\" {...{\n              \"href\": \"https://code.visualstudio.com/docs/languages/typescript#_auto-imports\"\n            }}>{`VSCode auto-import`}</a>{`. Anywhere in a TypeScript module in your project type either `}<inlineCode parentName=\"p\">{`app`}</inlineCode>{` to summon auto-import for the default style or `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{` for named-export style.`}</p>\n        </blockquote></section><section parentName=\"section\"><h3 parentName=\"section\" {...{\n          \"id\": \"singleton--mutation\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h3\" {...{\n            \"href\": \"#singleton--mutation\",\n            \"aria-label\": \"singleton  mutation permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Singleton & Mutation`}</h3><p parentName=\"section\">{`The schema component is part of the app singleton and usage of its methods affects the overall app state. While this is not a functionally pure approach it does allow you to use its methods throughout your project without having to think about exporting/importing values. One of Nexus' design goals is to approach the ease and readability of `}<a parentName=\"p\" {...{\n            \"href\": \"https://www.prisma.io/blog/graphql-sdl-schema-definition-language-6755bcb9ce51\"\n          }}>{`GraphQL SDL`}</a>{` where we can. This is one example of doing that.`}</p><p parentName=\"section\">{`As an example, the following snippet shows the addition of an object type to the GraphQL schema. Notice how the return value is not used in any way. The method is actually mutating the app state.`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}>{`import { schema } from 'nexus'\n\nschema.objectType({\n  name: 'Foo',\n  definition(t) {\n    t.string('bar', () => 'qux')\n  },\n})\n`}</code></pre></section></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"graphql-type-builders\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#graphql-type-builders\",\n          \"aria-label\": \"graphql type builders permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`GraphQL Type Builders`}</h2><p parentName=\"section\">{`We will now begin exploring the GraphQL schema building parts of the schema component. Having prior knowledge of GraphQL language itself will greatly help. If you are new to GraphQL you may want to read some of the resources listed below.`}</p><ul parentName=\"section\">\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"https://graphql.org\"\n          }}>{`graphql.org`}</a></li>\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"https://www.howtographql.com\"\n          }}>{`howtographql.com`}</a></li>\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"https://book.productionreadygraphql.com/\"\n          }}>{`Production Ready GraphQL`}</a></li>\n      </ul><section parentName=\"section\"><h3 parentName=\"section\" {...{\n          \"id\": \"object-type\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h3\" {...{\n            \"href\": \"#object-type\",\n            \"aria-label\": \"object type permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Object Type`}</h3><p parentName=\"section\"><a parentName=\"p\" {...{\n            \"href\": \"https://graphql.org/learn/schema/#object-types-and-fields\"\n          }}>{`graphql.org Object Types`}</a></p><section parentName=\"section\"><h4 parentName=\"section\" {...{\n            \"id\": \"basic-anatomy\",\n            \"style\": {\n              \"position\": \"relative\"\n            }\n          }}><a parentName=\"h4\" {...{\n              \"href\": \"#basic-anatomy\",\n              \"aria-label\": \"basic anatomy permalink\",\n              \"className\": \"title-link before\"\n            }}><svg parentName=\"a\" {...{\n                \"width\": \"17\",\n                \"height\": \"18\",\n                \"viewBox\": \"0 0 17 18\",\n                \"fill\": \"none\",\n                \"xmlns\": \"http://www.w3.org/2000/svg\"\n              }}>{`\n      `}<path parentName=\"svg\" {...{\n                  \"d\": \"M1.5 6.33337H15.5\",\n                  \"stroke\": \"#CBD5E0\",\n                  \"strokeWidth\": \"2\",\n                  \"strokeLineCap\": \"round\",\n                  \"strokeLineJoin\": \"round\"\n                }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                  \"d\": \"M1.5 11.6666H15.5\",\n                  \"stroke\": \"#CBD5E0\",\n                  \"strokeWidth\": \"2\",\n                  \"strokeLineCap\": \"round\",\n                  \"strokeLineJoin\": \"round\"\n                }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                  \"d\": \"M6.75 1L5 17\",\n                  \"stroke\": \"#CBD5E0\",\n                  \"strokeWidth\": \"2\",\n                  \"strokeLineCap\": \"round\",\n                  \"strokeLineJoin\": \"round\"\n                }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                  \"d\": \"M12 1L10.25 17\",\n                  \"stroke\": \"#CBD5E0\",\n                  \"strokeWidth\": \"2\",\n                  \"strokeLineCap\": \"round\",\n                  \"strokeLineJoin\": \"round\"\n                }}></path>{`\n      `}</svg></a>{`Basic Anatomy`}</h4>{\n            /* prettier-ignore */\n          }<pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-ts\"\n            }}>{`                                      schema.objectType({\n// The singleton instance of ---------^      |\n// the Nexus schema component                |\n//                                           |\n// A type Builder method --------------------^\n                                        name: 'Foo',\n// The name of this type ----------------------^\n                                        definition(t) {\n// The type definition block -----------^          |\n// Where fields are defined                        |\n//                                                 |\n// Object of Object Type Field --------------------^\n// Builder methods\n                                          t.field('bar', {\n// A field builder method ------------------^      |\n// The name of this field -------------------------^\n                                            type: 'Bar',\n// The type of this field -------------------------^\n                                            resolve(parent, args, ctx, info) {\n// The method called to return a -----------^       |       |     |    |\n// value for this field when queried                |       |     |    |\n//                                                  |       |     |    |\n// The backing data model for Foo ------------------^       |     |    |\n//                                                          |     |    |\n// The client arguments to this field ----------------------^     |    |\n//                                                                |    |\n// Contextual data for this request ------------------------------^    |\n// Shared across all resolvers                                         |\n//                                                                     |\n// Technical detail about this request --------------------------------^\n// E.g. client's query AST\n\n// Your logic to return a value ------------> ...\n// for this field\n                                            },\n                                          })\n\n                                          t.string('qux')\n// A scalar-type convenience builder -------^       |\n//                                                  |\n// No resolver means Nexus returns the -------------^\n// \\`qux\\` property from the backing data model\n\n                                        },\n                                      })\n`}</code></pre></section><section parentName=\"section\"><h4 parentName=\"section\" {...{\n            \"id\": \"scalar-fields\",\n            \"style\": {\n              \"position\": \"relative\"\n            }\n          }}><a parentName=\"h4\" {...{\n              \"href\": \"#scalar-fields\",\n              \"aria-label\": \"scalar fields permalink\",\n              \"className\": \"title-link before\"\n            }}><svg parentName=\"a\" {...{\n                \"width\": \"17\",\n                \"height\": \"18\",\n                \"viewBox\": \"0 0 17 18\",\n                \"fill\": \"none\",\n                \"xmlns\": \"http://www.w3.org/2000/svg\"\n              }}>{`\n      `}<path parentName=\"svg\" {...{\n                  \"d\": \"M1.5 6.33337H15.5\",\n                  \"stroke\": \"#CBD5E0\",\n                  \"strokeWidth\": \"2\",\n                  \"strokeLineCap\": \"round\",\n                  \"strokeLineJoin\": \"round\"\n                }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                  \"d\": \"M1.5 11.6666H15.5\",\n                  \"stroke\": \"#CBD5E0\",\n                  \"strokeWidth\": \"2\",\n                  \"strokeLineCap\": \"round\",\n                  \"strokeLineJoin\": \"round\"\n                }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                  \"d\": \"M6.75 1L5 17\",\n                  \"stroke\": \"#CBD5E0\",\n                  \"strokeWidth\": \"2\",\n                  \"strokeLineCap\": \"round\",\n                  \"strokeLineJoin\": \"round\"\n                }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                  \"d\": \"M12 1L10.25 17\",\n                  \"stroke\": \"#CBD5E0\",\n                  \"strokeWidth\": \"2\",\n                  \"strokeLineCap\": \"round\",\n                  \"strokeLineJoin\": \"round\"\n                }}></path>{`\n      `}</svg></a>{`Scalar Fields`}</h4><cols><pre parentName=\"section\"><code parentName=\"pre\" {...{\n                \"className\": \"language-ts\"\n              }}>{`schema.objectType({\n  name: 'Alpha',\n  definition(t) {\n    t.id('a')\n    t.string('b')\n    t.int('c')\n    t.float('d')\n    t.boolean('e')\n  },\n})\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n                \"className\": \"language-graphql\"\n              }}>{`type Alpha {\n  a: ID!\n  b: String!\n  c: Int!\n  d: Float!\n  e: Boolean!\n}\n`}</code></pre></cols></section><section parentName=\"section\"><h4 parentName=\"section\" {...{\n            \"id\": \"relational-fields\",\n            \"style\": {\n              \"position\": \"relative\"\n            }\n          }}><a parentName=\"h4\" {...{\n              \"href\": \"#relational-fields\",\n              \"aria-label\": \"relational fields permalink\",\n              \"className\": \"title-link before\"\n            }}><svg parentName=\"a\" {...{\n                \"width\": \"17\",\n                \"height\": \"18\",\n                \"viewBox\": \"0 0 17 18\",\n                \"fill\": \"none\",\n                \"xmlns\": \"http://www.w3.org/2000/svg\"\n              }}>{`\n      `}<path parentName=\"svg\" {...{\n                  \"d\": \"M1.5 6.33337H15.5\",\n                  \"stroke\": \"#CBD5E0\",\n                  \"strokeWidth\": \"2\",\n                  \"strokeLineCap\": \"round\",\n                  \"strokeLineJoin\": \"round\"\n                }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                  \"d\": \"M1.5 11.6666H15.5\",\n                  \"stroke\": \"#CBD5E0\",\n                  \"strokeWidth\": \"2\",\n                  \"strokeLineCap\": \"round\",\n                  \"strokeLineJoin\": \"round\"\n                }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                  \"d\": \"M6.75 1L5 17\",\n                  \"stroke\": \"#CBD5E0\",\n                  \"strokeWidth\": \"2\",\n                  \"strokeLineCap\": \"round\",\n                  \"strokeLineJoin\": \"round\"\n                }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                  \"d\": \"M12 1L10.25 17\",\n                  \"stroke\": \"#CBD5E0\",\n                  \"strokeWidth\": \"2\",\n                  \"strokeLineCap\": \"round\",\n                  \"strokeLineJoin\": \"round\"\n                }}></path>{`\n      `}</svg></a>{`Relational Fields`}</h4><cols><pre parentName=\"section\"><code parentName=\"pre\" {...{\n                \"className\": \"language-ts\"\n              }}>{`schema.objectType({\n  name: 'Alpha',\n  definition(t) {\n    t.field('beta', {\n      type: 'Beta',\n      resolve() {\n        return { foo: 'bar' }\n      },\n    })\n  },\n})\nschema.objectType({\n  name: 'Beta',\n  definition(t) {\n    t.string('foo')\n  },\n})\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n                \"className\": \"language-graphql\"\n              }}>{`type Alpha {\n  beta: Beta!\n}\n\ntype Beta {\n  foo: String!\n}\n`}</code></pre></cols><section parentName=\"section\"><h6 parentName=\"section\" {...{\n              \"id\": \"lists--nullability\",\n              \"style\": {\n                \"position\": \"relative\"\n              }\n            }}><a parentName=\"h6\" {...{\n                \"href\": \"#lists--nullability\",\n                \"aria-label\": \"lists  nullability permalink\",\n                \"className\": \"title-link before\"\n              }}><svg parentName=\"a\" {...{\n                  \"width\": \"17\",\n                  \"height\": \"18\",\n                  \"viewBox\": \"0 0 17 18\",\n                  \"fill\": \"none\",\n                  \"xmlns\": \"http://www.w3.org/2000/svg\"\n                }}>{`\n      `}<path parentName=\"svg\" {...{\n                    \"d\": \"M1.5 6.33337H15.5\",\n                    \"stroke\": \"#CBD5E0\",\n                    \"strokeWidth\": \"2\",\n                    \"strokeLineCap\": \"round\",\n                    \"strokeLineJoin\": \"round\"\n                  }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                    \"d\": \"M1.5 11.6666H15.5\",\n                    \"stroke\": \"#CBD5E0\",\n                    \"strokeWidth\": \"2\",\n                    \"strokeLineCap\": \"round\",\n                    \"strokeLineJoin\": \"round\"\n                  }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                    \"d\": \"M6.75 1L5 17\",\n                    \"stroke\": \"#CBD5E0\",\n                    \"strokeWidth\": \"2\",\n                    \"strokeLineCap\": \"round\",\n                    \"strokeLineJoin\": \"round\"\n                  }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                    \"d\": \"M12 1L10.25 17\",\n                    \"stroke\": \"#CBD5E0\",\n                    \"strokeWidth\": \"2\",\n                    \"strokeLineCap\": \"round\",\n                    \"strokeLineJoin\": \"round\"\n                  }}></path>{`\n      `}</svg></a>{`Lists & Nullability`}</h6><cols><pre parentName=\"section\"><code parentName=\"pre\" {...{\n                  \"className\": \"language-ts\"\n                }}>{`schema.objectType({\n  name: 'Alpha',\n  definition(t) {\n    t.id('a', { nullable: true })\n    t.list.id('b')\n    t.list.id('c', { nullable: true })\n    t.list.id('c', { list: [false] })\n    t.list.id('c', { list: [false], nullable: true })\n  },\n})\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n                  \"className\": \"language-graphql\"\n                }}>{`type Alpha {\n  a: ID\n  b: [ID!]!\n  c: [ID!]\n  c: [ID]!\n  c: [ID]\n}\n`}</code></pre></cols></section></section></section><section parentName=\"section\"><h3 parentName=\"section\" {...{\n          \"id\": \"entrypoint-types\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h3\" {...{\n            \"href\": \"#entrypoint-types\",\n            \"aria-label\": \"entrypoint types permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Entrypoint Types`}</h3></section><section parentName=\"section\"><h3 parentName=\"section\" {...{\n          \"id\": \"enum-type\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h3\" {...{\n            \"href\": \"#enum-type\",\n            \"aria-label\": \"enum type permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Enum Type`}</h3><p parentName=\"section\">{`Enum types are a scalar with a finite set of allowed values. They can be used as argument types and as field types.`}</p><p parentName=\"section\"><a parentName=\"p\" {...{\n            \"href\": \"https://graphql.org/learn/schema/#enumeration-types\"\n          }}>{`graphql.org Enumeration Types docs`}</a></p><cols><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-ts\"\n            }}>{`schema.enum({\n  name: 'Alpha',\n  members: ['Zeta', 'Yolo'],\n})\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-graphql\"\n            }}>{`enum Alpha {\n  Zeta\n  Yolo\n}\n`}</code></pre></cols><section parentName=\"section\"><h6 parentName=\"section\" {...{\n            \"id\": \"example-as-argument-type--field-type\",\n            \"style\": {\n              \"position\": \"relative\"\n            }\n          }}><a parentName=\"h6\" {...{\n              \"href\": \"#example-as-argument-type--field-type\",\n              \"aria-label\": \"example as argument type  field type permalink\",\n              \"className\": \"title-link before\"\n            }}><svg parentName=\"a\" {...{\n                \"width\": \"17\",\n                \"height\": \"18\",\n                \"viewBox\": \"0 0 17 18\",\n                \"fill\": \"none\",\n                \"xmlns\": \"http://www.w3.org/2000/svg\"\n              }}>{`\n      `}<path parentName=\"svg\" {...{\n                  \"d\": \"M1.5 6.33337H15.5\",\n                  \"stroke\": \"#CBD5E0\",\n                  \"strokeWidth\": \"2\",\n                  \"strokeLineCap\": \"round\",\n                  \"strokeLineJoin\": \"round\"\n                }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                  \"d\": \"M1.5 11.6666H15.5\",\n                  \"stroke\": \"#CBD5E0\",\n                  \"strokeWidth\": \"2\",\n                  \"strokeLineCap\": \"round\",\n                  \"strokeLineJoin\": \"round\"\n                }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                  \"d\": \"M6.75 1L5 17\",\n                  \"stroke\": \"#CBD5E0\",\n                  \"strokeWidth\": \"2\",\n                  \"strokeLineCap\": \"round\",\n                  \"strokeLineJoin\": \"round\"\n                }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                  \"d\": \"M12 1L10.25 17\",\n                  \"stroke\": \"#CBD5E0\",\n                  \"strokeWidth\": \"2\",\n                  \"strokeLineCap\": \"round\",\n                  \"strokeLineJoin\": \"round\"\n                }}></path>{`\n      `}</svg></a>{`Example: As argument type & field type`}</h6><cols><pre parentName=\"section\"><code parentName=\"pre\" {...{\n                \"className\": \"language-ts\"\n              }}>{`schema.queryType({\n  definition(t) {\n    t.field('anyAlpha', {\n      type: 'Alpha',\n      resolve(t) {\n        return Math.random() > 0.1 : 'Zeta' : 'Yolo'\n      }\n    })\n    t.list.field('alphas', {\n      type: 'Alpha',\n      args: {\n        except: schema.arg({\n          list: true,\n          type: \"Alpha\",\n          required: true,\n        })\n      },\n      resolve(_root, args) {\n        return ['Zeta', 'Yolo'].filter(alpha => {\n          return !args.except.includes(alpha)\n        })\n      }\n    })\n  }\n})\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n                \"className\": \"language-graphql\"\n              }}>{`type Query {\n  anyAlpha: Alpha!\n  alphas(except: [Alpha!]!): [Alpha!]!\n}\n`}</code></pre></cols>\n          <cols><pre parentName=\"section\"><code parentName=\"pre\" {...{\n                \"className\": \"language-graphql\"\n              }}>{`query {\n  anyAlpha\n  alphas(except: [\"Zeta\"])\n}\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n                \"className\": \"language-json\"\n              }}>{`{\n  \"data\": {\n    \"anyAlpha\": \"Zeta\",\n    \"alphas\": [\"Yolo\"]\n  }\n}\n`}</code></pre></cols></section></section><section parentName=\"section\"><h3 parentName=\"section\" {...{\n          \"id\": \"union-type\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h3\" {...{\n            \"href\": \"#union-type\",\n            \"aria-label\": \"union type permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Union Type`}</h3></section><section parentName=\"section\"><h3 parentName=\"section\" {...{\n          \"id\": \"interface-type\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h3\" {...{\n            \"href\": \"#interface-type\",\n            \"aria-label\": \"interface type permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Interface Type`}</h3></section><section parentName=\"section\"><h3 parentName=\"section\" {...{\n          \"id\": \"field-arguments\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h3\" {...{\n            \"href\": \"#field-arguments\",\n            \"aria-label\": \"field arguments permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Field Arguments`}</h3></section><section parentName=\"section\"><h3 parentName=\"section\" {...{\n          \"id\": \"input-object-type\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h3\" {...{\n            \"href\": \"#input-object-type\",\n            \"aria-label\": \"input object type permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Input Object Type`}</h3></section><section parentName=\"section\"><h3 parentName=\"section\" {...{\n          \"id\": \"lists\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h3\" {...{\n            \"href\": \"#lists\",\n            \"aria-label\": \"lists permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Lists`}</h3></section><section parentName=\"section\"><h3 parentName=\"section\" {...{\n          \"id\": \"descriptions\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h3\" {...{\n            \"href\": \"#descriptions\",\n            \"aria-label\": \"descriptions permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Descriptions`}</h3></section><section parentName=\"section\"><h3 parentName=\"section\" {...{\n          \"id\": \"deprecations\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h3\" {...{\n            \"href\": \"#deprecations\",\n            \"aria-label\": \"deprecations permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Deprecations`}</h3></section></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"data-modelling\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#data-modelling\",\n          \"aria-label\": \"data modelling permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Data Modelling`}</h2><p parentName=\"section\">{`As the API author, there are three design tasks you will invariable perform over and over again:`}</p><ol parentName=\"section\">\n        <li parentName=\"ol\">{`Create data types that model logical entities and concepts in your business domain.`}</li>\n        <li parentName=\"ol\">{`Define connections between these data types that model how logical entities and concepts relate in your business domain.`}</li>\n        <li parentName=\"ol\">{`Define entrypoints which allow traversal into this graph of data.`}</li>\n      </ol><p parentName=\"section\">{`This is an iterative process that can generally be seen as an finite loop wherein your team gradually refines and expands (or contracts!) the data graph as you respond to changing client app needs, business needs, and so on. Data modelling is hard work. For one thing it is a suble art, occasionally underappreciated. There are typically multiple ways to model any one thing and competing tradeoffs that leave no obvious winner abound. If the process of data modelling itself or data modelling in GraphQL is new to you, you may find this book by `}<a parentName=\"p\" {...{\n          \"href\": \"https://twitter.com/__xuorig__\"\n        }}>{`Marc-Andre Giroux`}</a>{` helpful: `}<a parentName=\"p\" {...{\n          \"href\": \"https://book.productionreadygraphql.com/\"\n        }}>{`Production Ready GraphQL`}</a>{`.`}</p></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"nullability-in-principal\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#nullability-in-principal\",\n          \"aria-label\": \"nullability in principal permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Nullability in Principal`}</h2><p parentName=\"section\">{`When creating an API, especially before going to production or lifting features out of beta, thinking about if arguments and input object fields (`}<em parentName=\"p\">{`inputs`}</em>{`) should be required and if object type fields (`}<em parentName=\"p\">{`outputs`}</em>{`) should be nullable is an important design consideration. How easy your API is to consume trades for how easy it is to change and some reliability characteristics.`}</p><p parentName=\"section\">{`If inputs are optional or outputs are guaranteed then client developers will have a simpler API to deal with since making requests demands no up front configuration and handling responses presents no null cases. On the other hand, for the API developer, changing the API becomes harder since turning inputs from optional to required or making outputs go from guaranteed to nullable are breaking changes from the client's point of view.`}</p><p parentName=\"section\">{`Also, as more outputs are guaranteed, the greater the potential of the \"null blast radius\" can be. This is the effect where, within a schema rutime, a `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` or error received from some data source where the schema states there shall be no `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` requires propagating the `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` up the data tree until a nullable type is found (or, at root, finally error).`}</p><p parentName=\"section\">{`If you'd like to see these design considerations discussed further here are a few articles/resources you may find helpful:`}</p><ul parentName=\"section\">\n        <li parentName=\"ul\">{`2019 `}<a parentName=\"li\" {...{\n            \"href\": \"https://medium.com/expedia-group-tech/nullability-in-graphql-b8d06fbd8a3c\"\n          }}>{`Nullability in GraphQL`}</a>{` by Grant Norwood`}</li>\n        <li parentName=\"ul\">{`2018 `}<a parentName=\"li\" {...{\n            \"href\": \"https://blog.apollographql.com/using-nullability-in-graphql-2254f84c4ed7\"\n          }}>{`Using nullability in GraphQL`}</a>{` by Sashko Stubailo`}</li>\n        <li parentName=\"ul\">{`2017 `}<a parentName=\"li\" {...{\n            \"href\": \"https://medium.com/@calebmer/when-to-use-graphql-non-null-fields-4059337f6fc8\"\n          }}>{`When To Use GraphQL Non-Null Fields`}</a>{` by Caleb Meredith`}</li>\n        <li parentName=\"ul\"><a parentName=\"li\" {...{\n            \"href\": \"https://graphql.org/learn/best-practices/#nullability\"\n          }}>{`Nullability Best Practices`}</a>{` on grpahql.org`}</li>\n      </ul></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"nullability-in-nexus\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#nullability-in-nexus\",\n          \"aria-label\": \"nullability in nexus permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Nullability in Nexus`}</h2><p parentName=\"section\">{`Nexus defaults to both inputs and outputs being nullable. This means by default your API is conservative in what it sends but flexible in what it accepts. With this approach, by default:`}</p><ul parentName=\"section\">\n        <li parentName=\"ul\">{`You're free to defer some hard thinking about output nullability, knowing you can always change your mind later without breaking clients.`}</li>\n        <li parentName=\"ul\">{`Client developers work more to processing API respones, having to handle null conditions.`}</li>\n        <li parentName=\"ul\">{`You're forced to frontload some hard thinking about inputs, since realizing something should have been required later will require breaking clients.`}</li>\n        <li parentName=\"ul\">{`Client developers work less to satisfy minimum query requirements.`}</li>\n        <li parentName=\"ul\">{`The \"null blast radius\" (refer to `}<a parentName=\"li\" {...{\n            \"href\": \"#nullability-in-principal\"\n          }}>{`Nullability in Principal`}</a>{`) is reduced to zero.`}</li>\n      </ul><p parentName=\"section\">{`There is no right or wrong answer to nullability. These are just defaults, not judgements. Understand the tradeoffs, and react to your use-case, above all.`}</p><p parentName=\"section\">{`You can override the global defaults at the per-type level or per-field level. If you find yourself writing local overrides in a majority of cases then it might mean the global defaults are a bad fit for your API. In that case you can change the global defaults.`}</p><p parentName=\"section\">{`When you make an input nullable then Nexus will alter its TypeScript type inside your resolver to have `}<inlineCode parentName=\"p\">{`null | undefined`}</inlineCode>{`. `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` is for the case that the client passed in an explicit `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` while `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{` is for the case where the client simply did not specify the input at all.`}</p><p parentName=\"section\">{`If an arg has been given a default value, then it will be used when the client passes nothing, but since clients can still pass explicit `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`, resolvers must still handle nullability. If this surprises you then you may be interested in `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/graphql-nexus/nexus/issues/485\"\n        }}>{`#485`}</a>{`.`}</p><section parentName=\"section\"><h6 parentName=\"section\" {...{\n          \"id\": \"example-default-nullability-settings\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h6\" {...{\n            \"href\": \"#example-default-nullability-settings\",\n            \"aria-label\": \"example default nullability settings permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Example: Default Nullability Settings`}</h6><cols><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-ts\"\n            }}>{`schema.queryType({\n  definition(t) {\n    t.string('echo', {\n      args: {\n        message: 'String',\n      },\n      resolve(_root, args) {\n        return args.message ?? 'nil'\n      },\n    })\n  },\n})\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-graphql\"\n            }}>{`type Query {\n  echo(message: String): String\n}\n`}</code></pre></cols></section><section parentName=\"section\"><h6 parentName=\"section\" {...{\n          \"id\": \"example-nullability-flipped-at-global-level\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h6\" {...{\n            \"href\": \"#example-nullability-flipped-at-global-level\",\n            \"aria-label\": \"example nullability flipped at global level permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Example: Nullability Flipped at Global Level`}</h6><cols><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-ts\"\n            }}>{`settings.change({\n  schema: {\n    nullable: {\n      outputs: false,\n      inputs: false,\n    },\n  },\n})\n\nschema.queryType({\n  definition(t) {\n    t.string('echo', {\n      args: {\n        message: 'String',\n      },\n      resolve(_root, args) {\n        return args.message\n      },\n    })\n  },\n})\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-graphql\"\n            }}>{`type Query {\n  echo(message: String): String!\n}\n`}</code></pre></cols></section><section parentName=\"section\"><h6 parentName=\"section\" {...{\n          \"id\": \"example-nullability-flipped-at-type-level\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h6\" {...{\n            \"href\": \"#example-nullability-flipped-at-type-level\",\n            \"aria-label\": \"example nullability flipped at type level permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Example: Nullability Flipped at Type Level`}</h6><cols><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-ts\"\n            }}>{`schema.queryType({\n  nonNullDefaults: {\n    input: true,\n    output: true,\n  },\n  definition(t) {\n    t.string('echo', {\n      args: {\n        message: 'String',\n      },\n      resolve(_root, args) {\n        return args.message\n      },\n    })\n  },\n})\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-graphql\"\n            }}>{`type Query {\n  echo(message: String): String!\n}\n`}</code></pre></cols></section><section parentName=\"section\"><h6 parentName=\"section\" {...{\n          \"id\": \"example-nullability-flipped-at-input--field-level\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h6\" {...{\n            \"href\": \"#example-nullability-flipped-at-input--field-level\",\n            \"aria-label\": \"example nullability flipped at input  field level permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Example: Nullability Flipped at Input & Field Level`}</h6><cols><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-ts\"\n            }}>{`schema.queryType({\n  definition(t) {\n    t.string('echo', {\n      args: {\n        message: schema.arg({\n          type: 'String',\n          nullable: false,\n        }),\n      },\n      nullable: false,\n      resolve(_root, args) {\n        return args.message\n      },\n    })\n  },\n})\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-graphql\"\n            }}>{`type Query {\n  echo(message: String): String!\n}\n`}</code></pre></cols></section><section parentName=\"section\"><h6 parentName=\"section\" {...{\n          \"id\": \"example-mixing-levels\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h6\" {...{\n            \"href\": \"#example-mixing-levels\",\n            \"aria-label\": \"example mixing levels permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Example: Mixing Levels`}</h6><p parentName=\"section\">{`It is possible to use type and input/field layers together. This provides flexibility to optimize for local sections of your API that have different characteristics. For example here, a type deviates from the global default for all but but one field and its input.`}</p><cols><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-ts\"\n            }}>{`schema.queryType({\n  // flip the global defaults\n  nonNullDefaults: {\n    input: true,\n    output: true,\n  },\n  definition(t) {\n    // ... Everything in this type uses the type-level\n    // nullability config ... Except the following,\n    // which effectively reverts back to what the global\n    // defaults are:\n    t.string('echo', {\n      nullable: false,\n      args: {\n        message: schema.arg({\n          type: 'String',\n          nullable: false,\n        }),\n      },\n      resolve(_root, args) {\n        return args.message\n      },\n    })\n  },\n})\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-graphql\"\n            }}>{`type Query {\n  foo(bar: String): String!\n}\n`}</code></pre></cols></section><section parentName=\"section\"><h4 parentName=\"section\" {...{\n          \"id\": \"example-args-that-have-default-values\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h4\" {...{\n            \"href\": \"#example-args-that-have-default-values\",\n            \"aria-label\": \"example args that have default values permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Example: Args That Have Default Values`}</h4><p parentName=\"section\">{`When an arg has a default you might think that then it should be nullable to the client but non-nullable within your resolver logic. However it turns out that if the client passes an `}<em parentName=\"p\">{`explicit`}</em>{` `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` then that is considered an actual value, and hence is not subject to being assigned the default value. Thus, and then, the resolver still can observe null from the client. If you are curious about seeing this change and/or become configurable then please refer to `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/graphql-nexus/nexus/issues/485\"\n          }}>{`#485`}</a>{`.`}</p><cols><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-ts\"\n            }}>{`schema.queryType({\n  definition(t) {\n    t.string('echo', {\n      args: {\n        message: schema.arg({\n          type: 'String',\n          default: 'nil via default',\n        }),\n      },\n      nullable: false,\n      resolve(_root, args) {\n        const fallback = 'nil via client null'\n        return args.message ?? fallback\n      },\n    })\n  },\n})\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-graphql\"\n            }}>{`type Query {\n  echo(message: String = \"nothing via default\"): String!\n}}\n`}</code></pre></cols>\n        <cols><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-graphql\"\n            }}>{`query {\n  echo1: echo\n  echo2: echo(message: null)\n}\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n              \"className\": \"language-json\"\n            }}>{`{\n  \"data\": {\n    \"echo1\": \"nil via default\",\n    \"echo2\": \"nil via client null\"\n  }\n}\n`}</code></pre></cols></section></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"backing-types-in-principal\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#backing-types-in-principal\",\n          \"aria-label\": \"backing types in principal permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Backing Types in Principal`}</h2><p parentName=\"section\">{`As you begin to implement a schema for the first time you will notice something that may not have been obvious at first. The data that the client sees in the data graph is `}<em parentName=\"p\">{`not`}</em>{` the same data flowing through the internal resolvers used to fulfill that graph. The client sees the API types but the API author deals with something else, `}<em parentName=\"p\">{`backing types`}</em>{`.`}</p><p parentName=\"section\">{`Here is an example of resolution for a query as it would be seen roughly from a GraphQL type `}<em parentName=\"p\">{`only`}</em>{` point of view.`}</p><p parentName=\"section\"><img parentName=\"p\" {...{\n          \"src\": \"../assets/diagram-backing-types-1.png\",\n          \"alt\": null\n        }}></img></p><p parentName=\"section\">{`When a field's type is an object, then the field's resolver returns a backing type. Concretely this might for example be a plain JavaScript object containing node/row/document data from a database call. This backing type data is in turn passed down to all the object type's own field resolvers.`}</p><p parentName=\"section\">{`Here is the above diagram updated to include backing types now.`}</p><p parentName=\"section\"><img parentName=\"p\" {...{\n          \"src\": \"../assets/diagram-backing-types-2.png\",\n          \"alt\": null\n        }}></img></p><p parentName=\"section\">{`Here is a step-by-step breakdown of what is going on (follow the diagram annotation numbers):`}</p><ol parentName=\"section\">\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`Client sends a query`}</p>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`The field resolver for `}<inlineCode parentName=\"p\">{`Query.user`}</inlineCode>{` runs. Remember `}<inlineCode parentName=\"p\">{`Query`}</inlineCode>{` fields (along with `}<inlineCode parentName=\"p\">{`Subscription`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Mutation`}</inlineCode>{`) are `}<em parentName=\"p\">{`entrypoints`}</em>{`.`}</p>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`Within this resolver, the database client fetches a user from the database. The resolver returns this data. This data will now become `}<strong parentName=\"p\">{`backing type`}</strong>{` data...`}</p>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`Resolution continues since the type of `}<inlineCode parentName=\"p\">{`Query.user`}</inlineCode>{` field is an object, not a scalar. As such its own fields need resolving. The fields that get resolved are limited to those selected by the client, in this case: `}<inlineCode parentName=\"p\">{`fullName`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`age`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`comments`}</inlineCode>{`. Those three field resolvers run. Their `}<inlineCode parentName=\"p\">{`parent`}</inlineCode>{` argument is the user model data fetched in step 3. `}<em parentName=\"p\">{`This is the backing type data for the GraphQL `}<inlineCode parentName=\"em\">{`User`}</inlineCode>{` object`}</em>{`.`}</p>\n          <pre parentName=\"li\"><code parentName=\"pre\" {...{\n              \"className\": \"language-ts\"\n            }}>{`t.field('...', {\n  resolve(parent, args, ctx, info) {\n    //    ^------------------------------- Here\n  },\n}\n`}</code></pre>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`The `}<inlineCode parentName=\"p\">{`comments`}</inlineCode>{` field is is an object type so just like with `}<inlineCode parentName=\"p\">{`Query.users`}</inlineCode>{` before, its own fields must be resolved. The `}<inlineCode parentName=\"p\">{`comments`}</inlineCode>{` resolver fetches comments data from the database. Like in step 3 this data becomes `}<em parentName=\"p\">{`backing type`}</em>{` data.`}</p>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`Much like the GraphQL `}<inlineCode parentName=\"p\">{`Comment`}</inlineCode>{` object field were resolved, so is `}<inlineCode parentName=\"p\">{`Comment`}</inlineCode>{`. Resolution runs once for every comment retrived from the database in the previous step. The `}<inlineCode parentName=\"p\">{`text`}</inlineCode>{` field is scalar so resolution of that path can terminate there. But the `}<inlineCode parentName=\"p\">{`likers`}</inlineCode>{` field is typed to an object and so once again goes through the object-field resolution pattern.`}</p>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`A request to the database for users who liked this comment is made.`}</p>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`A repeat of step 4. But this time from a different edge in the graph. Before it was the entrypoint field `}<inlineCode parentName=\"p\">{`Query.user`}</inlineCode>{`. Now we're resolving from relation with `}<inlineCode parentName=\"p\">{`Comment`}</inlineCode>{`. Note how the backing type requirements of `}<inlineCode parentName=\"p\">{`User`}</inlineCode>{`, regardless of which part of the graph is pointing at it, remain the same. One other difference from step 4 is that, like in step 6, we are dealing with a list of data. That is, this resolution is run every user returned in step 7.`}</p>\n        </li>\n      </ol><p parentName=\"section\">{`Hopefully you can see how the GraphQL types seen by the client are distinct from the backing types flowing through the resolvers. Below, you can find a code sample of how the implementation of this schema might look like.`}</p><details>\n        <summary>See code implementation</summary><pre parentName=\"section\"><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}>{`schema.query({\n  definition(t) {\n    t.user({\n      args: {\n        id: schema.arg({ type: 'ID', required: true }),\n      },\n      resolve(_, { id }, { db }) {\n        return db.fetchUser({ where: { id } })\n      },\n    })\n  },\n})\n\nschema.object({\n  name: 'User',\n  rootTyping: 'Prisma.User',\n  definition(t) {\n    t.string('fullName', {\n      resolve(user) {\n        return [user.firstName, user.middleName, user.lastName].join(', ')\n      },\n    })\n    t.int('age', {\n      resolve(user) {\n        return yearsSinceUnixTimestamp(user.birthDate)\n      },\n    })\n    t.list.field('comments', {\n      type: 'Comment',\n      resolve(user, _args, { db }) {\n        return db.comment.fetchMany({ where: { author: user.id } })\n      },\n    })\n  },\n})\n\nschema.object({\n  name: 'Comment',\n  rootTyping: 'Prisma.Comment',\n  definition(t) {\n    t.string('title', {\n      resolve(comment) {\n        return comment.title\n      },\n    })\n    t.field('body', {\n      resolve(comment) {\n        return comment.body\n      },\n    })\n    t.field('post', {\n      type: 'Post',\n      resolve(comment, _args, { db }) {\n        return db.post.fetchOne({ where: { id: comment.postId } })\n      },\n    })\n    t.field('author', {\n      type: 'User',\n      resolve(comment, _args, { db }) {\n        return db.user.fetchOne({ where: { id: comment.authorId } })\n      },\n    })\n  },\n})\n\nschema.object({\n  name: 'Post',\n  rootTyping: 'Prisma.Post',\n  definition(t) {\n    t.string('title', {\n      resolve(post) {\n        return post.title\n      },\n    })\n    t.field('body', {\n      resolve(post) {\n        return post.body\n      },\n    })\n    t.list.field('comments', {\n      type: 'Comment',\n      resolve(post, _args, { db }) {\n        return db.comment.fetchMany({ where: { id: post.commentId } })\n      },\n    })\n  },\n})\n`}</code></pre></details></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"backing-types-in-nexus\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#backing-types-in-nexus\",\n          \"aria-label\": \"backing types in nexus permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Backing Types in Nexus`}</h2><section parentName=\"section\"><h4 parentName=\"section\" {...{\n          \"id\": \"inferred-types\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h4\" {...{\n            \"href\": \"#inferred-types\",\n            \"aria-label\": \"inferred types permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Inferred Types`}</h4><p parentName=\"section\">{`When you first begin creating your schema, you may have objects without backing types setup. In these cases Nexus infers that the backing type is an exact match of the GraphQL type. Take this schema for example:`}</p>{\n          /* prettier-ignore */\n        }<pre parentName=\"section\"><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}>{`// Nexus infers the backing type of:\n//\n// { fullName: string, age: number } ---> |\n//                                        |\nschema.object({                        // |\n  name: 'User',                        // |\n  definition(t) {                      // |\n    t.string('fullName', {             // |\n      resolve(user) {                  // |\n//            ^-------------------------- | \n        return user.fullName           // |\n      },                               // |\n    })                                 // |\n    t.int('age', {                     // |\n      resolve(user) {                  // |\n//            ^-------------------------- |\n        return user.age                // |\n      },                               // |\n    })                                 // |\n  },                                   // |\n})                                     // |\n                                       // |\nschema.queryType({                     // |\n  definition(t) {                      // |\n    t.list.field('users', {            // |\n      type: 'User',                    // |\n      resolve() {                      // |\n        return [/**/]                  // |\n//               ^----------------------- |\n      },\n    })\n  },\n})\n`}</code></pre><p parentName=\"section\">{`This may suffice well enough for some time, but most apps will eventually see their GraphQL and backing types diverge. Once this happens, you can tell Nexus about it using the `}<inlineCode parentName=\"p\">{`rootTyping`}</inlineCode>{` object type config property.`}</p></section><section parentName=\"section\"><h4 parentName=\"section\" {...{\n          \"id\": \"roottyping-property\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h4\" {...{\n            \"href\": \"#roottyping-property\",\n            \"aria-label\": \"roottyping property permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`rootTyping Property`}</h4><pre parentName=\"section\"><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}>{`export interface MyDBUser {\n  // |           ^-------------------- Create your backing type\n  // ^-------------------------------- Export your backing type (required)\n  firstName: string\n  lastName: string\n  birthDate: number\n}\n\nschema.object({\n  name: 'User',\n  rootTyping: 'MyDBUser',\n  //           ^---------------------- Tell Nexus what the backing type is.\n  //                                   Now, Nexus types...\n  definition(t) {\n    t.string('fullName', {\n      resolve(user) {\n        //    ^----------------------- as: MyDBUser\n        return [user.firstName, user.lastName].join(', ')\n      },\n    })\n    t.int('age', {\n      resolve(user) {\n        //    ^------------------------ as: MyDBUser\n        return yearsSinceUnixTimestamp(user.birthDate)\n      },\n    })\n  },\n})\n\nschema.queryType({\n  definition(t) {\n    t.list.field('users', {\n      type: 'User',\n      resolve(_root, args, ctx) {\n        //                     ^------- return as: MyDBUser[]\n        return ctx.db.user.getMany()\n      },\n    })\n  },\n})\n`}</code></pre><p parentName=\"section\">{`Nexus does not care about where `}<inlineCode parentName=\"p\">{`MyDBUser`}</inlineCode>{` is defined. So long as it is defined and exported from a module within your app, it will be available for use in any `}<inlineCode parentName=\"p\">{`rootTyping`}</inlineCode>{` property.`}</p><p parentName=\"section\">{`The `}<inlineCode parentName=\"p\">{`rootTyping`}</inlineCode>{` property is statically typed as a union of all the valid possibile types your app makes available. Thus, your IDE will/should give you autocompletion here.`}</p></section><section parentName=\"section\"><h4 parentName=\"section\" {...{\n          \"id\": \"third-party-types\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h4\" {...{\n            \"href\": \"#third-party-types\",\n            \"aria-label\": \"third party types permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`Third-Party Types`}</h4><p parentName=\"section\">{`If you would like to use types from a third party package, you can just re-export them in your own app. Here's the above example re-visited using some third party typings:`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}>{`export type * as Spotify from 'spotify-api'\n//                             ^------ Export your third-party type(s)\n//                                     Can be anywhere within your app\n\nschema.object({\n  name: 'User',\n  rootTyping: 'Spotify.Foo',\n  //           ^---------------------- Tell Nexus what the backing type is.\n  //                                   Now, Nexus types...\n  definition(t) {\n    t.string('fullName', {\n      resolve(user) {\n        //    ^----------------------- as: Spotify.Foo\n        return user.fullName\n      },\n    })\n    t.int('age', {\n      resolve(user) {\n        //    ^------------------------ as: Spotify.Foo\n        return user.age\n      },\n    })\n  },\n})\n\nschema.queryType({\n  definition(t) {\n    t.list.field('users', {\n      type: 'User',\n      resolve(_root, args, ctx) {\n        //                     ^------- return as: Spotify.Foo[]\n        return ctx.db.user.getMany()\n      },\n    })\n  },\n})\n`}</code></pre><p class=\"NextIs Detail\"></p><blockquote parentName=\"section\">\n          <p parentName=\"blockquote\">{`The backing type configuration is co-located with the GraphQL object because Nexus takes the view that a GraphQL object owns its backing type requirements and all nodes in the graph pointing to it must then satisfy those requirements in their own resolvers. We saw a bit of this in the Backing Types Conepts section before, where `}<inlineCode parentName=\"p\">{`User`}</inlineCode>{` object was related to by multiple nodes in the graph, and those various nodes passed the same kinds of backing types during resolution.`}</p>\n        </blockquote></section></section>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}