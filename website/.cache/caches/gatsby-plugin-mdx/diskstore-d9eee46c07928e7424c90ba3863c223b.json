{"expireTime":9007200846028968000,"key":"gatsby-plugin-mdx-entire-payload-05803a171fd4b5c9c3e5291db67df0b2-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Testing is a first-class concern of Nexus. So far we ship a few primitives to help you run integration tests, but you can expect integrated higher level testing features in the future.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":185,"offset":185},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":185,"offset":185},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Note: This guide is written using ","position":{"start":{"line":4,"column":3,"offset":189},"end":{"line":4,"column":37,"offset":223},"indent":[]}},{"type":"link","title":null,"url":"https://jestjs.io/","children":[{"type":"inlineCode","value":"jest","position":{"start":{"line":4,"column":38,"offset":224},"end":{"line":4,"column":44,"offset":230},"indent":[]}}],"position":{"start":{"line":4,"column":37,"offset":223},"end":{"line":4,"column":65,"offset":251},"indent":[]}},{"type":"text","value":" because it is what we use internally and thus can speak to best. But you should be able to use your test framework of choice.","position":{"start":{"line":4,"column":65,"offset":251},"end":{"line":4,"column":191,"offset":377},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":189},"end":{"line":4,"column":191,"offset":377},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":187},"end":{"line":4,"column":191,"offset":377},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Meet the Module","position":{"start":{"line":6,"column":4,"offset":382},"end":{"line":6,"column":19,"offset":397},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":379},"end":{"line":6,"column":19,"offset":397},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Nexus comes with a special testing module that you can import from ","position":{"start":{"line":8,"column":1,"offset":399},"end":{"line":8,"column":68,"offset":466},"indent":[]}},{"type":"inlineCode","value":"nexus/testing","position":{"start":{"line":8,"column":68,"offset":466},"end":{"line":8,"column":83,"offset":481},"indent":[]}},{"type":"text","value":". Its primary utility is the ","position":{"start":{"line":8,"column":83,"offset":481},"end":{"line":8,"column":112,"offset":510},"indent":[]}},{"type":"inlineCode","value":"createTestContext","position":{"start":{"line":8,"column":112,"offset":510},"end":{"line":8,"column":131,"offset":529},"indent":[]}},{"type":"text","value":" function. It is designed for running ","position":{"start":{"line":8,"column":131,"offset":529},"end":{"line":8,"column":169,"offset":567},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"integration","position":{"start":{"line":8,"column":170,"offset":568},"end":{"line":8,"column":181,"offset":579},"indent":[]}}],"position":{"start":{"line":8,"column":169,"offset":567},"end":{"line":8,"column":182,"offset":580},"indent":[]}},{"type":"text","value":" tests. When run it will in turn boot your app (in the same process) and expose an interface for your tests to interact with it.","position":{"start":{"line":8,"column":182,"offset":580},"end":{"line":8,"column":310,"offset":708},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":399},"end":{"line":8,"column":310,"offset":708},"indent":[]}},{"type":"jsx","value":"<!-- TODO would be nice to have the TS type shown here. Use doc extraction system to do this. -->","position":{"start":{"line":10,"column":1,"offset":710},"end":{"line":10,"column":98,"offset":807},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"For the curious...","position":{"start":{"line":12,"column":3,"offset":811},"end":{"line":12,"column":21,"offset":829},"indent":[]}},{"type":"break","position":{"start":{"line":12,"column":21,"offset":829},"end":{"line":13,"column":3,"offset":834},"indent":[3]}},{"type":"text","value":"Since ","position":{"start":{"line":13,"column":3,"offset":834},"end":{"line":13,"column":9,"offset":840},"indent":[]}},{"type":"inlineCode","value":"jest","position":{"start":{"line":13,"column":9,"offset":840},"end":{"line":13,"column":15,"offset":846},"indent":[]}},{"type":"text","value":" runs test suites in parallel it means multiple instances of your ","position":{"start":{"line":13,"column":15,"offset":846},"end":{"line":13,"column":81,"offset":912},"indent":[]}},{"type":"inlineCode","value":"app","position":{"start":{"line":13,"column":81,"offset":912},"end":{"line":13,"column":86,"offset":917},"indent":[]}},{"type":"text","value":" will be run in parallel too. The testing module takes care of abstracting the mechanics of making this work from you. For example it assigns random ports to each app to run its server and makes sure each test suite's app client is configured to be talking with its respective app instance. You should ","position":{"start":{"line":13,"column":86,"offset":917},"end":{"line":13,"column":388,"offset":1219},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"never","position":{"start":{"line":13,"column":389,"offset":1220},"end":{"line":13,"column":394,"offset":1225},"indent":[]}}],"position":{"start":{"line":13,"column":388,"offset":1219},"end":{"line":13,"column":395,"offset":1226},"indent":[]}},{"type":"text","value":" have to think about these kinds of details though, and if it turns out you do please open a GitHub issue so we can try to seal the leak you've found in Nexus' abstraction!","position":{"start":{"line":13,"column":395,"offset":1226},"end":{"line":13,"column":567,"offset":1398},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":811},"end":{"line":13,"column":567,"offset":1398},"indent":[3]}}],"position":{"start":{"line":12,"column":1,"offset":809},"end":{"line":13,"column":567,"offset":1398},"indent":[1]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"A Little Helper {docsify-ignore}","position":{"start":{"line":15,"column":7,"offset":1406},"end":{"line":15,"column":39,"offset":1438},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":1400},"end":{"line":15,"column":39,"offset":1438},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before jumping into test suites we will wrap the ","position":{"start":{"line":17,"column":1,"offset":1440},"end":{"line":17,"column":50,"offset":1489},"indent":[]}},{"type":"inlineCode","value":"createTestContext","position":{"start":{"line":17,"column":50,"offset":1489},"end":{"line":17,"column":69,"offset":1508},"indent":[]}},{"type":"text","value":" with a pattern that more tightly integrates it into ","position":{"start":{"line":17,"column":69,"offset":1508},"end":{"line":17,"column":122,"offset":1561},"indent":[]}},{"type":"inlineCode","value":"jest","position":{"start":{"line":17,"column":122,"offset":1561},"end":{"line":17,"column":128,"offset":1567},"indent":[]}},{"type":"text","value":". Nexus will probably ship something like as follows or better in the future, but for now you can copy this into your projects:","position":{"start":{"line":17,"column":128,"offset":1567},"end":{"line":17,"column":255,"offset":1694},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1440},"end":{"line":17,"column":255,"offset":1694},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"// tests/__helpers.ts\nimport { createTestContext as originalCreateTestContext, TestContext } from 'nexus/testing'\n\nexport function createTestContext(): TestContext {\n  let ctx = {} as TestContext\n\n  beforeAll(async () => {\n    Object.assign(ctx, await originalCreateTestContext())\n    await ctx.app.start()\n  })\n\n  afterAll(async () => {\n    await ctx.app.stop()\n  })\n\n  return ctx\n}","position":{"start":{"line":19,"column":1,"offset":1696},"end":{"line":37,"column":4,"offset":2089},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We'll use this in other test suites roughly like so:","position":{"start":{"line":39,"column":1,"offset":2091},"end":{"line":39,"column":53,"offset":2143},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":2091},"end":{"line":39,"column":53,"offset":2143},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"// tests/foo.spec.ts\nimport { createTestContext } from './__helpers'\n\nconst ctx = createTestContext()\n\nit('foo', () => {\n  // use `ctx` in here\n})","position":{"start":{"line":41,"column":1,"offset":2145},"end":{"line":50,"column":4,"offset":2301},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Removing boilerplate away from your test code is a win and staying DRY about it across multiple test suites helps. But do note that ","position":{"start":{"line":52,"column":1,"offset":2303},"end":{"line":52,"column":133,"offset":2435},"indent":[]}},{"type":"inlineCode","value":"ctx","position":{"start":{"line":52,"column":133,"offset":2435},"end":{"line":52,"column":138,"offset":2440},"indent":[]}},{"type":"text","value":" is not usable outside of jest blocks (","position":{"start":{"line":52,"column":138,"offset":2440},"end":{"line":52,"column":177,"offset":2479},"indent":[]}},{"type":"inlineCode","value":"it","position":{"start":{"line":52,"column":177,"offset":2479},"end":{"line":52,"column":181,"offset":2483},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":52,"column":181,"offset":2483},"end":{"line":52,"column":182,"offset":2484},"indent":[]}},{"type":"inlineCode","value":"before","position":{"start":{"line":52,"column":182,"offset":2484},"end":{"line":52,"column":190,"offset":2492},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":52,"column":190,"offset":2492},"end":{"line":52,"column":191,"offset":2493},"indent":[]}},{"type":"inlineCode","value":"after","position":{"start":{"line":52,"column":191,"offset":2493},"end":{"line":52,"column":198,"offset":2500},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":52,"column":198,"offset":2500},"end":{"line":52,"column":199,"offset":2501},"indent":[]}},{"type":"inlineCode","value":"...","position":{"start":{"line":52,"column":199,"offset":2501},"end":{"line":52,"column":204,"offset":2506},"indent":[]}},{"type":"text","value":"). If you try to you'll find it to be ","position":{"start":{"line":52,"column":204,"offset":2506},"end":{"line":52,"column":242,"offset":2544},"indent":[]}},{"type":"inlineCode","value":"undefined","position":{"start":{"line":52,"column":242,"offset":2544},"end":{"line":52,"column":253,"offset":2555},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":52,"column":253,"offset":2555},"end":{"line":52,"column":254,"offset":2556},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":2303},"end":{"line":52,"column":254,"offset":2556},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"import { createTestContext } from './__helpers'\n\nconst { app } = createTestContext() // Error!","position":{"start":{"line":54,"column":1,"offset":2558},"end":{"line":58,"column":4,"offset":2662},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Test Context interface","position":{"start":{"line":60,"column":4,"offset":2667},"end":{"line":60,"column":26,"offset":2689},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2664},"end":{"line":60,"column":26,"offset":2689},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Test context interface is extensible by plugins. By default it includes basic control over the app and a GraphQL client instance ready to send queries and mutations to it.","position":{"start":{"line":62,"column":1,"offset":2691},"end":{"line":62,"column":176,"offset":2866},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":2691},"end":{"line":62,"column":176,"offset":2866},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Without a database","position":{"start":{"line":64,"column":4,"offset":2871},"end":{"line":64,"column":22,"offset":2889},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2868},"end":{"line":64,"column":22,"offset":2889},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Example","position":{"start":{"line":66,"column":3,"offset":2893},"end":{"line":66,"column":10,"offset":2900},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":2891},"end":{"line":66,"column":12,"offset":2902},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":2891},"end":{"line":66,"column":12,"offset":2902},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"import { createTestContext } from './__helpers'\n\nconst ctx = createTestContext()\n\nit('makes sure a user was registered', async () => {\n  // ctx.app.query sends requests to your locally running nexus server\n  const result = await ctx.app.query(`\n    mutation {\n      signupUser(data: { email: \"person@email.com\", password: \"123456\" })\n    } {\n      id\n      email\n      password\n    }\n  `)\n\n  const createdUsers = await ctx.app.query(`{ users { id } }`)\n  expect(createdUsers).toMatchSnapshot()\n})","position":{"start":{"line":68,"column":1,"offset":2904},"end":{"line":88,"column":4,"offset":3410},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"With a Database","position":{"start":{"line":90,"column":4,"offset":3415},"end":{"line":90,"column":19,"offset":3430},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":3412},"end":{"line":90,"column":19,"offset":3430},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Integration testing with a database can add a lot of complexity to your test suite. But Nexus is in a good position to help since it knows about both test and database domains of your app.","position":{"start":{"line":92,"column":1,"offset":3432},"end":{"line":92,"column":189,"offset":3620},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":3432},"end":{"line":92,"column":189,"offset":3620},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Integration between Nexus' test and database systems is young and still missing many features. Below we will cover some utilities and patterns that you can copy into your project meanwhile.","position":{"start":{"line":94,"column":1,"offset":3622},"end":{"line":94,"column":190,"offset":3811},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":3622},"end":{"line":94,"column":190,"offset":3811},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Note: This assumes you have ","position":{"start":{"line":96,"column":3,"offset":3815},"end":{"line":96,"column":31,"offset":3843},"indent":[]}},{"type":"link","title":null,"url":"references/recipes?id=localql","children":[{"type":"text","value":"setup a PostgreSQL database running locally","position":{"start":{"line":96,"column":32,"offset":3844},"end":{"line":96,"column":75,"offset":3887},"indent":[]}}],"position":{"start":{"line":96,"column":31,"offset":3843},"end":{"line":96,"column":107,"offset":3919},"indent":[]}},{"type":"text","value":". You could use any database supported by Prisma though.","position":{"start":{"line":96,"column":107,"offset":3919},"end":{"line":96,"column":163,"offset":3975},"indent":[]}}],"position":{"start":{"line":96,"column":3,"offset":3815},"end":{"line":96,"column":163,"offset":3975},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":3813},"end":{"line":96,"column":163,"offset":3975},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":true,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Install new development dependencies for upcoming test utilities.","position":{"start":{"line":98,"column":4,"offset":3980},"end":{"line":98,"column":69,"offset":4045},"indent":[]}}],"position":{"start":{"line":98,"column":4,"offset":3980},"end":{"line":98,"column":69,"offset":4045},"indent":[]}},{"type":"code","lang":"cli","meta":null,"value":"npm install --save-dev nanoid pg jest-environment-node","position":{"start":{"line":100,"column":4,"offset":4050},"end":{"line":102,"column":7,"offset":4121},"indent":[4,4]}}],"position":{"start":{"line":98,"column":1,"offset":3977},"end":{"line":103,"column":1,"offset":4122},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create a specialized \"jest environment\" that will manage a real database for your tests to run against.","position":{"start":{"line":104,"column":4,"offset":4126},"end":{"line":104,"column":107,"offset":4229},"indent":[]}}],"position":{"start":{"line":104,"column":4,"offset":4126},"end":{"line":104,"column":107,"offset":4229},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"// nexus-test-environment.js\nconst { Client } = require('pg')\nconst NodeEnvironment = require('jest-environment-node')\nconst { nanoid } = require('nanoid')\nconst util = require('util')\nconst exec = util.promisify(require('child_process').exec)\n\nconst prismaBinary = './node_modules/.bin/prisma'\n\n/**\n * Custom test environment for nexus and Postgres\n */\nclass PrismaTestEnvironment extends NodeEnvironment {\n  constructor(config) {\n    super(config)\n\n    // Generate a unique schema identifier for this test context\n    this.schema = `test_${nanoid()}`\n\n    // Generate the pg connection string for the test schema\n    this.connectionString = `postgres://postgres:postgres@localhost:5432/testing?schema=${this.schema}`\n  }\n\n  async setup() {\n    // Set the required environment variable to contain the connection string\n    // to our database test schema\n    process.env.POSTGRES_URL = this.connectionString\n    this.global.process.env.POSTGRES_URL = this.connectionString\n\n    // Run the migrations to ensure our schema has the required structure\n    await exec(`${prismaBinary} migrate up --experimental`)\n\n    return super.setup()\n  }\n\n  async teardown() {\n    // Drop the schema after the tests have completed\n    const client = new Client({\n      connectionString: this.connectionString,\n    })\n    await client.connect()\n    await client.query(`DROP SCHEMA IF EXISTS \"${this.schema}\" CASCADE`)\n    await client.end()\n  }\n}\n\nmodule.exports = PrismaTestEnvironment","position":{"start":{"line":106,"column":4,"offset":4234},"end":{"line":154,"column":7,"offset":5829},"indent":[4,4,4,4,4,4,1,4,1,4,4,4,4,4,4,1,4,4,1,4,4,4,1,4,4,4,4,4,1,4,4,1,4,4,1,4,4,4,4,4,4,4,4,4,4,1,4,4]}}],"position":{"start":{"line":104,"column":1,"offset":4123},"end":{"line":155,"column":1,"offset":5830},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Update your jest config to use your new test environment.","position":{"start":{"line":156,"column":4,"offset":5834},"end":{"line":156,"column":61,"offset":5891},"indent":[]}}],"position":{"start":{"line":156,"column":4,"offset":5834},"end":{"line":156,"column":61,"offset":5891},"indent":[]}},{"type":"code","lang":"diff","meta":null,"value":"+++ jest.config.ts\nconst { join } = require('path')\n\nmodule.exports = {\n  preset: 'ts-jest',\n  rootDir: 'tests',\n+ testEnvironment: join(__dirname, 'nexus-test-environment.js'),\n}","position":{"start":{"line":158,"column":4,"offset":5896},"end":{"line":167,"column":7,"offset":6111},"indent":[4,4,1,4,4,4,4,4,4]}}],"position":{"start":{"line":156,"column":1,"offset":5831},"end":{"line":168,"column":1,"offset":6112},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Edit your ","position":{"start":{"line":169,"column":4,"offset":6116},"end":{"line":169,"column":14,"offset":6126},"indent":[]}},{"type":"inlineCode","value":"schema.prisma","position":{"start":{"line":169,"column":14,"offset":6126},"end":{"line":169,"column":29,"offset":6141},"indent":[]}},{"type":"text","value":" file to use an environment variable.","position":{"start":{"line":169,"column":29,"offset":6141},"end":{"line":169,"column":66,"offset":6178},"indent":[]}}],"position":{"start":{"line":169,"column":4,"offset":6116},"end":{"line":169,"column":66,"offset":6178},"indent":[]}},{"type":"code","lang":"diff","meta":null,"value":"+++ schema.prisma\ndatasource db {\n  provider = \"postgresql\"\n-  url      = \"postresql://...\"\n+  url      = env(\"POSTGRES_URL\")\n}","position":{"start":{"line":171,"column":4,"offset":6183},"end":{"line":178,"column":7,"offset":6343},"indent":[4,4,4,4,4,4,4]}}],"position":{"start":{"line":169,"column":1,"offset":6113},"end":{"line":179,"column":1,"offset":6344},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create a ","position":{"start":{"line":180,"column":4,"offset":6348},"end":{"line":180,"column":13,"offset":6357},"indent":[]}},{"type":"inlineCode","value":".env","position":{"start":{"line":180,"column":13,"offset":6357},"end":{"line":180,"column":19,"offset":6363},"indent":[]}},{"type":"text","value":" file at the root of your project directory and add the following.","position":{"start":{"line":180,"column":19,"offset":6363},"end":{"line":180,"column":85,"offset":6429},"indent":[]}}],"position":{"start":{"line":180,"column":4,"offset":6348},"end":{"line":180,"column":85,"offset":6429},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"POSTGRES_URL=\"<your-development-postgres-url>\"","position":{"start":{"line":182,"column":4,"offset":6434},"end":{"line":184,"column":7,"offset":6494},"indent":[4,4]}}],"position":{"start":{"line":180,"column":1,"offset":6345},"end":{"line":185,"column":1,"offset":6495},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"nexus-plugin-prisma","position":{"start":{"line":186,"column":4,"offset":6499},"end":{"line":186,"column":25,"offset":6520},"indent":[]}},{"type":"text","value":" augment ","position":{"start":{"line":186,"column":25,"offset":6520},"end":{"line":186,"column":34,"offset":6529},"indent":[]}},{"type":"inlineCode","value":"TestContext['app']","position":{"start":{"line":186,"column":34,"offset":6529},"end":{"line":186,"column":54,"offset":6549},"indent":[]}},{"type":"text","value":" with a ","position":{"start":{"line":186,"column":54,"offset":6549},"end":{"line":186,"column":62,"offset":6557},"indent":[]}},{"type":"inlineCode","value":"db","position":{"start":{"line":186,"column":62,"offset":6557},"end":{"line":186,"column":66,"offset":6561},"indent":[]}},{"type":"text","value":" property. This can be used for example to seed your database with data at the beginning of a test suite:","position":{"start":{"line":186,"column":66,"offset":6561},"end":{"line":186,"column":171,"offset":6666},"indent":[]}}],"position":{"start":{"line":186,"column":4,"offset":6499},"end":{"line":186,"column":171,"offset":6666},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"beforeAll(async () => {\n  await ctx.app.db.users.createOne({ ... })\n})","position":{"start":{"line":188,"column":4,"offset":6671},"end":{"line":192,"column":7,"offset":6763},"indent":[4,4,4,4]}}],"position":{"start":{"line":186,"column":1,"offset":6496},"end":{"line":193,"column":1,"offset":6764},"indent":[1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"For now, just update the ","position":{"start":{"line":194,"column":4,"offset":6768},"end":{"line":194,"column":29,"offset":6793},"indent":[]}},{"type":"inlineCode","value":"createTestContext","position":{"start":{"line":194,"column":29,"offset":6793},"end":{"line":194,"column":48,"offset":6812},"indent":[]}},{"type":"text","value":" wrapper to integrate your app's db client:","position":{"start":{"line":194,"column":48,"offset":6812},"end":{"line":194,"column":91,"offset":6855},"indent":[]}}],"position":{"start":{"line":194,"column":4,"offset":6768},"end":{"line":194,"column":91,"offset":6855},"indent":[]}},{"type":"code","lang":"diff","meta":null,"value":"+++ nexus-test-environment.js\nafterAll(async () => {\n  await ctx.app.server.stop()\n+ await ctx.app.db.client.disconnect()\n})","position":{"start":{"line":196,"column":4,"offset":6860},"end":{"line":202,"column":7,"offset":7014},"indent":[4,4,4,4,4,4]}}],"position":{"start":{"line":194,"column":1,"offset":6765},"end":{"line":203,"column":1,"offset":7015},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"That's it. Despite adding a database to your integration tests, they are essentially no more complex than without a databse, which is great. Of course they will run a bit slower now.","position":{"start":{"line":204,"column":4,"offset":7019},"end":{"line":204,"column":186,"offset":7201},"indent":[]}}],"position":{"start":{"line":204,"column":4,"offset":7019},"end":{"line":204,"column":186,"offset":7201},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We will cover seeding your test database with data in in the future iteration of this guide.","position":{"start":{"line":206,"column":4,"offset":7206},"end":{"line":206,"column":96,"offset":7298},"indent":[]}}],"position":{"start":{"line":206,"column":4,"offset":7206},"end":{"line":206,"column":96,"offset":7298},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"// tests/user.test.ts\n\nimport { createTestContext } from './__helpers'\n\nconst ctx = createTestContext()\n\nit('makes sure a user was registered', async () => {\n  // ctx.app.query sends requests to your locally running nexus server\n  const result = await ctx.app.query(`\n    mutation {\n      signupUser(data: { email: \"person@email.com\", password: \"123456\" })\n    } {\n      id\n      email\n      password\n    }\n  `)\n\n  const createdUsers = await ctx.app.query(`{ users { id } }`)\n  expect(createdUsers).toMatchSnapshot()\n})","position":{"start":{"line":208,"column":4,"offset":7303},"end":{"line":230,"column":7,"offset":7886},"indent":[4,1,4,1,4,1,4,4,4,4,4,4,4,4,4,4,4,1,4,4,4,4]}}],"position":{"start":{"line":204,"column":1,"offset":7016},"end":{"line":230,"column":7,"offset":7886},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":98,"column":1,"offset":3977},"end":{"line":230,"column":7,"offset":7886},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Testing\",\"metaTitle\":\"Testing\",\"metaDescription\":\"TODO\"}","position":{"start":{"line":233,"column":1,"offset":7889},"end":{"line":233,"column":95,"offset":7983},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":233,"column":95,"offset":7983}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Testing\",\n  \"metaTitle\": \"Testing\",\n  \"metaDescription\": \"TODO\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Testing is a first-class concern of Nexus. So far we ship a few primitives to help you run integration tests, but you can expect integrated higher level testing features in the future.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: This guide is written using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://jestjs.io/\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"jest\")), \" because it is what we use internally and thus can speak to best. But you should be able to use your test framework of choice.\")), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"meet-the-module\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#meet-the-module\",\n    \"aria-label\": \"meet the module permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Meet the Module\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Nexus comes with a special testing module that you can import from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nexus/testing\"), \". Its primary utility is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createTestContext\"), \" function. It is designed for running \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"integration\"), \" tests. When run it will in turn boot your app (in the same process) and expose an interface for your tests to interact with it.\"), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"For the curious...\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest\"), \" runs test suites in parallel it means multiple instances of your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app\"), \" will be run in parallel too. The testing module takes care of abstracting the mechanics of making this work from you. For example it assigns random ports to each app to run its server and makes sure each test suite's app client is configured to be talking with its respective app instance. You should \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"never\"), \" have to think about these kinds of details though, and if it turns out you do please open a GitHub issue so we can try to seal the leak you've found in Nexus' abstraction!\")), mdx(\"section\", {\n    parentName: \"section\"\n  }, mdx(\"h5\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"a-little-helper-docsify-ignore\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"href\": \"#a-little-helper-docsify-ignore\",\n    \"aria-label\": \"a little helper docsify ignore permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"A Little Helper {docsify-ignore}\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Before jumping into test suites we will wrap the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createTestContext\"), \" with a pattern that more tightly integrates it into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest\"), \". Nexus will probably ship something like as follows or better in the future, but for now you can copy this into your projects:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// tests/__helpers.ts\\nimport { createTestContext as originalCreateTestContext, TestContext } from 'nexus/testing'\\n\\nexport function createTestContext(): TestContext {\\n  let ctx = {} as TestContext\\n\\n  beforeAll(async () => {\\n    Object.assign(ctx, await originalCreateTestContext())\\n    await ctx.app.start()\\n  })\\n\\n  afterAll(async () => {\\n    await ctx.app.stop()\\n  })\\n\\n  return ctx\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We'll use this in other test suites roughly like so:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// tests/foo.spec.ts\\nimport { createTestContext } from './__helpers'\\n\\nconst ctx = createTestContext()\\n\\nit('foo', () => {\\n  // use `ctx` in here\\n})\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Removing boilerplate away from your test code is a win and staying DRY about it across multiple test suites helps. But do note that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ctx\"), \" is not usable outside of jest blocks (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"it\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"before\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"after\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"...\"), \"). If you try to you'll find it to be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undefined\"), \".\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { createTestContext } from './__helpers'\\n\\nconst { app } = createTestContext() // Error!\\n\")))), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"test-context-interface\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#test-context-interface\",\n    \"aria-label\": \"test context interface permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Test Context interface\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The Test context interface is extensible by plugins. By default it includes basic control over the app and a GraphQL client instance ready to send queries and mutations to it.\")), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"without-a-database\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#without-a-database\",\n    \"aria-label\": \"without a database permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Without a database\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Example\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { createTestContext } from './__helpers'\\n\\nconst ctx = createTestContext()\\n\\nit('makes sure a user was registered', async () => {\\n  // ctx.app.query sends requests to your locally running nexus server\\n  const result = await ctx.app.query(`\\n    mutation {\\n      signupUser(data: { email: \\\"person@email.com\\\", password: \\\"123456\\\" })\\n    } {\\n      id\\n      email\\n      password\\n    }\\n  `)\\n\\n  const createdUsers = await ctx.app.query(`{ users { id } }`)\\n  expect(createdUsers).toMatchSnapshot()\\n})\\n\"))), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"with-a-database\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#with-a-database\",\n    \"aria-label\": \"with a database permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"With a Database\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Integration testing with a database can add a lot of complexity to your test suite. But Nexus is in a good position to help since it knows about both test and database domains of your app.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Integration between Nexus' test and database systems is young and still missing many features. Below we will cover some utilities and patterns that you can copy into your project meanwhile.\"), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: This assumes you have \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"references/recipes?id=localql\"\n  }), \"setup a PostgreSQL database running locally\"), \". You could use any database supported by Prisma though.\")), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Install new development dependencies for upcoming test utilities.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cli\"\n  }), \"npm install --save-dev nanoid pg jest-environment-node\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create a specialized \\\"jest environment\\\" that will manage a real database for your tests to run against.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// nexus-test-environment.js\\nconst { Client } = require('pg')\\nconst NodeEnvironment = require('jest-environment-node')\\nconst { nanoid } = require('nanoid')\\nconst util = require('util')\\nconst exec = util.promisify(require('child_process').exec)\\n\\nconst prismaBinary = './node_modules/.bin/prisma'\\n\\n/**\\n * Custom test environment for nexus and Postgres\\n */\\nclass PrismaTestEnvironment extends NodeEnvironment {\\n  constructor(config) {\\n    super(config)\\n\\n    // Generate a unique schema identifier for this test context\\n    this.schema = `test_${nanoid()}`\\n\\n    // Generate the pg connection string for the test schema\\n    this.connectionString = `postgres://postgres:postgres@localhost:5432/testing?schema=${this.schema}`\\n  }\\n\\n  async setup() {\\n    // Set the required environment variable to contain the connection string\\n    // to our database test schema\\n    process.env.POSTGRES_URL = this.connectionString\\n    this.global.process.env.POSTGRES_URL = this.connectionString\\n\\n    // Run the migrations to ensure our schema has the required structure\\n    await exec(`${prismaBinary} migrate up --experimental`)\\n\\n    return super.setup()\\n  }\\n\\n  async teardown() {\\n    // Drop the schema after the tests have completed\\n    const client = new Client({\\n      connectionString: this.connectionString,\\n    })\\n    await client.connect()\\n    await client.query(`DROP SCHEMA IF EXISTS \\\"${this.schema}\\\" CASCADE`)\\n    await client.end()\\n  }\\n}\\n\\nmodule.exports = PrismaTestEnvironment\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Update your jest config to use your new test environment.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"+++ jest.config.ts\\nconst { join } = require('path')\\n\\nmodule.exports = {\\n  preset: 'ts-jest',\\n  rootDir: 'tests',\\n+ testEnvironment: join(__dirname, 'nexus-test-environment.js'),\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Edit your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"schema.prisma\"), \" file to use an environment variable.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"+++ schema.prisma\\ndatasource db {\\n  provider = \\\"postgresql\\\"\\n-  url      = \\\"postresql://...\\\"\\n+  url      = env(\\\"POSTGRES_URL\\\")\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".env\"), \" file at the root of your project directory and add the following.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"POSTGRES_URL=\\\"<your-development-postgres-url>\\\"\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nexus-plugin-prisma\"), \" augment \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestContext['app']\"), \" with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db\"), \" property. This can be used for example to seed your database with data at the beginning of a test suite:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"beforeAll(async () => {\\n  await ctx.app.db.users.createOne({ ... })\\n})\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For now, just update the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createTestContext\"), \" wrapper to integrate your app's db client:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"+++ nexus-test-environment.js\\nafterAll(async () => {\\n  await ctx.app.server.stop()\\n+ await ctx.app.db.client.disconnect()\\n})\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"That's it. Despite adding a database to your integration tests, they are essentially no more complex than without a databse, which is great. Of course they will run a bit slower now.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"We will cover seeding your test database with data in in the future iteration of this guide.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// tests/user.test.ts\\n\\nimport { createTestContext } from './__helpers'\\n\\nconst ctx = createTestContext()\\n\\nit('makes sure a user was registered', async () => {\\n  // ctx.app.query sends requests to your locally running nexus server\\n  const result = await ctx.app.query(`\\n    mutation {\\n      signupUser(data: { email: \\\"person@email.com\\\", password: \\\"123456\\\" })\\n    } {\\n      id\\n      email\\n      password\\n    }\\n  `)\\n\\n  const createdUsers = await ctx.app.query(`{ users { id } }`)\\n  expect(createdUsers).toMatchSnapshot()\\n})\\n\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Testing\",\n  \"metaTitle\": \"Testing\",\n  \"metaDescription\": \"TODO\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Testing is a first-class concern of Nexus. So far we ship a few primitives to help you run integration tests, but you can expect integrated higher level testing features in the future.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: This guide is written using `}<a parentName=\"p\" {...{\n          \"href\": \"https://jestjs.io/\"\n        }}><inlineCode parentName=\"a\">{`jest`}</inlineCode></a>{` because it is what we use internally and thus can speak to best. But you should be able to use your test framework of choice.`}</p>\n    </blockquote>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"meet-the-module\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#meet-the-module\",\n          \"aria-label\": \"meet the module permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Meet the Module`}</h2><p parentName=\"section\">{`Nexus comes with a special testing module that you can import from `}<inlineCode parentName=\"p\">{`nexus/testing`}</inlineCode>{`. Its primary utility is the `}<inlineCode parentName=\"p\">{`createTestContext`}</inlineCode>{` function. It is designed for running `}<em parentName=\"p\">{`integration`}</em>{` tests. When run it will in turn boot your app (in the same process) and expose an interface for your tests to interact with it.`}</p>{\n        /* TODO would be nice to have the TS type shown here. Use doc extraction system to do this. */\n      }<blockquote parentName=\"section\">\n        <p parentName=\"blockquote\">{`For the curious...`}<br parentName=\"p\"></br>{`\n`}{`Since `}<inlineCode parentName=\"p\">{`jest`}</inlineCode>{` runs test suites in parallel it means multiple instances of your `}<inlineCode parentName=\"p\">{`app`}</inlineCode>{` will be run in parallel too. The testing module takes care of abstracting the mechanics of making this work from you. For example it assigns random ports to each app to run its server and makes sure each test suite's app client is configured to be talking with its respective app instance. You should `}<em parentName=\"p\">{`never`}</em>{` have to think about these kinds of details though, and if it turns out you do please open a GitHub issue so we can try to seal the leak you've found in Nexus' abstraction!`}</p>\n      </blockquote><section parentName=\"section\"><h5 parentName=\"section\" {...{\n          \"id\": \"a-little-helper-docsify-ignore\",\n          \"style\": {\n            \"position\": \"relative\"\n          }\n        }}><a parentName=\"h5\" {...{\n            \"href\": \"#a-little-helper-docsify-ignore\",\n            \"aria-label\": \"a little helper docsify ignore permalink\",\n            \"className\": \"title-link before\"\n          }}><svg parentName=\"a\" {...{\n              \"width\": \"17\",\n              \"height\": \"18\",\n              \"viewBox\": \"0 0 17 18\",\n              \"fill\": \"none\",\n              \"xmlns\": \"http://www.w3.org/2000/svg\"\n            }}>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 6.33337H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M1.5 11.6666H15.5\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M6.75 1L5 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}<path parentName=\"svg\" {...{\n                \"d\": \"M12 1L10.25 17\",\n                \"stroke\": \"#CBD5E0\",\n                \"strokeWidth\": \"2\",\n                \"strokeLineCap\": \"round\",\n                \"strokeLineJoin\": \"round\"\n              }}></path>{`\n      `}</svg></a>{`A Little Helper {docsify-ignore}`}</h5><p parentName=\"section\">{`Before jumping into test suites we will wrap the `}<inlineCode parentName=\"p\">{`createTestContext`}</inlineCode>{` with a pattern that more tightly integrates it into `}<inlineCode parentName=\"p\">{`jest`}</inlineCode>{`. Nexus will probably ship something like as follows or better in the future, but for now you can copy this into your projects:`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}>{`// tests/__helpers.ts\nimport { createTestContext as originalCreateTestContext, TestContext } from 'nexus/testing'\n\nexport function createTestContext(): TestContext {\n  let ctx = {} as TestContext\n\n  beforeAll(async () => {\n    Object.assign(ctx, await originalCreateTestContext())\n    await ctx.app.start()\n  })\n\n  afterAll(async () => {\n    await ctx.app.stop()\n  })\n\n  return ctx\n}\n`}</code></pre><p parentName=\"section\">{`We'll use this in other test suites roughly like so:`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}>{`// tests/foo.spec.ts\nimport { createTestContext } from './__helpers'\n\nconst ctx = createTestContext()\n\nit('foo', () => {\n  // use \\`ctx\\` in here\n})\n`}</code></pre><p parentName=\"section\">{`Removing boilerplate away from your test code is a win and staying DRY about it across multiple test suites helps. But do note that `}<inlineCode parentName=\"p\">{`ctx`}</inlineCode>{` is not usable outside of jest blocks (`}<inlineCode parentName=\"p\">{`it`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`before`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`after`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`...`}</inlineCode>{`). If you try to you'll find it to be `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{`.`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}>{`import { createTestContext } from './__helpers'\n\nconst { app } = createTestContext() // Error!\n`}</code></pre></section></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"test-context-interface\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#test-context-interface\",\n          \"aria-label\": \"test context interface permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Test Context interface`}</h2><p parentName=\"section\">{`The Test context interface is extensible by plugins. By default it includes basic control over the app and a GraphQL client instance ready to send queries and mutations to it.`}</p></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"without-a-database\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#without-a-database\",\n          \"aria-label\": \"without a database permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Without a database`}</h2><p parentName=\"section\"><strong parentName=\"p\">{`Example`}</strong></p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-ts\"\n        }}>{`import { createTestContext } from './__helpers'\n\nconst ctx = createTestContext()\n\nit('makes sure a user was registered', async () => {\n  // ctx.app.query sends requests to your locally running nexus server\n  const result = await ctx.app.query(\\`\n    mutation {\n      signupUser(data: { email: \"person@email.com\", password: \"123456\" })\n    } {\n      id\n      email\n      password\n    }\n  \\`)\n\n  const createdUsers = await ctx.app.query(\\`{ users { id } }\\`)\n  expect(createdUsers).toMatchSnapshot()\n})\n`}</code></pre></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"with-a-database\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#with-a-database\",\n          \"aria-label\": \"with a database permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`With a Database`}</h2><p parentName=\"section\">{`Integration testing with a database can add a lot of complexity to your test suite. But Nexus is in a good position to help since it knows about both test and database domains of your app.`}</p><p parentName=\"section\">{`Integration between Nexus' test and database systems is young and still missing many features. Below we will cover some utilities and patterns that you can copy into your project meanwhile.`}</p><blockquote parentName=\"section\">\n        <p parentName=\"blockquote\">{`Note: This assumes you have `}<a parentName=\"p\" {...{\n            \"href\": \"references/recipes?id=localql\"\n          }}>{`setup a PostgreSQL database running locally`}</a>{`. You could use any database supported by Prisma though.`}</p>\n      </blockquote><ol parentName=\"section\">\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`Install new development dependencies for upcoming test utilities.`}</p>\n          <pre parentName=\"li\"><code parentName=\"pre\" {...{\n              \"className\": \"language-cli\"\n            }}>{`npm install --save-dev nanoid pg jest-environment-node\n`}</code></pre>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`Create a specialized \"jest environment\" that will manage a real database for your tests to run against.`}</p>\n          <pre parentName=\"li\"><code parentName=\"pre\" {...{\n              \"className\": \"language-ts\"\n            }}>{`// nexus-test-environment.js\nconst { Client } = require('pg')\nconst NodeEnvironment = require('jest-environment-node')\nconst { nanoid } = require('nanoid')\nconst util = require('util')\nconst exec = util.promisify(require('child_process').exec)\n\nconst prismaBinary = './node_modules/.bin/prisma'\n\n/**\n * Custom test environment for nexus and Postgres\n */\nclass PrismaTestEnvironment extends NodeEnvironment {\n  constructor(config) {\n    super(config)\n\n    // Generate a unique schema identifier for this test context\n    this.schema = \\`test_\\${nanoid()}\\`\n\n    // Generate the pg connection string for the test schema\n    this.connectionString = \\`postgres://postgres:postgres@localhost:5432/testing?schema=\\${this.schema}\\`\n  }\n\n  async setup() {\n    // Set the required environment variable to contain the connection string\n    // to our database test schema\n    process.env.POSTGRES_URL = this.connectionString\n    this.global.process.env.POSTGRES_URL = this.connectionString\n\n    // Run the migrations to ensure our schema has the required structure\n    await exec(\\`\\${prismaBinary} migrate up --experimental\\`)\n\n    return super.setup()\n  }\n\n  async teardown() {\n    // Drop the schema after the tests have completed\n    const client = new Client({\n      connectionString: this.connectionString,\n    })\n    await client.connect()\n    await client.query(\\`DROP SCHEMA IF EXISTS \"\\${this.schema}\" CASCADE\\`)\n    await client.end()\n  }\n}\n\nmodule.exports = PrismaTestEnvironment\n`}</code></pre>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`Update your jest config to use your new test environment.`}</p>\n          <pre parentName=\"li\"><code parentName=\"pre\" {...{\n              \"className\": \"language-diff\"\n            }}>{`+++ jest.config.ts\nconst { join } = require('path')\n\nmodule.exports = {\n  preset: 'ts-jest',\n  rootDir: 'tests',\n+ testEnvironment: join(__dirname, 'nexus-test-environment.js'),\n}\n`}</code></pre>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`Edit your `}<inlineCode parentName=\"p\">{`schema.prisma`}</inlineCode>{` file to use an environment variable.`}</p>\n          <pre parentName=\"li\"><code parentName=\"pre\" {...{\n              \"className\": \"language-diff\"\n            }}>{`+++ schema.prisma\ndatasource db {\n  provider = \"postgresql\"\n-  url      = \"postresql://...\"\n+  url      = env(\"POSTGRES_URL\")\n}\n`}</code></pre>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`Create a `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file at the root of your project directory and add the following.`}</p>\n          <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`POSTGRES_URL=\"<your-development-postgres-url>\"\n`}</code></pre>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\"><inlineCode parentName=\"p\">{`nexus-plugin-prisma`}</inlineCode>{` augment `}<inlineCode parentName=\"p\">{`TestContext['app']`}</inlineCode>{` with a `}<inlineCode parentName=\"p\">{`db`}</inlineCode>{` property. This can be used for example to seed your database with data at the beginning of a test suite:`}</p>\n          <pre parentName=\"li\"><code parentName=\"pre\" {...{\n              \"className\": \"language-ts\"\n            }}>{`beforeAll(async () => {\n  await ctx.app.db.users.createOne({ ... })\n})\n`}</code></pre>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`For now, just update the `}<inlineCode parentName=\"p\">{`createTestContext`}</inlineCode>{` wrapper to integrate your app's db client:`}</p>\n          <pre parentName=\"li\"><code parentName=\"pre\" {...{\n              \"className\": \"language-diff\"\n            }}>{`+++ nexus-test-environment.js\nafterAll(async () => {\n  await ctx.app.server.stop()\n+ await ctx.app.db.client.disconnect()\n})\n`}</code></pre>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`That's it. Despite adding a database to your integration tests, they are essentially no more complex than without a databse, which is great. Of course they will run a bit slower now.`}</p>\n          <p parentName=\"li\">{`We will cover seeding your test database with data in in the future iteration of this guide.`}</p>\n          <pre parentName=\"li\"><code parentName=\"pre\" {...{\n              \"className\": \"language-ts\"\n            }}>{`// tests/user.test.ts\n\nimport { createTestContext } from './__helpers'\n\nconst ctx = createTestContext()\n\nit('makes sure a user was registered', async () => {\n  // ctx.app.query sends requests to your locally running nexus server\n  const result = await ctx.app.query(\\`\n    mutation {\n      signupUser(data: { email: \"person@email.com\", password: \"123456\" })\n    } {\n      id\n      email\n      password\n    }\n  \\`)\n\n  const createdUsers = await ctx.app.query(\\`{ users { id } }\\`)\n  expect(createdUsers).toMatchSnapshot()\n})\n`}</code></pre>\n        </li>\n      </ol></section>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}