{"expireTime":9007200846028969000,"key":"gatsby-plugin-mdx-entire-payload-5efbb70d96117421d6108e1ce2d04b14-","val":{"mdast":{"type":"root","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"For this tutorial we will use PostgreSQL as our database. Install PostgreSQL if needed and then get its connection URL. Check out ","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":133,"offset":133},"indent":[]}},{"type":"link","title":null,"url":"references/recipes?id=localql","children":[{"type":"text","value":"our postgresql setup guide","position":{"start":{"line":2,"column":134,"offset":134},"end":{"line":2,"column":160,"offset":160},"indent":[]}}],"position":{"start":{"line":2,"column":133,"offset":133},"end":{"line":2,"column":192,"offset":192},"indent":[]}},{"type":"text","value":" if unsure.","position":{"start":{"line":2,"column":192,"offset":192},"end":{"line":2,"column":203,"offset":203},"indent":[]}}],"position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":203,"offset":203},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":203,"offset":203},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Scaffold Project","position":{"start":{"line":4,"column":4,"offset":208},"end":{"line":4,"column":20,"offset":224},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":205},"end":{"line":4,"column":20,"offset":224},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Kick off a new project. Say yes (","position":{"start":{"line":6,"column":1,"offset":226},"end":{"line":6,"column":34,"offset":259},"indent":[]}},{"type":"inlineCode","value":"y","position":{"start":{"line":6,"column":34,"offset":259},"end":{"line":6,"column":37,"offset":262},"indent":[]}},{"type":"text","value":") to the prisma option. Choose ","position":{"start":{"line":6,"column":37,"offset":262},"end":{"line":6,"column":68,"offset":293},"indent":[]}},{"type":"inlineCode","value":"PostgreSQL","position":{"start":{"line":6,"column":68,"offset":293},"end":{"line":6,"column":80,"offset":305},"indent":[]}},{"type":"text","value":" for the db option.","position":{"start":{"line":6,"column":80,"offset":305},"end":{"line":6,"column":99,"offset":324},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":226},"end":{"line":6,"column":99,"offset":324},"indent":[]}},{"type":"code","lang":"cli","meta":null,"value":"npx nexus","position":{"start":{"line":8,"column":1,"offset":326},"end":{"line":10,"column":4,"offset":346},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Change the Data Layer","position":{"start":{"line":12,"column":4,"offset":351},"end":{"line":12,"column":25,"offset":372},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":348},"end":{"line":12,"column":25,"offset":372},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Our Hello World schema doesn't account for information about moons, lets change that.","position":{"start":{"line":14,"column":1,"offset":374},"end":{"line":14,"column":86,"offset":459},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":374},"end":{"line":14,"column":86,"offset":459},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Start by updating our data layer to model information about moons. We don't want to go crazy scientific here but a bit of modelling will serve us well. A world may have more than one moon, and a moon may have properites in its own right. So lets give moons a first class model representation. Then, we can connect them to their respective worlds:","position":{"start":{"line":16,"column":1,"offset":461},"end":{"line":16,"column":347,"offset":807},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":461},"end":{"line":16,"column":347,"offset":807},"indent":[]}},{"type":"code","lang":"diff","meta":null,"value":"+++ prisma/schema.prisma\n  model World {\n    id         Int    @id\n    name       String @unique\n    population Float\n+   moons      Moon[]\n  }\n\n+ model Moon {\n+   worldId Int    @id @default(autoincrement())\n+   name    String\n+   world   World  @relation(fields: [worldId], references: [id])\n+ }","position":{"start":{"line":18,"column":1,"offset":809},"end":{"line":32,"column":4,"offset":1118},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Nexus reacts to changes in your Prisma schema. By saving the above, you will see a prompt in dev mode about applying your database changes.","position":{"start":{"line":34,"column":1,"offset":1120},"end":{"line":34,"column":140,"offset":1259},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1120},"end":{"line":34,"column":140,"offset":1259},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"   0 ● nexus:plugin:nexus-plugin-prisma We detected a change in your Prisma Schema file.\n   0 ● nexus:plugin:nexus-plugin-prisma If you're using Prisma Migrate, follow the step below:\n   0 ● nexus:plugin:nexus-plugin-prisma 1. Run yarn -s prisma migrate save --experimental to create a migration file.\n   0 ● nexus:plugin:nexus-plugin-prisma 2. Run yarn -s prisma migrate up --experimental to apply your migration.\n? Press Y to restart once your migration is applied › (Y)","position":{"start":{"line":36,"column":1,"offset":1261},"end":{"line":42,"column":4,"offset":1741},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Once done, you can move on to updating your API layer.","position":{"start":{"line":44,"column":1,"offset":1743},"end":{"line":44,"column":55,"offset":1797},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1743},"end":{"line":44,"column":55,"offset":1797},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Change the API Layer","position":{"start":{"line":46,"column":4,"offset":1802},"end":{"line":46,"column":24,"offset":1822},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1799},"end":{"line":46,"column":24,"offset":1822},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We have data about ","position":{"start":{"line":48,"column":1,"offset":1824},"end":{"line":48,"column":20,"offset":1843},"indent":[]}},{"type":"inlineCode","value":"Earth","position":{"start":{"line":48,"column":20,"offset":1843},"end":{"line":48,"column":27,"offset":1850},"indent":[]}},{"type":"text","value":" from before, but now we need to update it with information about its moon. Instead of working with Prisma Client inside one-off scripts, lets enhance our API and make the update as if a client app were.","position":{"start":{"line":48,"column":27,"offset":1850},"end":{"line":48,"column":230,"offset":2053},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1824},"end":{"line":48,"column":230,"offset":2053},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We're going to need to expose the ","position":{"start":{"line":50,"column":1,"offset":2055},"end":{"line":50,"column":35,"offset":2089},"indent":[]}},{"type":"inlineCode","value":"moons","position":{"start":{"line":50,"column":35,"offset":2089},"end":{"line":50,"column":42,"offset":2096},"indent":[]}},{"type":"text","value":" world field to clients","position":{"start":{"line":50,"column":42,"offset":2096},"end":{"line":50,"column":65,"offset":2119},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":2055},"end":{"line":50,"column":65,"offset":2119},"indent":[]}},{"type":"code","lang":"diff","meta":null,"value":"+++ api/graphql.ts\n  schema.objectType({\n    name: \"World\",\n    definition(t) {\n      t.model.worldId()\n      t.model.name()\n      t.model.population()\n+     t.model.moons()\n    }\n  })","position":{"start":{"line":52,"column":1,"offset":2121},"end":{"line":63,"column":4,"offset":2317},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Upon doing this however, we will see a warning in our dev mode logs:","position":{"start":{"line":65,"column":1,"offset":2319},"end":{"line":65,"column":69,"offset":2387},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":2319},"end":{"line":65,"column":69,"offset":2387},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" Warning: Your GraphQL `World` object definition is projecting a field `moons` with `Moon` as output type, but `Moon` is not defined in your GraphQL Schema\n Warning: in /Users/jasonkuhrt/foobar/api/graphql.ts:10:13\n\n   6 definition(t) {\n   7 t.model.id();\n   8 t.model.name();\n   9 t.model.population();\n → 10 t.model.moons();","position":{"start":{"line":67,"column":1,"offset":2389},"end":{"line":76,"column":4,"offset":2723},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The feedback is pretty clear already but to restate: The problem is that we're projecting a Prisma model field (","position":{"start":{"line":78,"column":1,"offset":2725},"end":{"line":78,"column":113,"offset":2837},"indent":[]}},{"type":"inlineCode","value":"moons","position":{"start":{"line":78,"column":113,"offset":2837},"end":{"line":78,"column":120,"offset":2844},"indent":[]}},{"type":"text","value":") that is a connection to another Prisma model (","position":{"start":{"line":78,"column":120,"offset":2844},"end":{"line":78,"column":168,"offset":2892},"indent":[]}},{"type":"inlineCode","value":"Moon","position":{"start":{"line":78,"column":168,"offset":2892},"end":{"line":78,"column":174,"offset":2898},"indent":[]}},{"type":"text","value":") that has not been projected on our API layer. So let's do that now:","position":{"start":{"line":78,"column":174,"offset":2898},"end":{"line":78,"column":243,"offset":2967},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":2725},"end":{"line":78,"column":243,"offset":2967},"indent":[]}},{"type":"code","lang":"diff","meta":null,"value":"+++ api/graphql.ts\n+schema.objectType({\n+  name:'Moon',\n+  definition(t){\n+    t.model.id()\n+    t.model.name()\n+    t.model.world()\n+   }\n+})","position":{"start":{"line":80,"column":1,"offset":2969},"end":{"line":90,"column":4,"offset":3123},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Do not copy-paste. Instead type this out yourself and take note how autcompletion within the ","position":{"start":{"line":92,"column":1,"offset":3125},"end":{"line":92,"column":94,"offset":3218},"indent":[]}},{"type":"inlineCode","value":"definition","position":{"start":{"line":92,"column":94,"offset":3218},"end":{"line":92,"column":106,"offset":3230},"indent":[]}},{"type":"text","value":" block on ","position":{"start":{"line":92,"column":106,"offset":3230},"end":{"line":92,"column":116,"offset":3240},"indent":[]}},{"type":"inlineCode","value":"t.model","position":{"start":{"line":92,"column":116,"offset":3240},"end":{"line":92,"column":125,"offset":3249},"indent":[]}},{"type":"text","value":" effectively guides you to success.","position":{"start":{"line":92,"column":125,"offset":3249},"end":{"line":92,"column":160,"offset":3284},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":3125},"end":{"line":92,"column":160,"offset":3284},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once you have projected ","position":{"start":{"line":94,"column":1,"offset":3286},"end":{"line":94,"column":25,"offset":3310},"indent":[]}},{"type":"inlineCode","value":"Moon","position":{"start":{"line":94,"column":25,"offset":3310},"end":{"line":94,"column":31,"offset":3316},"indent":[]}},{"type":"text","value":" from your data layer to your API layer, you will see that the dev mode warning and TypeScript error are now resolved. 🙌","position":{"start":{"line":94,"column":31,"offset":3316},"end":{"line":94,"column":152,"offset":3437},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":3286},"end":{"line":94,"column":152,"offset":3437},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Add Some CRUD","position":{"start":{"line":96,"column":4,"offset":3442},"end":{"line":96,"column":17,"offset":3455},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":3439},"end":{"line":96,"column":17,"offset":3455},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you go to your GraphQL Playground now you will see that your GraphQL schema now contains your Moon data shape too. But of course we still need to update ","position":{"start":{"line":98,"column":1,"offset":3457},"end":{"line":98,"column":157,"offset":3613},"indent":[]}},{"type":"inlineCode","value":"Earth","position":{"start":{"line":98,"column":157,"offset":3613},"end":{"line":98,"column":164,"offset":3620},"indent":[]}},{"type":"text","value":" with data about ","position":{"start":{"line":98,"column":164,"offset":3620},"end":{"line":98,"column":181,"offset":3637},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"its","position":{"start":{"line":98,"column":182,"offset":3638},"end":{"line":98,"column":185,"offset":3641},"indent":[]}}],"position":{"start":{"line":98,"column":181,"offset":3637},"end":{"line":98,"column":186,"offset":3642},"indent":[]}},{"type":"text","value":" moon. To achieve that we're going to expose CRUD actions that clients can use to update ","position":{"start":{"line":98,"column":186,"offset":3642},"end":{"line":98,"column":275,"offset":3731},"indent":[]}},{"type":"inlineCode","value":"Earth","position":{"start":{"line":98,"column":275,"offset":3731},"end":{"line":98,"column":282,"offset":3738},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":98,"column":282,"offset":3738},"end":{"line":98,"column":283,"offset":3739},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":3457},"end":{"line":98,"column":283,"offset":3739},"indent":[]}},{"type":"code","lang":"diff","meta":null,"value":"+++ api/graphql.ts\n+schema.mutationType({\n+  definition(t){\n+    t.crud.updateOneWorld()\n+  }\n+})","position":{"start":{"line":100,"column":1,"offset":3741},"end":{"line":107,"column":4,"offset":3850},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Again do not copy-paste. Type this out and see how it feels. Notice how auto-completion guides you from start to finish.","position":{"start":{"line":109,"column":1,"offset":3852},"end":{"line":109,"column":121,"offset":3972},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":3852},"end":{"line":109,"column":121,"offset":3972},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If we go back to our schema in GraphQL Playground now, we'll see a significant number of additions to the schema, a result of the CRUD features we've just enabled.","position":{"start":{"line":111,"column":1,"offset":3974},"end":{"line":111,"column":164,"offset":4137},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":3974},"end":{"line":111,"column":164,"offset":4137},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now, let's give ","position":{"start":{"line":113,"column":1,"offset":4139},"end":{"line":113,"column":17,"offset":4155},"indent":[]}},{"type":"inlineCode","value":"Earth","position":{"start":{"line":113,"column":17,"offset":4155},"end":{"line":113,"column":24,"offset":4162},"indent":[]}},{"type":"text","value":" its moon!","position":{"start":{"line":113,"column":24,"offset":4162},"end":{"line":113,"column":34,"offset":4172},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":4139},"end":{"line":113,"column":34,"offset":4172},"indent":[]}},{"type":"code","lang":"graphql","meta":null,"value":"mutation addMoonToEarth {\n  updateOneWorld(where: { name: \"Earth\" }, data: { moons: { create: { name: \"moon\" } } }) {\n    name\n    moons {\n      name\n    }\n  }\n}","position":{"start":{"line":115,"column":1,"offset":4174},"end":{"line":124,"column":4,"offset":4350},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You should see a result like:","position":{"start":{"line":126,"column":1,"offset":4352},"end":{"line":126,"column":30,"offset":4381},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":4352},"end":{"line":126,"column":30,"offset":4381},"indent":[]}},{"type":"code","lang":"json","meta":null,"value":"{\n  \"data\": {\n    \"updateOneWorld\": {\n      \"name\": \"Earth\",\n      \"moons\": [\n        {\n          \"name\": \"moon\"\n        }\n      ]\n    }\n  }\n}","position":{"start":{"line":128,"column":1,"offset":4383},"end":{"line":141,"column":4,"offset":4537},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Deploy","position":{"start":{"line":143,"column":4,"offset":4542},"end":{"line":143,"column":10,"offset":4548},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":4539},"end":{"line":143,"column":10,"offset":4548},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We will Deploy to Heroku.","position":{"start":{"line":145,"column":1,"offset":4550},"end":{"line":145,"column":26,"offset":4575},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":4550},"end":{"line":145,"column":26,"offset":4575},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before deploying let's change the playground server setting such that Playground will be enabled in production.","position":{"start":{"line":147,"column":1,"offset":4577},"end":{"line":147,"column":112,"offset":4688},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":4577},"end":{"line":147,"column":112,"offset":4688},"indent":[]}},{"type":"jsx","value":"<p class=\"NextIs Warn\" />","position":{"start":{"line":149,"column":1,"offset":4690},"end":{"line":149,"column":26,"offset":4715},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"We're doing this so we can easily try out our deployed app. Neither the GraphQL Playground UI nor the GraphQL API itself are secured. This is not intended to demonstrate a production-ready setup.","position":{"start":{"line":151,"column":3,"offset":4719},"end":{"line":151,"column":198,"offset":4914},"indent":[]}}],"position":{"start":{"line":151,"column":3,"offset":4719},"end":{"line":151,"column":198,"offset":4914},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":4717},"end":{"line":151,"column":198,"offset":4914},"indent":[]}},{"type":"code","lang":"diff","meta":null,"value":"+++ api/app.ts\n+ import { settings, use } from 'nexus'\nimport { prisma } from 'nexus-plugin-prisma'\n\nuse(prisma())\n\n+settings.change({\n+  server: {\n+    playground: true\n+  }\n+})","position":{"start":{"line":153,"column":1,"offset":4916},"end":{"line":165,"column":4,"offset":5106},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then, create an account at ","position":{"start":{"line":167,"column":1,"offset":5108},"end":{"line":167,"column":28,"offset":5135},"indent":[]}},{"type":"link","title":null,"url":"https://www.heroku.com/","children":[{"type":"text","value":"Heroku","position":{"start":{"line":167,"column":29,"offset":5136},"end":{"line":167,"column":35,"offset":5142},"indent":[]}}],"position":{"start":{"line":167,"column":28,"offset":5135},"end":{"line":167,"column":61,"offset":5168},"indent":[]}},{"type":"text","value":" (if you don't already have one) and ","position":{"start":{"line":167,"column":61,"offset":5168},"end":{"line":167,"column":98,"offset":5205},"indent":[]}},{"type":"link","title":null,"url":"https://devcenter.heroku.com/articles/heroku-cli","children":[{"type":"text","value":"setup the CLI","position":{"start":{"line":167,"column":99,"offset":5206},"end":{"line":167,"column":112,"offset":5219},"indent":[]}}],"position":{"start":{"line":167,"column":98,"offset":5205},"end":{"line":167,"column":163,"offset":5270},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":167,"column":163,"offset":5270},"end":{"line":167,"column":164,"offset":5271},"indent":[]}}],"position":{"start":{"line":167,"column":1,"offset":5108},"end":{"line":167,"column":164,"offset":5271},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":true,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create a new Heroku app","position":{"start":{"line":169,"column":5,"offset":5277},"end":{"line":169,"column":28,"offset":5300},"indent":[]}}],"position":{"start":{"line":169,"column":5,"offset":5277},"end":{"line":169,"column":28,"offset":5300},"indent":[]}},{"type":"code","lang":"cli","meta":null,"value":"heroku create","position":{"start":{"line":171,"column":5,"offset":5306},"end":{"line":173,"column":8,"offset":5338},"indent":[5,5]}}],"position":{"start":{"line":169,"column":1,"offset":5273},"end":{"line":174,"column":1,"offset":5339},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Add a postgres database to it","position":{"start":{"line":175,"column":5,"offset":5344},"end":{"line":175,"column":34,"offset":5373},"indent":[]}}],"position":{"start":{"line":175,"column":5,"offset":5344},"end":{"line":175,"column":34,"offset":5373},"indent":[]}},{"type":"code","lang":"cli","meta":null,"value":"heroku addons:create heroku-postgresql","position":{"start":{"line":177,"column":5,"offset":5379},"end":{"line":179,"column":8,"offset":5436},"indent":[5,5]}}],"position":{"start":{"line":175,"column":1,"offset":5340},"end":{"line":180,"column":1,"offset":5437},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Find the postgres databse connection URL","position":{"start":{"line":181,"column":5,"offset":5442},"end":{"line":181,"column":45,"offset":5482},"indent":[]}}],"position":{"start":{"line":181,"column":5,"offset":5442},"end":{"line":181,"column":45,"offset":5482},"indent":[]}},{"type":"code","lang":"cli","meta":null,"value":"heroku pg:credentials:url","position":{"start":{"line":183,"column":5,"offset":5488},"end":{"line":185,"column":8,"offset":5532},"indent":[5,5]}},{"type":"paragraph","children":[{"type":"text","value":"Copy it into ","position":{"start":{"line":187,"column":5,"offset":5538},"end":{"line":187,"column":18,"offset":5551},"indent":[]}},{"type":"inlineCode","value":"prisma/.env","position":{"start":{"line":187,"column":18,"offset":5551},"end":{"line":187,"column":31,"offset":5564},"indent":[]}},{"type":"text","value":" to give Prisma access.","position":{"start":{"line":187,"column":31,"offset":5564},"end":{"line":187,"column":54,"offset":5587},"indent":[]}}],"position":{"start":{"line":187,"column":5,"offset":5538},"end":{"line":187,"column":54,"offset":5587},"indent":[]}}],"position":{"start":{"line":181,"column":1,"offset":5438},"end":{"line":188,"column":1,"offset":5588},"indent":[1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Migrate the heroku postgres databse","position":{"start":{"line":189,"column":5,"offset":5593},"end":{"line":189,"column":40,"offset":5628},"indent":[]}}],"position":{"start":{"line":189,"column":5,"offset":5593},"end":{"line":189,"column":40,"offset":5628},"indent":[]}},{"type":"code","lang":"cli","meta":null,"value":"yarn prisma migrate up --experimental","position":{"start":{"line":191,"column":5,"offset":5634},"end":{"line":193,"column":8,"offset":5690},"indent":[5,5]}},{"type":"paragraph","children":[{"type":"text","value":"Or if using ","position":{"start":{"line":195,"column":5,"offset":5696},"end":{"line":195,"column":17,"offset":5708},"indent":[]}},{"type":"inlineCode","value":"npm","position":{"start":{"line":195,"column":17,"offset":5708},"end":{"line":195,"column":22,"offset":5713},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":195,"column":22,"offset":5713},"end":{"line":195,"column":23,"offset":5714},"indent":[]}}],"position":{"start":{"line":195,"column":5,"offset":5696},"end":{"line":195,"column":23,"offset":5714},"indent":[]}},{"type":"code","lang":"cli","meta":null,"value":"npx prisma migrate up --experimental","position":{"start":{"line":197,"column":5,"offset":5720},"end":{"line":199,"column":8,"offset":5775},"indent":[5,5]}}],"position":{"start":{"line":189,"column":1,"offset":5589},"end":{"line":200,"column":1,"offset":5776},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Commit your changes to Git","position":{"start":{"line":201,"column":5,"offset":5781},"end":{"line":201,"column":31,"offset":5807},"indent":[]}}],"position":{"start":{"line":201,"column":5,"offset":5781},"end":{"line":201,"column":31,"offset":5807},"indent":[]}},{"type":"code","lang":"cli","meta":null,"value":"git add .\ngit commit -m \"updates for deployment to Heroku\"","position":{"start":{"line":203,"column":5,"offset":5813},"end":{"line":206,"column":8,"offset":5894},"indent":[5,5,5]}}],"position":{"start":{"line":201,"column":1,"offset":5777},"end":{"line":207,"column":1,"offset":5895},"indent":[1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Deploy your Nexus app","position":{"start":{"line":208,"column":5,"offset":5900},"end":{"line":208,"column":26,"offset":5921},"indent":[]}}],"position":{"start":{"line":208,"column":5,"offset":5900},"end":{"line":208,"column":26,"offset":5921},"indent":[]}},{"type":"code","lang":"cli","meta":null,"value":"git push heroku master","position":{"start":{"line":210,"column":5,"offset":5927},"end":{"line":212,"column":8,"offset":5968},"indent":[5,5]}}],"position":{"start":{"line":208,"column":1,"offset":5896},"end":{"line":213,"column":1,"offset":5969},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Open your hosted playground","position":{"start":{"line":214,"column":5,"offset":5974},"end":{"line":214,"column":32,"offset":6001},"indent":[]}}],"position":{"start":{"line":214,"column":5,"offset":5974},"end":{"line":214,"column":32,"offset":6001},"indent":[]}},{"type":"code","lang":"cli","meta":null,"value":"heroku open","position":{"start":{"line":216,"column":5,"offset":6007},"end":{"line":218,"column":8,"offset":6037},"indent":[5,5]}}],"position":{"start":{"line":214,"column":1,"offset":5970},"end":{"line":219,"column":1,"offset":6038},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Try running the mutation from above, but now against your heroku database.","position":{"start":{"line":220,"column":5,"offset":6043},"end":{"line":220,"column":79,"offset":6117},"indent":[]}}],"position":{"start":{"line":220,"column":5,"offset":6043},"end":{"line":220,"column":79,"offset":6117},"indent":[]}}],"position":{"start":{"line":220,"column":1,"offset":6039},"end":{"line":220,"column":79,"offset":6117},"indent":[]}}],"position":{"start":{"line":169,"column":1,"offset":5273},"end":{"line":220,"column":79,"offset":6117},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Next Steps","position":{"start":{"line":222,"column":4,"offset":6122},"end":{"line":222,"column":14,"offset":6132},"indent":[]}}],"position":{"start":{"line":222,"column":1,"offset":6119},"end":{"line":222,"column":14,"offset":6132},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A good next step might be to read through some of the guides.","position":{"start":{"line":224,"column":1,"offset":6134},"end":{"line":224,"column":62,"offset":6195},"indent":[]}}],"position":{"start":{"line":224,"column":1,"offset":6134},"end":{"line":224,"column":62,"offset":6195},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Some good ones for new comers include the ","position":{"start":{"line":226,"column":1,"offset":6197},"end":{"line":226,"column":43,"offset":6239},"indent":[]}},{"type":"link","title":null,"url":"/guides/concepts","children":[{"type":"inlineCode","value":"Concepts","position":{"start":{"line":226,"column":44,"offset":6240},"end":{"line":226,"column":54,"offset":6250},"indent":[]}}],"position":{"start":{"line":226,"column":43,"offset":6239},"end":{"line":226,"column":73,"offset":6269},"indent":[]}},{"type":"text","value":" guide that gives an overview about how to think about Nexus, and the ","position":{"start":{"line":226,"column":73,"offset":6269},"end":{"line":226,"column":143,"offset":6339},"indent":[]}},{"type":"link","title":null,"url":"/guides/schema","children":[{"type":"inlineCode","value":"Schema","position":{"start":{"line":226,"column":144,"offset":6340},"end":{"line":226,"column":152,"offset":6348},"indent":[]}}],"position":{"start":{"line":226,"column":143,"offset":6339},"end":{"line":226,"column":169,"offset":6365},"indent":[]}},{"type":"text","value":" guide that goes through the ins and outs of building a GraphQL schema in Nexus.","position":{"start":{"line":226,"column":169,"offset":6365},"end":{"line":226,"column":249,"offset":6445},"indent":[]}}],"position":{"start":{"line":226,"column":1,"offset":6197},"end":{"line":226,"column":249,"offset":6445},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Happy coding! 🙌","position":{"start":{"line":228,"column":1,"offset":6447},"end":{"line":228,"column":17,"offset":6463},"indent":[]}}],"position":{"start":{"line":228,"column":1,"offset":6447},"end":{"line":228,"column":17,"offset":6463},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Tutorial\",\"metaTitle\":\"Tutorial\",\"metaDescription\":\"TODO\",\"duration\":\"\",\"experimental\":false,\"staticLink\":false}","position":{"start":{"line":231,"column":1,"offset":6466},"end":{"line":231,"column":151,"offset":6616},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":231,"column":151,"offset":6616}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Tutorial\",\n  \"metaTitle\": \"Tutorial\",\n  \"metaDescription\": \"TODO\",\n  \"duration\": \"\",\n  \"experimental\": false,\n  \"staticLink\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"For this tutorial we will use PostgreSQL as our database. Install PostgreSQL if needed and then get its connection URL. Check out \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"references/recipes?id=localql\"\n  }), \"our postgresql setup guide\"), \" if unsure.\")), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"scaffold-project\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#scaffold-project\",\n    \"aria-label\": \"scaffold project permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Scaffold Project\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Kick off a new project. Say yes (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"y\"), \") to the prisma option. Choose \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PostgreSQL\"), \" for the db option.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cli\"\n  }), \"npx nexus\\n\"))), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"change-the-data-layer\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#change-the-data-layer\",\n    \"aria-label\": \"change the data layer permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Change the Data Layer\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Our Hello World schema doesn't account for information about moons, lets change that.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Start by updating our data layer to model information about moons. We don't want to go crazy scientific here but a bit of modelling will serve us well. A world may have more than one moon, and a moon may have properites in its own right. So lets give moons a first class model representation. Then, we can connect them to their respective worlds:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"+++ prisma/schema.prisma\\n  model World {\\n    id         Int    @id\\n    name       String @unique\\n    population Float\\n+   moons      Moon[]\\n  }\\n\\n+ model Moon {\\n+   worldId Int    @id @default(autoincrement())\\n+   name    String\\n+   world   World  @relation(fields: [worldId], references: [id])\\n+ }\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Nexus reacts to changes in your Prisma schema. By saving the above, you will see a prompt in dev mode about applying your database changes.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"   0 \\u25CF nexus:plugin:nexus-plugin-prisma We detected a change in your Prisma Schema file.\\n   0 \\u25CF nexus:plugin:nexus-plugin-prisma If you're using Prisma Migrate, follow the step below:\\n   0 \\u25CF nexus:plugin:nexus-plugin-prisma 1. Run yarn -s prisma migrate save --experimental to create a migration file.\\n   0 \\u25CF nexus:plugin:nexus-plugin-prisma 2. Run yarn -s prisma migrate up --experimental to apply your migration.\\n? Press Y to restart once your migration is applied \\u203A (Y)\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Once done, you can move on to updating your API layer.\")), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"change-the-api-layer\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#change-the-api-layer\",\n    \"aria-label\": \"change the api layer permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Change the API Layer\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We have data about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Earth\"), \" from before, but now we need to update it with information about its moon. Instead of working with Prisma Client inside one-off scripts, lets enhance our API and make the update as if a client app were.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We're going to need to expose the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"moons\"), \" world field to clients\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"+++ api/graphql.ts\\n  schema.objectType({\\n    name: \\\"World\\\",\\n    definition(t) {\\n      t.model.worldId()\\n      t.model.name()\\n      t.model.population()\\n+     t.model.moons()\\n    }\\n  })\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Upon doing this however, we will see a warning in our dev mode logs:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \" Warning: Your GraphQL `World` object definition is projecting a field `moons` with `Moon` as output type, but `Moon` is not defined in your GraphQL Schema\\n Warning: in /Users/jasonkuhrt/foobar/api/graphql.ts:10:13\\n\\n   6 definition(t) {\\n   7 t.model.id();\\n   8 t.model.name();\\n   9 t.model.population();\\n \\u2192 10 t.model.moons();\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The feedback is pretty clear already but to restate: The problem is that we're projecting a Prisma model field (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"moons\"), \") that is a connection to another Prisma model (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Moon\"), \") that has not been projected on our API layer. So let's do that now:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"+++ api/graphql.ts\\n+schema.objectType({\\n+  name:'Moon',\\n+  definition(t){\\n+    t.model.id()\\n+    t.model.name()\\n+    t.model.world()\\n+   }\\n+})\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Do not copy-paste. Instead type this out yourself and take note how autcompletion within the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"definition\"), \" block on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t.model\"), \" effectively guides you to success.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Once you have projected \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Moon\"), \" from your data layer to your API layer, you will see that the dev mode warning and TypeScript error are now resolved. \\uD83D\\uDE4C\")), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"add-some-crud\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#add-some-crud\",\n    \"aria-label\": \"add some crud permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Add Some CRUD\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If you go to your GraphQL Playground now you will see that your GraphQL schema now contains your Moon data shape too. But of course we still need to update \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Earth\"), \" with data about \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"its\"), \" moon. To achieve that we're going to expose CRUD actions that clients can use to update \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Earth\"), \".\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"+++ api/graphql.ts\\n+schema.mutationType({\\n+  definition(t){\\n+    t.crud.updateOneWorld()\\n+  }\\n+})\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Again do not copy-paste. Type this out and see how it feels. Notice how auto-completion guides you from start to finish.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If we go back to our schema in GraphQL Playground now, we'll see a significant number of additions to the schema, a result of the CRUD features we've just enabled.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Now, let's give \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Earth\"), \" its moon!\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"mutation addMoonToEarth {\\n  updateOneWorld(where: { name: \\\"Earth\\\" }, data: { moons: { create: { name: \\\"moon\\\" } } }) {\\n    name\\n    moons {\\n      name\\n    }\\n  }\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You should see a result like:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"updateOneWorld\\\": {\\n      \\\"name\\\": \\\"Earth\\\",\\n      \\\"moons\\\": [\\n        {\\n          \\\"name\\\": \\\"moon\\\"\\n        }\\n      ]\\n    }\\n  }\\n}\\n\"))), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"deploy\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#deploy\",\n    \"aria-label\": \"deploy permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Deploy\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We will Deploy to Heroku.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Before deploying let's change the playground server setting such that Playground will be enabled in production.\"), mdx(\"p\", {\n    className: \"NextIs Warn\"\n  }), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"We're doing this so we can easily try out our deployed app. Neither the GraphQL Playground UI nor the GraphQL API itself are secured. This is not intended to demonstrate a production-ready setup.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"+++ api/app.ts\\n+ import { settings, use } from 'nexus'\\nimport { prisma } from 'nexus-plugin-prisma'\\n\\nuse(prisma())\\n\\n+settings.change({\\n+  server: {\\n+    playground: true\\n+  }\\n+})\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Then, create an account at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.heroku.com/\"\n  }), \"Heroku\"), \" (if you don't already have one) and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://devcenter.heroku.com/articles/heroku-cli\"\n  }), \"setup the CLI\"), \".\"), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create a new Heroku app\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cli\"\n  }), \"heroku create\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Add a postgres database to it\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cli\"\n  }), \"heroku addons:create heroku-postgresql\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Find the postgres databse connection URL\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cli\"\n  }), \"heroku pg:credentials:url\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Copy it into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prisma/.env\"), \" to give Prisma access.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Migrate the heroku postgres databse\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cli\"\n  }), \"yarn prisma migrate up --experimental\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Or if using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm\"), \":\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cli\"\n  }), \"npx prisma migrate up --experimental\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Commit your changes to Git\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cli\"\n  }), \"git add .\\ngit commit -m \\\"updates for deployment to Heroku\\\"\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Deploy your Nexus app\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cli\"\n  }), \"git push heroku master\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Open your hosted playground\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cli\"\n  }), \"heroku open\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Try running the mutation from above, but now against your heroku database.\")))), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"next-steps\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#next-steps\",\n    \"aria-label\": \"next steps permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Next Steps\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"A good next step might be to read through some of the guides.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Some good ones for new comers include the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/guides/concepts\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Concepts\")), \" guide that gives an overview about how to think about Nexus, and the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/guides/schema\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Schema\")), \" guide that goes through the ins and outs of building a GraphQL schema in Nexus.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Happy coding! \\uD83D\\uDE4C\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Tutorial\",\n  \"metaTitle\": \"Tutorial\",\n  \"metaDescription\": \"TODO\",\n  \"duration\": \"\",\n  \"experimental\": false,\n  \"staticLink\": false\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <blockquote>\n      <p parentName=\"blockquote\">{`For this tutorial we will use PostgreSQL as our database. Install PostgreSQL if needed and then get its connection URL. Check out `}<a parentName=\"p\" {...{\n          \"href\": \"references/recipes?id=localql\"\n        }}>{`our postgresql setup guide`}</a>{` if unsure.`}</p>\n    </blockquote>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"scaffold-project\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#scaffold-project\",\n          \"aria-label\": \"scaffold project permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Scaffold Project`}</h2><p parentName=\"section\">{`Kick off a new project. Say yes (`}<inlineCode parentName=\"p\">{`y`}</inlineCode>{`) to the prisma option. Choose `}<inlineCode parentName=\"p\">{`PostgreSQL`}</inlineCode>{` for the db option.`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-cli\"\n        }}>{`npx nexus\n`}</code></pre></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"change-the-data-layer\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#change-the-data-layer\",\n          \"aria-label\": \"change the data layer permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Change the Data Layer`}</h2><p parentName=\"section\">{`Our Hello World schema doesn't account for information about moons, lets change that.`}</p><p parentName=\"section\">{`Start by updating our data layer to model information about moons. We don't want to go crazy scientific here but a bit of modelling will serve us well. A world may have more than one moon, and a moon may have properites in its own right. So lets give moons a first class model representation. Then, we can connect them to their respective worlds:`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-diff\"\n        }}>{`+++ prisma/schema.prisma\n  model World {\n    id         Int    @id\n    name       String @unique\n    population Float\n+   moons      Moon[]\n  }\n\n+ model Moon {\n+   worldId Int    @id @default(autoincrement())\n+   name    String\n+   world   World  @relation(fields: [worldId], references: [id])\n+ }\n`}</code></pre><p parentName=\"section\">{`Nexus reacts to changes in your Prisma schema. By saving the above, you will see a prompt in dev mode about applying your database changes.`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{}}>{`   0 ● nexus:plugin:nexus-plugin-prisma We detected a change in your Prisma Schema file.\n   0 ● nexus:plugin:nexus-plugin-prisma If you're using Prisma Migrate, follow the step below:\n   0 ● nexus:plugin:nexus-plugin-prisma 1. Run yarn -s prisma migrate save --experimental to create a migration file.\n   0 ● nexus:plugin:nexus-plugin-prisma 2. Run yarn -s prisma migrate up --experimental to apply your migration.\n? Press Y to restart once your migration is applied › (Y)\n`}</code></pre><p parentName=\"section\">{`Once done, you can move on to updating your API layer.`}</p></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"change-the-api-layer\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#change-the-api-layer\",\n          \"aria-label\": \"change the api layer permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Change the API Layer`}</h2><p parentName=\"section\">{`We have data about `}<inlineCode parentName=\"p\">{`Earth`}</inlineCode>{` from before, but now we need to update it with information about its moon. Instead of working with Prisma Client inside one-off scripts, lets enhance our API and make the update as if a client app were.`}</p><p parentName=\"section\">{`We're going to need to expose the `}<inlineCode parentName=\"p\">{`moons`}</inlineCode>{` world field to clients`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-diff\"\n        }}>{`+++ api/graphql.ts\n  schema.objectType({\n    name: \"World\",\n    definition(t) {\n      t.model.worldId()\n      t.model.name()\n      t.model.population()\n+     t.model.moons()\n    }\n  })\n`}</code></pre><p parentName=\"section\">{`Upon doing this however, we will see a warning in our dev mode logs:`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{}}>{` Warning: Your GraphQL \\`World\\` object definition is projecting a field \\`moons\\` with \\`Moon\\` as output type, but \\`Moon\\` is not defined in your GraphQL Schema\n Warning: in /Users/jasonkuhrt/foobar/api/graphql.ts:10:13\n\n   6 definition(t) {\n   7 t.model.id();\n   8 t.model.name();\n   9 t.model.population();\n → 10 t.model.moons();\n`}</code></pre><p parentName=\"section\">{`The feedback is pretty clear already but to restate: The problem is that we're projecting a Prisma model field (`}<inlineCode parentName=\"p\">{`moons`}</inlineCode>{`) that is a connection to another Prisma model (`}<inlineCode parentName=\"p\">{`Moon`}</inlineCode>{`) that has not been projected on our API layer. So let's do that now:`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-diff\"\n        }}>{`+++ api/graphql.ts\n+schema.objectType({\n+  name:'Moon',\n+  definition(t){\n+    t.model.id()\n+    t.model.name()\n+    t.model.world()\n+   }\n+})\n`}</code></pre><p parentName=\"section\">{`Do not copy-paste. Instead type this out yourself and take note how autcompletion within the `}<inlineCode parentName=\"p\">{`definition`}</inlineCode>{` block on `}<inlineCode parentName=\"p\">{`t.model`}</inlineCode>{` effectively guides you to success.`}</p><p parentName=\"section\">{`Once you have projected `}<inlineCode parentName=\"p\">{`Moon`}</inlineCode>{` from your data layer to your API layer, you will see that the dev mode warning and TypeScript error are now resolved. 🙌`}</p></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"add-some-crud\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#add-some-crud\",\n          \"aria-label\": \"add some crud permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Add Some CRUD`}</h2><p parentName=\"section\">{`If you go to your GraphQL Playground now you will see that your GraphQL schema now contains your Moon data shape too. But of course we still need to update `}<inlineCode parentName=\"p\">{`Earth`}</inlineCode>{` with data about `}<em parentName=\"p\">{`its`}</em>{` moon. To achieve that we're going to expose CRUD actions that clients can use to update `}<inlineCode parentName=\"p\">{`Earth`}</inlineCode>{`.`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-diff\"\n        }}>{`+++ api/graphql.ts\n+schema.mutationType({\n+  definition(t){\n+    t.crud.updateOneWorld()\n+  }\n+})\n`}</code></pre><p parentName=\"section\">{`Again do not copy-paste. Type this out and see how it feels. Notice how auto-completion guides you from start to finish.`}</p><p parentName=\"section\">{`If we go back to our schema in GraphQL Playground now, we'll see a significant number of additions to the schema, a result of the CRUD features we've just enabled.`}</p><p parentName=\"section\">{`Now, let's give `}<inlineCode parentName=\"p\">{`Earth`}</inlineCode>{` its moon!`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-graphql\"\n        }}>{`mutation addMoonToEarth {\n  updateOneWorld(where: { name: \"Earth\" }, data: { moons: { create: { name: \"moon\" } } }) {\n    name\n    moons {\n      name\n    }\n  }\n}\n`}</code></pre><p parentName=\"section\">{`You should see a result like:`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-json\"\n        }}>{`{\n  \"data\": {\n    \"updateOneWorld\": {\n      \"name\": \"Earth\",\n      \"moons\": [\n        {\n          \"name\": \"moon\"\n        }\n      ]\n    }\n  }\n}\n`}</code></pre></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"deploy\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#deploy\",\n          \"aria-label\": \"deploy permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Deploy`}</h2><p parentName=\"section\">{`We will Deploy to Heroku.`}</p><p parentName=\"section\">{`Before deploying let's change the playground server setting such that Playground will be enabled in production.`}</p><p class=\"NextIs Warn\" /><blockquote parentName=\"section\">\n        <p parentName=\"blockquote\">{`We're doing this so we can easily try out our deployed app. Neither the GraphQL Playground UI nor the GraphQL API itself are secured. This is not intended to demonstrate a production-ready setup.`}</p>\n      </blockquote><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-diff\"\n        }}>{`+++ api/app.ts\n+ import { settings, use } from 'nexus'\nimport { prisma } from 'nexus-plugin-prisma'\n\nuse(prisma())\n\n+settings.change({\n+  server: {\n+    playground: true\n+  }\n+})\n`}</code></pre><p parentName=\"section\">{`Then, create an account at `}<a parentName=\"p\" {...{\n          \"href\": \"https://www.heroku.com/\"\n        }}>{`Heroku`}</a>{` (if you don't already have one) and `}<a parentName=\"p\" {...{\n          \"href\": \"https://devcenter.heroku.com/articles/heroku-cli\"\n        }}>{`setup the CLI`}</a>{`.`}</p><ol parentName=\"section\">\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`Create a new Heroku app`}</p>\n          <pre parentName=\"li\"><code parentName=\"pre\" {...{\n              \"className\": \"language-cli\"\n            }}>{`heroku create\n`}</code></pre>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`Add a postgres database to it`}</p>\n          <pre parentName=\"li\"><code parentName=\"pre\" {...{\n              \"className\": \"language-cli\"\n            }}>{`heroku addons:create heroku-postgresql\n`}</code></pre>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`Find the postgres databse connection URL`}</p>\n          <pre parentName=\"li\"><code parentName=\"pre\" {...{\n              \"className\": \"language-cli\"\n            }}>{`heroku pg:credentials:url\n`}</code></pre>\n          <p parentName=\"li\">{`Copy it into `}<inlineCode parentName=\"p\">{`prisma/.env`}</inlineCode>{` to give Prisma access.`}</p>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`Migrate the heroku postgres databse`}</p>\n          <pre parentName=\"li\"><code parentName=\"pre\" {...{\n              \"className\": \"language-cli\"\n            }}>{`yarn prisma migrate up --experimental\n`}</code></pre>\n          <p parentName=\"li\">{`Or if using `}<inlineCode parentName=\"p\">{`npm`}</inlineCode>{`:`}</p>\n          <pre parentName=\"li\"><code parentName=\"pre\" {...{\n              \"className\": \"language-cli\"\n            }}>{`npx prisma migrate up --experimental\n`}</code></pre>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`Commit your changes to Git`}</p>\n          <pre parentName=\"li\"><code parentName=\"pre\" {...{\n              \"className\": \"language-cli\"\n            }}>{`git add .\ngit commit -m \"updates for deployment to Heroku\"\n`}</code></pre>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`Deploy your Nexus app`}</p>\n          <pre parentName=\"li\"><code parentName=\"pre\" {...{\n              \"className\": \"language-cli\"\n            }}>{`git push heroku master\n`}</code></pre>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`Open your hosted playground`}</p>\n          <pre parentName=\"li\"><code parentName=\"pre\" {...{\n              \"className\": \"language-cli\"\n            }}>{`heroku open\n`}</code></pre>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`Try running the mutation from above, but now against your heroku database.`}</p>\n        </li>\n      </ol></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"next-steps\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#next-steps\",\n          \"aria-label\": \"next steps permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Next Steps`}</h2><p parentName=\"section\">{`A good next step might be to read through some of the guides.`}</p><p parentName=\"section\">{`Some good ones for new comers include the `}<a parentName=\"p\" {...{\n          \"href\": \"/guides/concepts\"\n        }}><inlineCode parentName=\"a\">{`Concepts`}</inlineCode></a>{` guide that gives an overview about how to think about Nexus, and the `}<a parentName=\"p\" {...{\n          \"href\": \"/guides/schema\"\n        }}><inlineCode parentName=\"a\">{`Schema`}</inlineCode></a>{` guide that goes through the ins and outs of building a GraphQL schema in Nexus.`}</p><p parentName=\"section\">{`Happy coding! 🙌`}</p></section>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}