{"expireTime":9007200846064398000,"key":"gatsby-plugin-mdx-entire-payload-08c8797a9bf197b106eeff4835b903ba-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Chapter 2 ","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":14,"offset":14},"indent":[]}},{"type":"jsx","value":"<br/>","position":{"start":{"line":2,"column":14,"offset":14},"end":{"line":2,"column":19,"offset":19},"indent":[]}},{"type":"text","value":" Writing Your First Schema","position":{"start":{"line":2,"column":19,"offset":19},"end":{"line":2,"column":45,"offset":45},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":45,"offset":45},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this chapter you're going to write your first schema. You'll learn about:","position":{"start":{"line":4,"column":1,"offset":47},"end":{"line":4,"column":77,"offset":123},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":47},"end":{"line":4,"column":77,"offset":123},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Writing GraphQL objects","position":{"start":{"line":6,"column":3,"offset":127},"end":{"line":6,"column":26,"offset":150},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":127},"end":{"line":6,"column":26,"offset":150},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":125},"end":{"line":6,"column":26,"offset":150},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Exposing GraphQL objects for query operations","position":{"start":{"line":7,"column":3,"offset":153},"end":{"line":7,"column":48,"offset":198},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":153},"end":{"line":7,"column":48,"offset":198},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":151},"end":{"line":7,"column":48,"offset":198},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"GraphQL SDL file generation","position":{"start":{"line":8,"column":3,"offset":201},"end":{"line":8,"column":30,"offset":228},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":201},"end":{"line":8,"column":30,"offset":228},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":199},"end":{"line":8,"column":30,"offset":228},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Enhanced type safety & autocompletion","position":{"start":{"line":9,"column":3,"offset":231},"end":{"line":9,"column":40,"offset":268},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":231},"end":{"line":9,"column":40,"offset":268},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":229},"end":{"line":9,"column":40,"offset":268},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":125},"end":{"line":9,"column":40,"offset":268},"indent":[1,1,1]}},{"type":"jsx","value":"<div class=\"NextIs SectionDivider\"></div>","position":{"start":{"line":11,"column":1,"offset":270},"end":{"line":11,"column":42,"offset":311},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"What About That Server?","position":{"start":{"line":13,"column":4,"offset":316},"end":{"line":13,"column":27,"offset":339},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":313},"end":{"line":13,"column":27,"offset":339},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the last chapter you probably noticed the minimal setup required to get up and running. In fact, you might even be confused and wondering:","position":{"start":{"line":15,"column":1,"offset":341},"end":{"line":15,"column":142,"offset":482},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":341},"end":{"line":15,"column":142,"offset":482},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"\"Hey, all I have is an empty ","position":{"start":{"line":17,"column":1,"offset":484},"end":{"line":17,"column":30,"offset":513},"indent":[]}},{"type":"inlineCode","value":"app.ts","position":{"start":{"line":17,"column":30,"offset":513},"end":{"line":17,"column":38,"offset":521},"indent":[]}},{"type":"text","value":" file, how can my server even be running?\"","position":{"start":{"line":17,"column":38,"offset":521},"end":{"line":17,"column":80,"offset":563},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":484},"end":{"line":17,"column":80,"offset":563},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Well, Nexus comes with a server out of the box. There's no need for you to start or stop the server or otherwise think about it beyond your domain logic. Nexus wants you to focus on what makes your GraphQL API unique.","position":{"start":{"line":19,"column":1,"offset":565},"end":{"line":19,"column":218,"offset":782},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":565},"end":{"line":19,"column":218,"offset":782},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If your lock-in fears are tingling, know that ","position":{"start":{"line":21,"column":1,"offset":784},"end":{"line":21,"column":47,"offset":830},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"you still have ","position":{"start":{"line":21,"column":49,"offset":832},"end":{"line":21,"column":64,"offset":847},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"full","position":{"start":{"line":21,"column":65,"offset":848},"end":{"line":21,"column":69,"offset":852},"indent":[]}}],"position":{"start":{"line":21,"column":64,"offset":847},"end":{"line":21,"column":70,"offset":853},"indent":[]}},{"type":"text","value":" access","position":{"start":{"line":21,"column":70,"offset":853},"end":{"line":21,"column":77,"offset":860},"indent":[]}}],"position":{"start":{"line":21,"column":47,"offset":830},"end":{"line":21,"column":79,"offset":862},"indent":[]}},{"type":"text","value":" to the underlying server instance. So if you need to add custom middlewares, routes, and so on, you can. It happens that currently it is an ","position":{"start":{"line":21,"column":79,"offset":862},"end":{"line":21,"column":220,"offset":1003},"indent":[]}},{"type":"inlineCode","value":"express","position":{"start":{"line":21,"column":220,"offset":1003},"end":{"line":21,"column":229,"offset":1012},"indent":[]}},{"type":"text","value":" instance but this area of Nexus will evolve (","position":{"start":{"line":21,"column":229,"offset":1012},"end":{"line":21,"column":275,"offset":1058},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/graphql-nexus/nexus/issues/295","children":[{"type":"text","value":"#295","position":{"start":{"line":21,"column":276,"offset":1059},"end":{"line":21,"column":280,"offset":1063},"indent":[]}}],"position":{"start":{"line":21,"column":275,"offset":1058},"end":{"line":21,"column":332,"offset":1115},"indent":[]}},{"type":"text","value":").","position":{"start":{"line":21,"column":332,"offset":1115},"end":{"line":21,"column":334,"offset":1117},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":784},"end":{"line":21,"column":334,"offset":1117},"indent":[]}},{"type":"jsx","value":"<div class=\"NextIs SectionDivider\"></div>","position":{"start":{"line":23,"column":1,"offset":1119},"end":{"line":23,"column":42,"offset":1160},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Reflection?","position":{"start":{"line":25,"column":4,"offset":1165},"end":{"line":25,"column":15,"offset":1176},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1162},"end":{"line":25,"column":15,"offset":1176},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before we get going we need a moment to introduce an important part of the Nexus development workflow. Nexus has an unconventional concept called \"Reflection\". It refers to the fact that, when ","position":{"start":{"line":27,"column":1,"offset":1178},"end":{"line":27,"column":194,"offset":1371},"indent":[]}},{"type":"inlineCode","value":"nexus dev","position":{"start":{"line":27,"column":194,"offset":1371},"end":{"line":27,"column":205,"offset":1382},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":27,"column":205,"offset":1382},"end":{"line":27,"column":209,"offset":1386},"indent":[]}},{"type":"inlineCode","value":"nexus build","position":{"start":{"line":27,"column":209,"offset":1386},"end":{"line":27,"column":222,"offset":1399},"indent":[]}},{"type":"text","value":" is running, not only is your application code being run, but ","position":{"start":{"line":27,"column":222,"offset":1399},"end":{"line":27,"column":284,"offset":1461},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"information is being gathered and artifacts are being derived","position":{"start":{"line":27,"column":286,"offset":1463},"end":{"line":27,"column":347,"offset":1524},"indent":[]}}],"position":{"start":{"line":27,"column":284,"offset":1461},"end":{"line":27,"column":349,"offset":1526},"indent":[]}},{"type":"text","value":". Some of Nexus' uses for reflection include:","position":{"start":{"line":27,"column":349,"offset":1526},"end":{"line":27,"column":394,"offset":1571},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1178},"end":{"line":27,"column":394,"offset":1571},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Figuring out which plugins you are using, and the settings passed","position":{"start":{"line":29,"column":3,"offset":1575},"end":{"line":29,"column":68,"offset":1640},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":1575},"end":{"line":29,"column":68,"offset":1640},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1573},"end":{"line":29,"column":68,"offset":1640},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Generating TypeScript types to give your resolvers complete type safety","position":{"start":{"line":30,"column":3,"offset":1643},"end":{"line":30,"column":74,"offset":1714},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":1643},"end":{"line":30,"column":74,"offset":1714},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1641},"end":{"line":30,"column":74,"offset":1714},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Generating an SDL file","position":{"start":{"line":31,"column":3,"offset":1717},"end":{"line":31,"column":25,"offset":1739},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":1717},"end":{"line":31,"column":25,"offset":1739},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1715},"end":{"line":31,"column":25,"offset":1739},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1573},"end":{"line":31,"column":25,"offset":1739},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This partly explains why Nexus has a declarative API. It needs a way to run your app reliably at build time. Declarative APIs give Nexus a higher degree of control to do this. Declarative APIs also encode enough semantic value for Nexus to do the things it needs to.","position":{"start":{"line":33,"column":1,"offset":1741},"end":{"line":33,"column":267,"offset":2007},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1741},"end":{"line":33,"column":267,"offset":2007},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Architecturally there's a lot more to say about reflection but for now, from a user point of view, just remember the following. You should ","position":{"start":{"line":35,"column":1,"offset":2009},"end":{"line":35,"column":140,"offset":2148},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"always","position":{"start":{"line":35,"column":141,"offset":2149},"end":{"line":35,"column":147,"offset":2155},"indent":[]}}],"position":{"start":{"line":35,"column":140,"offset":2148},"end":{"line":35,"column":148,"offset":2156},"indent":[]}},{"type":"text","value":" have your ","position":{"start":{"line":35,"column":148,"offset":2156},"end":{"line":35,"column":159,"offset":2167},"indent":[]}},{"type":"inlineCode","value":"nexus dev","position":{"start":{"line":35,"column":159,"offset":2167},"end":{"line":35,"column":170,"offset":2178},"indent":[]}},{"type":"text","value":" running when you're working on your project ","position":{"start":{"line":35,"column":170,"offset":2178},"end":{"line":35,"column":215,"offset":2223},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"even","position":{"start":{"line":35,"column":216,"offset":2224},"end":{"line":35,"column":220,"offset":2228},"indent":[]}}],"position":{"start":{"line":35,"column":215,"offset":2223},"end":{"line":35,"column":221,"offset":2229},"indent":[]}},{"type":"text","value":" when you're not intending to use your server (e.g. access the GraphQL Playground). If you forget to run ","position":{"start":{"line":35,"column":221,"offset":2229},"end":{"line":35,"column":326,"offset":2334},"indent":[]}},{"type":"inlineCode","value":"nexus dev","position":{"start":{"line":35,"column":326,"offset":2334},"end":{"line":35,"column":337,"offset":2345},"indent":[]}},{"type":"text","value":" then you will not, for example, get the static typing experience that you expect in your resolvers.","position":{"start":{"line":35,"column":337,"offset":2345},"end":{"line":35,"column":437,"offset":2445},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":2009},"end":{"line":35,"column":437,"offset":2445},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"There are plans to run Nexus Reflection as a separate process integrated into your IDE. You can learn more about and track the feature here (","position":{"start":{"line":37,"column":3,"offset":2449},"end":{"line":37,"column":144,"offset":2590},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/graphql-nexus/nexus/issues/949","children":[{"type":"text","value":"#949","position":{"start":{"line":37,"column":145,"offset":2591},"end":{"line":37,"column":149,"offset":2595},"indent":[]}}],"position":{"start":{"line":37,"column":144,"offset":2590},"end":{"line":37,"column":201,"offset":2647},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":37,"column":201,"offset":2647},"end":{"line":37,"column":202,"offset":2648},"indent":[]}}],"position":{"start":{"line":37,"column":3,"offset":2449},"end":{"line":37,"column":202,"offset":2648},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":2447},"end":{"line":37,"column":202,"offset":2648},"indent":[]}},{"type":"jsx","value":"<div class=\"NextIs SectionDivider\"></div>","position":{"start":{"line":39,"column":1,"offset":2650},"end":{"line":39,"column":42,"offset":2691},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Model The Domain","position":{"start":{"line":41,"column":4,"offset":2696},"end":{"line":41,"column":20,"offset":2712},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":2693},"end":{"line":41,"column":20,"offset":2712},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's get started with our blog schema by modeling some key entities in the domain. We'll begin with the concept of a ","position":{"start":{"line":43,"column":1,"offset":2714},"end":{"line":43,"column":119,"offset":2832},"indent":[]}},{"type":"inlineCode","value":"Post","position":{"start":{"line":43,"column":119,"offset":2832},"end":{"line":43,"column":125,"offset":2838},"indent":[]}},{"type":"text","value":". A post will represent a page in your blog. When not published, we'll call it a ","position":{"start":{"line":43,"column":125,"offset":2838},"end":{"line":43,"column":206,"offset":2919},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"draft","position":{"start":{"line":43,"column":207,"offset":2920},"end":{"line":43,"column":212,"offset":2925},"indent":[]}}],"position":{"start":{"line":43,"column":206,"offset":2919},"end":{"line":43,"column":213,"offset":2926},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":43,"column":213,"offset":2926},"end":{"line":43,"column":214,"offset":2927},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":2714},"end":{"line":43,"column":214,"offset":2927},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Your modeling work is going to start on the API layer as opposed to the database layer. This API-first approach can be a good way to collaborate with frontend teams, getting their input in shaping the data early.","position":{"start":{"line":45,"column":1,"offset":2929},"end":{"line":45,"column":213,"offset":3141},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":2929},"end":{"line":45,"column":213,"offset":3141},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"A note about terminology. We will be talking about the Post Object not Post Model. The difference is that at the API layer we have objects but at the database layer we have models. The name difference helps us talk about these different layers without confusion. It is also how GraphQL (API layer) and Prisma (database layer, discussed later) respectively refer to these things.","position":{"start":{"line":47,"column":3,"offset":3145},"end":{"line":47,"column":381,"offset":3523},"indent":[]}}],"position":{"start":{"line":47,"column":3,"offset":3145},"end":{"line":47,"column":381,"offset":3523},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":3143},"end":{"line":47,"column":381,"offset":3523},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Create a new module for your Post object at ","position":{"start":{"line":49,"column":1,"offset":3525},"end":{"line":49,"column":45,"offset":3569},"indent":[]}},{"type":"inlineCode","value":"api/graphql/Post.ts","position":{"start":{"line":49,"column":45,"offset":3569},"end":{"line":49,"column":66,"offset":3590},"indent":[]}},{"type":"text","value":". We ","position":{"start":{"line":49,"column":66,"offset":3590},"end":{"line":49,"column":71,"offset":3595},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"could","position":{"start":{"line":49,"column":72,"offset":3596},"end":{"line":49,"column":77,"offset":3601},"indent":[]}}],"position":{"start":{"line":49,"column":71,"offset":3595},"end":{"line":49,"column":78,"offset":3602},"indent":[]}},{"type":"text","value":" write our whole schema within say ","position":{"start":{"line":49,"column":78,"offset":3602},"end":{"line":49,"column":113,"offset":3637},"indent":[]}},{"type":"inlineCode","value":"api/app.ts","position":{"start":{"line":49,"column":113,"offset":3637},"end":{"line":49,"column":125,"offset":3649},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":49,"column":125,"offset":3649},"end":{"line":49,"column":129,"offset":3653},"indent":[]}},{"type":"inlineCode","value":"api/graphql.ts","position":{"start":{"line":49,"column":129,"offset":3653},"end":{"line":49,"column":145,"offset":3669},"indent":[]}},{"type":"text","value":", but modularizing your GraphQL type definitions can help scale your codebase. Neither approach is inheritly wrong though, so do as you see you fit. For this tutorial we'll use the modular style.","position":{"start":{"line":49,"column":145,"offset":3669},"end":{"line":49,"column":340,"offset":3864},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":3525},"end":{"line":49,"column":340,"offset":3864},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"mkdir api/graphql && touch api/graphql/Post.ts","position":{"start":{"line":51,"column":1,"offset":3866},"end":{"line":53,"column":4,"offset":3924},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To create the ","position":{"start":{"line":55,"column":1,"offset":3926},"end":{"line":55,"column":15,"offset":3940},"indent":[]}},{"type":"inlineCode","value":"Post","position":{"start":{"line":55,"column":15,"offset":3940},"end":{"line":55,"column":21,"offset":3946},"indent":[]}},{"type":"text","value":" object we'll import the ","position":{"start":{"line":55,"column":21,"offset":3946},"end":{"line":55,"column":46,"offset":3971},"indent":[]}},{"type":"inlineCode","value":"schema","position":{"start":{"line":55,"column":46,"offset":3971},"end":{"line":55,"column":54,"offset":3979},"indent":[]}},{"type":"text","value":" component from the ","position":{"start":{"line":55,"column":54,"offset":3979},"end":{"line":55,"column":74,"offset":3999},"indent":[]}},{"type":"inlineCode","value":"nexus","position":{"start":{"line":55,"column":74,"offset":3999},"end":{"line":55,"column":81,"offset":4006},"indent":[]}},{"type":"text","value":" package. ","position":{"start":{"line":55,"column":81,"offset":4006},"end":{"line":55,"column":91,"offset":4016},"indent":[]}},{"type":"inlineCode","value":"schema","position":{"start":{"line":55,"column":91,"offset":4016},"end":{"line":55,"column":99,"offset":4024},"indent":[]}},{"type":"text","value":" is where you'll find all the building blocks to craft your GraphQL types. Right now we are interested in the ","position":{"start":{"line":55,"column":99,"offset":4024},"end":{"line":55,"column":209,"offset":4134},"indent":[]}},{"type":"inlineCode","value":"schema.objectType","position":{"start":{"line":55,"column":209,"offset":4134},"end":{"line":55,"column":228,"offset":4153},"indent":[]}},{"type":"text","value":" method, which, unsurprisingly, helps building ","position":{"start":{"line":55,"column":228,"offset":4153},"end":{"line":55,"column":275,"offset":4200},"indent":[]}},{"type":"link","title":null,"url":"https://graphql.org/graphql-js/object-types/","children":[{"type":"text","value":"GraphQL Object Types","position":{"start":{"line":55,"column":276,"offset":4201},"end":{"line":55,"column":296,"offset":4221},"indent":[]}}],"position":{"start":{"line":55,"column":275,"offset":4200},"end":{"line":55,"column":343,"offset":4268},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":55,"column":343,"offset":4268},"end":{"line":55,"column":344,"offset":4269},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":3926},"end":{"line":55,"column":344,"offset":4269},"indent":[]}},{"type":"jsx","value":"<!-- prettier-ignore -->","position":{"start":{"line":57,"column":1,"offset":4271},"end":{"line":57,"column":25,"offset":4295},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"// api/graphql/Post.ts\n\nimport { schema } from 'nexus'\n\nschema.objectType({\n  name: 'Post',            // <- Name of your type\n  definition(t) {\n    t.int('id')            // <- Field named `id` of type `Int`\n    t.string('title')      // <- Field named `title` of type `String`\n    t.int('body')          // <- Field named `body` of type `String`\n    t.boolean('published') // <- Field named `published` of type `Boolean`\n  },\n})","position":{"start":{"line":58,"column":1,"offset":4296},"end":{"line":72,"column":4,"offset":4736},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<div class=\"NextIs SectionDivider\"></div>","position":{"start":{"line":74,"column":1,"offset":4738},"end":{"line":74,"column":42,"offset":4779},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"SDL?","position":{"start":{"line":76,"column":4,"offset":4784},"end":{"line":76,"column":8,"offset":4788},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":4781},"end":{"line":76,"column":8,"offset":4788},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once you've saved this file change to disk, your app will be restarted and the previous warning you had about an empty GraphQL schema should be gone.","position":{"start":{"line":78,"column":1,"offset":4790},"end":{"line":78,"column":150,"offset":4939},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":4790},"end":{"line":78,"column":150,"offset":4939},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You may notice that there's also now a new ","position":{"start":{"line":80,"column":1,"offset":4941},"end":{"line":80,"column":44,"offset":4984},"indent":[]}},{"type":"inlineCode","value":"schema.graphql","position":{"start":{"line":80,"column":44,"offset":4984},"end":{"line":80,"column":60,"offset":5000},"indent":[]}},{"type":"text","value":" file at your project root. It contains a representation of your schema in a syntax called the GraphQL Schema Definition Language (SDL for short). In dev mode Nexus generates this for you at every app restart. In it you should see the following:","position":{"start":{"line":80,"column":60,"offset":5000},"end":{"line":80,"column":305,"offset":5245},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":4941},"end":{"line":80,"column":305,"offset":5245},"indent":[]}},{"type":"code","lang":"graphql","meta":null,"value":"type Post {\n  id: Int\n  title: String\n  body: String\n  published: Boolean\n}","position":{"start":{"line":82,"column":1,"offset":5247},"end":{"line":89,"column":4,"offset":5337},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You are free to disable this file (settings discussed later) but its existence has two benefits for you to consider:","position":{"start":{"line":91,"column":1,"offset":5339},"end":{"line":91,"column":117,"offset":5455},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":5339},"end":{"line":91,"column":117,"offset":5455},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"For users familiar with SDL the correspondance between the source code and it may help them learn Nexus' schema API faster.","position":{"start":{"line":93,"column":4,"offset":5460},"end":{"line":93,"column":127,"offset":5583},"indent":[]}}],"position":{"start":{"line":93,"column":4,"offset":5460},"end":{"line":93,"column":127,"offset":5583},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":5457},"end":{"line":93,"column":127,"offset":5583},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The SDL syntax makes it an accessible way for others to evaluate incoming API changes without having to know about Nexus, or even JavaScript. Consider using the generated SDL file to improve your pull-request reviews.","position":{"start":{"line":94,"column":4,"offset":5587},"end":{"line":94,"column":221,"offset":5804},"indent":[]}}],"position":{"start":{"line":94,"column":4,"offset":5587},"end":{"line":94,"column":221,"offset":5804},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":5584},"end":{"line":94,"column":221,"offset":5804},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":5457},"end":{"line":94,"column":221,"offset":5804},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"For the remainder of this tutorial we'll be keeping SDL to the right of Nexus code blocks.","position":{"start":{"line":96,"column":1,"offset":5806},"end":{"line":96,"column":91,"offset":5896},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":5806},"end":{"line":96,"column":91,"offset":5896},"indent":[]}},{"type":"jsx","value":"<div class=\"NextIs SectionDivider\"></div>","position":{"start":{"line":98,"column":1,"offset":5898},"end":{"line":98,"column":42,"offset":5939},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Your First Home Grown Query","position":{"start":{"line":100,"column":4,"offset":5944},"end":{"line":100,"column":31,"offset":5971},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":5941},"end":{"line":100,"column":31,"offset":5971},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Your ","position":{"start":{"line":102,"column":1,"offset":5973},"end":{"line":102,"column":6,"offset":5978},"indent":[]}},{"type":"inlineCode","value":"Post","position":{"start":{"line":102,"column":6,"offset":5978},"end":{"line":102,"column":12,"offset":5984},"indent":[]}},{"type":"text","value":" object is in place now but there's still no way for clients to read that data. Let's change that. You'll use the special ","position":{"start":{"line":102,"column":12,"offset":5984},"end":{"line":102,"column":134,"offset":6106},"indent":[]}},{"type":"inlineCode","value":"Query","position":{"start":{"line":102,"column":134,"offset":6106},"end":{"line":102,"column":141,"offset":6113},"indent":[]}},{"type":"text","value":" object to expose your Post object.","position":{"start":{"line":102,"column":141,"offset":6113},"end":{"line":102,"column":176,"offset":6148},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":5973},"end":{"line":102,"column":176,"offset":6148},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We'll start by letting API clients read the drafts of your blog.","position":{"start":{"line":104,"column":1,"offset":6150},"end":{"line":104,"column":65,"offset":6214},"indent":[]}}],"position":{"start":{"line":104,"column":1,"offset":6150},"end":{"line":104,"column":65,"offset":6214},"indent":[]}},{"type":"jsx","value":"<div class=\"TightRow\">","position":{"start":{"line":106,"column":1,"offset":6216},"end":{"line":106,"column":23,"offset":6238},"indent":[]}},{"type":"jsx","value":"<!-- prettier-ignore -->","position":{"start":{"line":108,"column":1,"offset":6240},"end":{"line":108,"column":25,"offset":6264},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"// api/graphql/Post.ts     // 1\n// ...\n\nschema.extendType({\n  type: 'Query',            // 2\n  definition(t) {\n    t.field('drafts', {      // 3\n      type: 'Post',         // 4\n      list: true,           // 5\n    })\n  },\n})","position":{"start":{"line":109,"column":1,"offset":6265},"end":{"line":122,"column":4,"offset":6500},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"graphql","meta":null,"value":"type Query {\n  drafts: [Post!]\n}","position":{"start":{"line":124,"column":1,"offset":6502},"end":{"line":128,"column":4,"offset":6549},"indent":[1,1,1,1]}},{"type":"jsx","value":"</div>","position":{"start":{"line":130,"column":1,"offset":6551},"end":{"line":130,"column":7,"offset":6557},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The Query object is a central place in your schema where many other types will appear. Like before with the modular GraphQL types decision we again can decide to be modular here. We could either create a new ","position":{"start":{"line":132,"column":4,"offset":6562},"end":{"line":132,"column":212,"offset":6770},"indent":[]}},{"type":"inlineCode","value":"api/graphql/Query.ts","position":{"start":{"line":132,"column":212,"offset":6770},"end":{"line":132,"column":234,"offset":6792},"indent":[]}},{"type":"text","value":" module (not modular), or we could ","position":{"start":{"line":132,"column":234,"offset":6792},"end":{"line":132,"column":269,"offset":6827},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"collocate","position":{"start":{"line":132,"column":270,"offset":6828},"end":{"line":132,"column":279,"offset":6837},"indent":[]}}],"position":{"start":{"line":132,"column":269,"offset":6827},"end":{"line":132,"column":280,"offset":6838},"indent":[]}},{"type":"text","value":" the exposure of Post object with its definition in ","position":{"start":{"line":132,"column":280,"offset":6838},"end":{"line":132,"column":332,"offset":6890},"indent":[]}},{"type":"inlineCode","value":"api/graphql/Post.ts","position":{"start":{"line":132,"column":332,"offset":6890},"end":{"line":132,"column":353,"offset":6911},"indent":[]}},{"type":"text","value":" (modular). Staying consistent with before, we'll take the modular way.","position":{"start":{"line":132,"column":353,"offset":6911},"end":{"line":132,"column":424,"offset":6982},"indent":[]}}],"position":{"start":{"line":132,"column":4,"offset":6562},"end":{"line":132,"column":424,"offset":6982},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":6559},"end":{"line":132,"column":424,"offset":6982},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"To achieve colocation in Nexus we'll use ","position":{"start":{"line":133,"column":4,"offset":6986},"end":{"line":133,"column":45,"offset":7027},"indent":[]}},{"type":"inlineCode","value":"schema.extendType","position":{"start":{"line":133,"column":45,"offset":7027},"end":{"line":133,"column":64,"offset":7046},"indent":[]}},{"type":"text","value":". Its API is ","position":{"start":{"line":133,"column":64,"offset":7046},"end":{"line":133,"column":77,"offset":7059},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"very","position":{"start":{"line":133,"column":78,"offset":7060},"end":{"line":133,"column":82,"offset":7064},"indent":[]}}],"position":{"start":{"line":133,"column":77,"offset":7059},"end":{"line":133,"column":83,"offset":7065},"indent":[]}},{"type":"text","value":" similar to ","position":{"start":{"line":133,"column":83,"offset":7065},"end":{"line":133,"column":95,"offset":7077},"indent":[]}},{"type":"inlineCode","value":"schema.objectType","position":{"start":{"line":133,"column":95,"offset":7077},"end":{"line":133,"column":114,"offset":7096},"indent":[]}},{"type":"text","value":" with the difference that the defined fields are merged into the ","position":{"start":{"line":133,"column":114,"offset":7096},"end":{"line":133,"column":179,"offset":7161},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"targeted","position":{"start":{"line":133,"column":180,"offset":7162},"end":{"line":133,"column":188,"offset":7170},"indent":[]}}],"position":{"start":{"line":133,"column":179,"offset":7161},"end":{"line":133,"column":189,"offset":7171},"indent":[]}},{"type":"text","value":" type.","position":{"start":{"line":133,"column":189,"offset":7171},"end":{"line":133,"column":195,"offset":7177},"indent":[]}}],"position":{"start":{"line":133,"column":4,"offset":6986},"end":{"line":133,"column":195,"offset":7177},"indent":[]}}],"position":{"start":{"line":133,"column":1,"offset":6983},"end":{"line":133,"column":195,"offset":7177},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The first parameter specifies the field's name, here ","position":{"start":{"line":134,"column":4,"offset":7181},"end":{"line":134,"column":57,"offset":7234},"indent":[]}},{"type":"inlineCode","value":"drafts","position":{"start":{"line":134,"column":57,"offset":7234},"end":{"line":134,"column":65,"offset":7242},"indent":[]}}],"position":{"start":{"line":134,"column":4,"offset":7181},"end":{"line":134,"column":65,"offset":7242},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":7178},"end":{"line":134,"column":65,"offset":7242},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"type: 'Post'","position":{"start":{"line":135,"column":4,"offset":7246},"end":{"line":135,"column":18,"offset":7260},"indent":[]}},{"type":"text","value":" specifies what the field's type should be. Here, a ","position":{"start":{"line":135,"column":18,"offset":7260},"end":{"line":135,"column":70,"offset":7312},"indent":[]}},{"type":"inlineCode","value":"Post","position":{"start":{"line":135,"column":70,"offset":7312},"end":{"line":135,"column":76,"offset":7318},"indent":[]}}],"position":{"start":{"line":135,"column":4,"offset":7246},"end":{"line":135,"column":76,"offset":7318},"indent":[]}}],"position":{"start":{"line":135,"column":1,"offset":7243},"end":{"line":135,"column":76,"offset":7318},"indent":[]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"list: true","position":{"start":{"line":136,"column":4,"offset":7322},"end":{"line":136,"column":16,"offset":7334},"indent":[]}},{"type":"text","value":" augments the field's type spec, making it wrapped by a List type. Here, a ","position":{"start":{"line":136,"column":16,"offset":7334},"end":{"line":136,"column":91,"offset":7409},"indent":[]}},{"type":"inlineCode","value":"[Post]","position":{"start":{"line":136,"column":91,"offset":7409},"end":{"line":136,"column":99,"offset":7417},"indent":[]}},{"type":"text","value":". Nexus also provides the following shorthand for this 👇","position":{"start":{"line":136,"column":99,"offset":7417},"end":{"line":136,"column":156,"offset":7474},"indent":[]}}],"position":{"start":{"line":136,"column":4,"offset":7322},"end":{"line":136,"column":156,"offset":7474},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"definition(t) {\n  t.list.field('drafts', { ... })\n}","position":{"start":{"line":138,"column":4,"offset":7479},"end":{"line":142,"column":7,"offset":7552},"indent":[4,4,4,4]}}],"position":{"start":{"line":136,"column":1,"offset":7319},"end":{"line":142,"column":7,"offset":7552},"indent":[1,1,1,1,1,1]}}],"position":{"start":{"line":132,"column":1,"offset":6559},"end":{"line":142,"column":7,"offset":7552},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<div class=\"NextIs SectionDivider\"></div>","position":{"start":{"line":144,"column":1,"offset":7554},"end":{"line":144,"column":42,"offset":7595},"indent":[]}},{"type":"jsx","value":"<!-- ## Root Types -->","position":{"start":{"line":146,"column":1,"offset":7597},"end":{"line":146,"column":23,"offset":7619},"indent":[]}},{"type":"jsx","value":"<!-- TODO rethink this content; diagrams; later; it implicates backing types... -->","position":{"start":{"line":148,"column":1,"offset":7621},"end":{"line":148,"column":84,"offset":7704},"indent":[]}},{"type":"jsx","value":"<!-- There is one last thing to do here. You should be seeing error feedback from your IDE that the `resolve` field is missing. This is because `Query` (along with `Mutation` and `Subscription`) are _root types_. In GraphQL, the _fields_ of root types, unlike the fields of all other types, are _entrypoints_ into your API graph. And an entrypoint _must,_ intuitively, begin the process of getting data to fulfill the incoming operation.\n\nNow, the `resolve` property is where you, the developer, implement this process of getting data. Put another way, the `resolve` property is where you implement the logic that fulfills the field's specification. You may be noting how when we defined our `Post` object, we did _not_ write resolvers for its fields. The reason for that is that Nexus provides _default_ resolvers for fields that are not root and that don't have resolvers. This default implementation is to return a property from the parent data of the same name as the field name. And when that's not possible (because the parent data diverges), then Nexus will let you know _statically_, requiring the resolver from you. What's awesome is that none of this is require knowledge to get productive with Nexus thanks to the static error that Nexus will give you along the way right in your IDE. Follow these and for the most part you'll fall into the pit of success. Awesome!\n\nWe will not go into more detail about the data resolution systems of GraphQL and Nexus just now. This was just a brief overview to give you a sense of what is going on. Mastering a complete mental model will take a bit of time and practice. -->","position":{"start":{"line":150,"column":1,"offset":7706},"end":{"line":154,"column":245,"offset":9328},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You'll see some feedback from your IDE that you're missing a ","position":{"start":{"line":156,"column":1,"offset":9330},"end":{"line":156,"column":62,"offset":9391},"indent":[]}},{"type":"inlineCode","value":"resolve","position":{"start":{"line":156,"column":62,"offset":9391},"end":{"line":156,"column":71,"offset":9400},"indent":[]}},{"type":"text","value":" property. Go ahead and try to implement it, letting the autocompletion guide you.","position":{"start":{"line":156,"column":71,"offset":9400},"end":{"line":156,"column":153,"offset":9482},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":9330},"end":{"line":156,"column":153,"offset":9482},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"You might be wondering why Nexus hasn't complained about missing resolvers in some other cases so far. The answer is a more advanced topic that we'll cover later.","position":{"start":{"line":158,"column":3,"offset":9486},"end":{"line":158,"column":165,"offset":9648},"indent":[]}}],"position":{"start":{"line":158,"column":3,"offset":9486},"end":{"line":158,"column":165,"offset":9648},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":9484},"end":{"line":158,"column":165,"offset":9648},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"import { schema } from 'nexus'\n\nschema.extendType({\n  type: 'Query',\n  definition(t) {\n    t.field('drafts', {\n      type: 'Post',\n      list: true,\n      resolve() {\n        return [{ id: 1, title: 'Nexus', body: '...', published: false }]\n      },\n    })\n  },\n})","position":{"start":{"line":160,"column":1,"offset":9650},"end":{"line":175,"column":4,"offset":9924},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<div class=\"NextIs SectionDivider\"></div>","position":{"start":{"line":177,"column":1,"offset":9926},"end":{"line":177,"column":42,"offset":9967},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Try It Out","position":{"start":{"line":179,"column":4,"offset":9972},"end":{"line":179,"column":14,"offset":9982},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":9969},"end":{"line":179,"column":14,"offset":9982},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can now open up your GraphQL playground and try the following query (left); In response, you should see something like so (right):","position":{"start":{"line":181,"column":1,"offset":9984},"end":{"line":181,"column":135,"offset":10118},"indent":[]}}],"position":{"start":{"line":181,"column":1,"offset":9984},"end":{"line":181,"column":135,"offset":10118},"indent":[]}},{"type":"jsx","value":"<div class=\"TightRow\">","position":{"start":{"line":183,"column":1,"offset":10120},"end":{"line":183,"column":23,"offset":10142},"indent":[]}},{"type":"code","lang":"graphql","meta":null,"value":"{\n  drafts {\n    id\n    title\n    body\n    published\n  }\n}","position":{"start":{"line":185,"column":1,"offset":10144},"end":{"line":194,"column":4,"offset":10217},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"json","meta":null,"value":"{\n  \"data\": {\n    \"posts\": [\n      {\n        \"id\": 1,\n        \"title\": \"Nexus\",\n        \"body\": \"...\",\n        \"published\": false\n      }\n    ]\n  }\n}","position":{"start":{"line":196,"column":1,"offset":10219},"end":{"line":209,"column":4,"offset":10380},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"</div>","position":{"start":{"line":211,"column":1,"offset":10382},"end":{"line":211,"column":7,"offset":10388},"indent":[]}},{"type":"jsx","value":"<div class=\"NextIs SectionDivider\"></div>","position":{"start":{"line":213,"column":1,"offset":10390},"end":{"line":213,"column":42,"offset":10431},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Wrapping Up","position":{"start":{"line":215,"column":4,"offset":10436},"end":{"line":215,"column":15,"offset":10447},"indent":[]}}],"position":{"start":{"line":215,"column":1,"offset":10433},"end":{"line":215,"column":15,"offset":10447},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Congratulations! You've successfully got your first GraphQL schema up and running with Nexus! In the next chapter we'll explore adding some write capabilities to our API.","position":{"start":{"line":217,"column":1,"offset":10449},"end":{"line":217,"column":171,"offset":10619},"indent":[]}}],"position":{"start":{"line":217,"column":1,"offset":10449},"end":{"line":217,"column":171,"offset":10619},"indent":[]}},{"type":"jsx","value":"<div class=\"NextIs NextChapter\"></div>","position":{"start":{"line":219,"column":1,"offset":10621},"end":{"line":219,"column":39,"offset":10659},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"/tutorial/chapter-3-adding-mutations-to-your-api","children":[{"type":"text","value":"➳","position":{"start":{"line":221,"column":2,"offset":10662},"end":{"line":221,"column":3,"offset":10663},"indent":[]}}],"position":{"start":{"line":221,"column":1,"offset":10661},"end":{"line":221,"column":54,"offset":10714},"indent":[]}}],"position":{"start":{"line":221,"column":1,"offset":10661},"end":{"line":221,"column":54,"offset":10714},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"2. Writing Your First Schema\",\"metaDescription\":\"TODO\"}","position":{"start":{"line":224,"column":1,"offset":10717},"end":{"line":224,"column":94,"offset":10810},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":224,"column":94,"offset":10810}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"2. Writing Your First Schema\",\n  \"metaDescription\": \"TODO\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"chapter-2-br-writing-your-first-schema\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#chapter-2-br-writing-your-first-schema\",\n    \"aria-label\": \"chapter 2 br writing your first schema permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Chapter 2 \", mdx(\"br\", null), \" Writing Your First Schema\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In this chapter you're going to write your first schema. You'll learn about:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Writing GraphQL objects\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Exposing GraphQL objects for query operations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"GraphQL SDL file generation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Enhanced type safety & autocompletion\")), mdx(\"div\", {\n    className: \"NextIs SectionDivider\"\n  })), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"what-about-that-server\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#what-about-that-server\",\n    \"aria-label\": \"what about that server permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"What About That Server?\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In the last chapter you probably noticed the minimal setup required to get up and running. In fact, you might even be confused and wondering:\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\\"Hey, all I have is an empty \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app.ts\"), \" file, how can my server even be running?\\\"\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Well, Nexus comes with a server out of the box. There's no need for you to start or stop the server or otherwise think about it beyond your domain logic. Nexus wants you to focus on what makes your GraphQL API unique.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If your lock-in fears are tingling, know that \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"you still have \", mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"full\"), \" access\"), \" to the underlying server instance. So if you need to add custom middlewares, routes, and so on, you can. It happens that currently it is an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"express\"), \" instance but this area of Nexus will evolve (\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/graphql-nexus/nexus/issues/295\"\n  }), \"#295\"), \").\"), mdx(\"div\", {\n    className: \"NextIs SectionDivider\"\n  })), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"reflection\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#reflection\",\n    \"aria-label\": \"reflection permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Reflection?\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Before we get going we need a moment to introduce an important part of the Nexus development workflow. Nexus has an unconventional concept called \\\"Reflection\\\". It refers to the fact that, when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nexus dev\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nexus build\"), \" is running, not only is your application code being run, but \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"information is being gathered and artifacts are being derived\"), \". Some of Nexus' uses for reflection include:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Figuring out which plugins you are using, and the settings passed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Generating TypeScript types to give your resolvers complete type safety\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Generating an SDL file\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This partly explains why Nexus has a declarative API. It needs a way to run your app reliably at build time. Declarative APIs give Nexus a higher degree of control to do this. Declarative APIs also encode enough semantic value for Nexus to do the things it needs to.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Architecturally there's a lot more to say about reflection but for now, from a user point of view, just remember the following. You should \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"always\"), \" have your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nexus dev\"), \" running when you're working on your project \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"even\"), \" when you're not intending to use your server (e.g. access the GraphQL Playground). If you forget to run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nexus dev\"), \" then you will not, for example, get the static typing experience that you expect in your resolvers.\"), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"There are plans to run Nexus Reflection as a separate process integrated into your IDE. You can learn more about and track the feature here (\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/graphql-nexus/nexus/issues/949\"\n  }), \"#949\"), \")\")), mdx(\"div\", {\n    className: \"NextIs SectionDivider\"\n  })), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"model-the-domain\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#model-the-domain\",\n    \"aria-label\": \"model the domain permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Model The Domain\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Let's get started with our blog schema by modeling some key entities in the domain. We'll begin with the concept of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post\"), \". A post will represent a page in your blog. When not published, we'll call it a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"draft\"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Your modeling work is going to start on the API layer as opposed to the database layer. This API-first approach can be a good way to collaborate with frontend teams, getting their input in shaping the data early.\"), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"A note about terminology. We will be talking about the Post Object not Post Model. The difference is that at the API layer we have objects but at the database layer we have models. The name difference helps us talk about these different layers without confusion. It is also how GraphQL (API layer) and Prisma (database layer, discussed later) respectively refer to these things.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Create a new module for your Post object at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"api/graphql/Post.ts\"), \". We \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"could\"), \" write our whole schema within say \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"api/app.ts\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"api/graphql.ts\"), \", but modularizing your GraphQL type definitions can help scale your codebase. Neither approach is inheritly wrong though, so do as you see you fit. For this tutorial we'll use the modular style.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir api/graphql && touch api/graphql/Post.ts\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post\"), \" object we'll import the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"schema\"), \" component from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nexus\"), \" package. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"schema\"), \" is where you'll find all the building blocks to craft your GraphQL types. Right now we are interested in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"schema.objectType\"), \" method, which, unsurprisingly, helps building \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://graphql.org/graphql-js/object-types/\"\n  }), \"GraphQL Object Types\"), \".\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// api/graphql/Post.ts\\n\\nimport { schema } from 'nexus'\\n\\nschema.objectType({\\n  name: 'Post',            // <- Name of your type\\n  definition(t) {\\n    t.int('id')            // <- Field named `id` of type `Int`\\n    t.string('title')      // <- Field named `title` of type `String`\\n    t.int('body')          // <- Field named `body` of type `String`\\n    t.boolean('published') // <- Field named `published` of type `Boolean`\\n  },\\n})\\n\")), mdx(\"div\", {\n    className: \"NextIs SectionDivider\"\n  })), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"sdl\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#sdl\",\n    \"aria-label\": \"sdl permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"SDL?\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Once you've saved this file change to disk, your app will be restarted and the previous warning you had about an empty GraphQL schema should be gone.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You may notice that there's also now a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"schema.graphql\"), \" file at your project root. It contains a representation of your schema in a syntax called the GraphQL Schema Definition Language (SDL for short). In dev mode Nexus generates this for you at every app restart. In it you should see the following:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type Post {\\n  id: Int\\n  title: String\\n  body: String\\n  published: Boolean\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You are free to disable this file (settings discussed later) but its existence has two benefits for you to consider:\"), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For users familiar with SDL the correspondance between the source code and it may help them learn Nexus' schema API faster.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The SDL syntax makes it an accessible way for others to evaluate incoming API changes without having to know about Nexus, or even JavaScript. Consider using the generated SDL file to improve your pull-request reviews.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"For the remainder of this tutorial we'll be keeping SDL to the right of Nexus code blocks.\"), mdx(\"div\", {\n    className: \"NextIs SectionDivider\"\n  })), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"your-first-home-grown-query\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#your-first-home-grown-query\",\n    \"aria-label\": \"your first home grown query permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Your First Home Grown Query\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post\"), \" object is in place now but there's still no way for clients to read that data. Let's change that. You'll use the special \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Query\"), \" object to expose your Post object.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We'll start by letting API clients read the drafts of your blog.\"), mdx(\"div\", {\n    className: \"TightRow\"\n  }, mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// api/graphql/Post.ts     // 1\\n// ...\\n\\nschema.extendType({\\n  type: 'Query',            // 2\\n  definition(t) {\\n    t.field('drafts', {      // 3\\n      type: 'Post',         // 4\\n      list: true,           // 5\\n    })\\n  },\\n})\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type Query {\\n  drafts: [Post!]\\n}\\n\"))), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The Query object is a central place in your schema where many other types will appear. Like before with the modular GraphQL types decision we again can decide to be modular here. We could either create a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"api/graphql/Query.ts\"), \" module (not modular), or we could \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"collocate\"), \" the exposure of Post object with its definition in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"api/graphql/Post.ts\"), \" (modular). Staying consistent with before, we'll take the modular way.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To achieve colocation in Nexus we'll use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"schema.extendType\"), \". Its API is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"very\"), \" similar to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"schema.objectType\"), \" with the difference that the defined fields are merged into the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"targeted\"), \" type.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The first parameter specifies the field's name, here \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"drafts\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type: 'Post'\"), \" specifies what the field's type should be. Here, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"list: true\"), \" augments the field's type spec, making it wrapped by a List type. Here, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[Post]\"), \". Nexus also provides the following shorthand for this \\uD83D\\uDC47\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"definition(t) {\\n  t.list.field('drafts', { ... })\\n}\\n\")))), mdx(\"div\", {\n    className: \"NextIs SectionDivider\"\n  }), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You'll see some feedback from your IDE that you're missing a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resolve\"), \" property. Go ahead and try to implement it, letting the autocompletion guide you.\"), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"You might be wondering why Nexus hasn't complained about missing resolvers in some other cases so far. The answer is a more advanced topic that we'll cover later.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { schema } from 'nexus'\\n\\nschema.extendType({\\n  type: 'Query',\\n  definition(t) {\\n    t.field('drafts', {\\n      type: 'Post',\\n      list: true,\\n      resolve() {\\n        return [{ id: 1, title: 'Nexus', body: '...', published: false }]\\n      },\\n    })\\n  },\\n})\\n\")), mdx(\"div\", {\n    className: \"NextIs SectionDivider\"\n  })), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"try-it-out\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#try-it-out\",\n    \"aria-label\": \"try it out permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Try It Out\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can now open up your GraphQL playground and try the following query (left); In response, you should see something like so (right):\"), mdx(\"div\", {\n    className: \"TightRow\"\n  }, mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"{\\n  drafts {\\n    id\\n    title\\n    body\\n    published\\n  }\\n}\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"posts\\\": [\\n      {\\n        \\\"id\\\": 1,\\n        \\\"title\\\": \\\"Nexus\\\",\\n        \\\"body\\\": \\\"...\\\",\\n        \\\"published\\\": false\\n      }\\n    ]\\n  }\\n}\\n\"))), mdx(\"div\", {\n    className: \"NextIs SectionDivider\"\n  })), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"wrapping-up\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#wrapping-up\",\n    \"aria-label\": \"wrapping up permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Wrapping Up\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Congratulations! You've successfully got your first GraphQL schema up and running with Nexus! In the next chapter we'll explore adding some write capabilities to our API.\"), mdx(\"div\", {\n    className: \"NextIs NextChapter\"\n  }), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/tutorial/chapter-3-adding-mutations-to-your-api\"\n  }), \"\\u27B3\"))));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"2. Writing Your First Schema\",\n  \"metaDescription\": \"TODO\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"chapter-2-br-writing-your-first-schema\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#chapter-2-br-writing-your-first-schema\",\n          \"aria-label\": \"chapter 2 br writing your first schema permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Chapter 2 `}<br />{` Writing Your First Schema`}</h2><p parentName=\"section\">{`In this chapter you're going to write your first schema. You'll learn about:`}</p><ul parentName=\"section\">\n        <li parentName=\"ul\">{`Writing GraphQL objects`}</li>\n        <li parentName=\"ul\">{`Exposing GraphQL objects for query operations`}</li>\n        <li parentName=\"ul\">{`GraphQL SDL file generation`}</li>\n        <li parentName=\"ul\">{`Enhanced type safety & autocompletion`}</li>\n      </ul><div class=\"NextIs SectionDivider\"></div></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"what-about-that-server\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#what-about-that-server\",\n          \"aria-label\": \"what about that server permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`What About That Server?`}</h2><p parentName=\"section\">{`In the last chapter you probably noticed the minimal setup required to get up and running. In fact, you might even be confused and wondering:`}</p><p parentName=\"section\">{`\"Hey, all I have is an empty `}<inlineCode parentName=\"p\">{`app.ts`}</inlineCode>{` file, how can my server even be running?\"`}</p><p parentName=\"section\">{`Well, Nexus comes with a server out of the box. There's no need for you to start or stop the server or otherwise think about it beyond your domain logic. Nexus wants you to focus on what makes your GraphQL API unique.`}</p><p parentName=\"section\">{`If your lock-in fears are tingling, know that `}<strong parentName=\"p\">{`you still have `}<em parentName=\"strong\">{`full`}</em>{` access`}</strong>{` to the underlying server instance. So if you need to add custom middlewares, routes, and so on, you can. It happens that currently it is an `}<inlineCode parentName=\"p\">{`express`}</inlineCode>{` instance but this area of Nexus will evolve (`}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/graphql-nexus/nexus/issues/295\"\n        }}>{`#295`}</a>{`).`}</p><div class=\"NextIs SectionDivider\"></div></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"reflection\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#reflection\",\n          \"aria-label\": \"reflection permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Reflection?`}</h2><p parentName=\"section\">{`Before we get going we need a moment to introduce an important part of the Nexus development workflow. Nexus has an unconventional concept called \"Reflection\". It refers to the fact that, when `}<inlineCode parentName=\"p\">{`nexus dev`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`nexus build`}</inlineCode>{` is running, not only is your application code being run, but `}<strong parentName=\"p\">{`information is being gathered and artifacts are being derived`}</strong>{`. Some of Nexus' uses for reflection include:`}</p><ul parentName=\"section\">\n        <li parentName=\"ul\">{`Figuring out which plugins you are using, and the settings passed`}</li>\n        <li parentName=\"ul\">{`Generating TypeScript types to give your resolvers complete type safety`}</li>\n        <li parentName=\"ul\">{`Generating an SDL file`}</li>\n      </ul><p parentName=\"section\">{`This partly explains why Nexus has a declarative API. It needs a way to run your app reliably at build time. Declarative APIs give Nexus a higher degree of control to do this. Declarative APIs also encode enough semantic value for Nexus to do the things it needs to.`}</p><p parentName=\"section\">{`Architecturally there's a lot more to say about reflection but for now, from a user point of view, just remember the following. You should `}<em parentName=\"p\">{`always`}</em>{` have your `}<inlineCode parentName=\"p\">{`nexus dev`}</inlineCode>{` running when you're working on your project `}<em parentName=\"p\">{`even`}</em>{` when you're not intending to use your server (e.g. access the GraphQL Playground). If you forget to run `}<inlineCode parentName=\"p\">{`nexus dev`}</inlineCode>{` then you will not, for example, get the static typing experience that you expect in your resolvers.`}</p><blockquote parentName=\"section\">\n        <p parentName=\"blockquote\">{`There are plans to run Nexus Reflection as a separate process integrated into your IDE. You can learn more about and track the feature here (`}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/graphql-nexus/nexus/issues/949\"\n          }}>{`#949`}</a>{`)`}</p>\n      </blockquote><div class=\"NextIs SectionDivider\"></div></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"model-the-domain\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#model-the-domain\",\n          \"aria-label\": \"model the domain permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Model The Domain`}</h2><p parentName=\"section\">{`Let's get started with our blog schema by modeling some key entities in the domain. We'll begin with the concept of a `}<inlineCode parentName=\"p\">{`Post`}</inlineCode>{`. A post will represent a page in your blog. When not published, we'll call it a `}<em parentName=\"p\">{`draft`}</em>{`.`}</p><p parentName=\"section\">{`Your modeling work is going to start on the API layer as opposed to the database layer. This API-first approach can be a good way to collaborate with frontend teams, getting their input in shaping the data early.`}</p><blockquote parentName=\"section\">\n        <p parentName=\"blockquote\">{`A note about terminology. We will be talking about the Post Object not Post Model. The difference is that at the API layer we have objects but at the database layer we have models. The name difference helps us talk about these different layers without confusion. It is also how GraphQL (API layer) and Prisma (database layer, discussed later) respectively refer to these things.`}</p>\n      </blockquote><p parentName=\"section\">{`Create a new module for your Post object at `}<inlineCode parentName=\"p\">{`api/graphql/Post.ts`}</inlineCode>{`. We `}<em parentName=\"p\">{`could`}</em>{` write our whole schema within say `}<inlineCode parentName=\"p\">{`api/app.ts`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`api/graphql.ts`}</inlineCode>{`, but modularizing your GraphQL type definitions can help scale your codebase. Neither approach is inheritly wrong though, so do as you see you fit. For this tutorial we'll use the modular style.`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}>{`mkdir api/graphql && touch api/graphql/Post.ts\n`}</code></pre><p parentName=\"section\">{`To create the `}<inlineCode parentName=\"p\">{`Post`}</inlineCode>{` object we'll import the `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{` component from the `}<inlineCode parentName=\"p\">{`nexus`}</inlineCode>{` package. `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{` is where you'll find all the building blocks to craft your GraphQL types. Right now we are interested in the `}<inlineCode parentName=\"p\">{`schema.objectType`}</inlineCode>{` method, which, unsurprisingly, helps building `}<a parentName=\"p\" {...{\n          \"href\": \"https://graphql.org/graphql-js/object-types/\"\n        }}>{`GraphQL Object Types`}</a>{`.`}</p>{\n        /* prettier-ignore */\n      }<pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-ts\"\n        }}>{`// api/graphql/Post.ts\n\nimport { schema } from 'nexus'\n\nschema.objectType({\n  name: 'Post',            // <- Name of your type\n  definition(t) {\n    t.int('id')            // <- Field named \\`id\\` of type \\`Int\\`\n    t.string('title')      // <- Field named \\`title\\` of type \\`String\\`\n    t.int('body')          // <- Field named \\`body\\` of type \\`String\\`\n    t.boolean('published') // <- Field named \\`published\\` of type \\`Boolean\\`\n  },\n})\n`}</code></pre><div class=\"NextIs SectionDivider\"></div></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"sdl\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#sdl\",\n          \"aria-label\": \"sdl permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`SDL?`}</h2><p parentName=\"section\">{`Once you've saved this file change to disk, your app will be restarted and the previous warning you had about an empty GraphQL schema should be gone.`}</p><p parentName=\"section\">{`You may notice that there's also now a new `}<inlineCode parentName=\"p\">{`schema.graphql`}</inlineCode>{` file at your project root. It contains a representation of your schema in a syntax called the GraphQL Schema Definition Language (SDL for short). In dev mode Nexus generates this for you at every app restart. In it you should see the following:`}</p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-graphql\"\n        }}>{`type Post {\n  id: Int\n  title: String\n  body: String\n  published: Boolean\n}\n`}</code></pre><p parentName=\"section\">{`You are free to disable this file (settings discussed later) but its existence has two benefits for you to consider:`}</p><ol parentName=\"section\">\n        <li parentName=\"ol\">{`For users familiar with SDL the correspondance between the source code and it may help them learn Nexus' schema API faster.`}</li>\n        <li parentName=\"ol\">{`The SDL syntax makes it an accessible way for others to evaluate incoming API changes without having to know about Nexus, or even JavaScript. Consider using the generated SDL file to improve your pull-request reviews.`}</li>\n      </ol><p parentName=\"section\">{`For the remainder of this tutorial we'll be keeping SDL to the right of Nexus code blocks.`}</p><div class=\"NextIs SectionDivider\"></div></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"your-first-home-grown-query\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#your-first-home-grown-query\",\n          \"aria-label\": \"your first home grown query permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Your First Home Grown Query`}</h2><p parentName=\"section\">{`Your `}<inlineCode parentName=\"p\">{`Post`}</inlineCode>{` object is in place now but there's still no way for clients to read that data. Let's change that. You'll use the special `}<inlineCode parentName=\"p\">{`Query`}</inlineCode>{` object to expose your Post object.`}</p><p parentName=\"section\">{`We'll start by letting API clients read the drafts of your blog.`}</p><div class=\"TightRow\">{\n          /* prettier-ignore */\n        }<pre parentName=\"section\"><code parentName=\"pre\" {...{\n            \"className\": \"language-ts\"\n          }}>{`// api/graphql/Post.ts     // 1\n// ...\n\nschema.extendType({\n  type: 'Query',            // 2\n  definition(t) {\n    t.field('drafts', {      // 3\n      type: 'Post',         // 4\n      list: true,           // 5\n    })\n  },\n})\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n            \"className\": \"language-graphql\"\n          }}>{`type Query {\n  drafts: [Post!]\n}\n`}</code></pre></div><ol parentName=\"section\">\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`The Query object is a central place in your schema where many other types will appear. Like before with the modular GraphQL types decision we again can decide to be modular here. We could either create a new `}<inlineCode parentName=\"p\">{`api/graphql/Query.ts`}</inlineCode>{` module (not modular), or we could `}<em parentName=\"p\">{`collocate`}</em>{` the exposure of Post object with its definition in `}<inlineCode parentName=\"p\">{`api/graphql/Post.ts`}</inlineCode>{` (modular). Staying consistent with before, we'll take the modular way.`}</p>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`To achieve colocation in Nexus we'll use `}<inlineCode parentName=\"p\">{`schema.extendType`}</inlineCode>{`. Its API is `}<em parentName=\"p\">{`very`}</em>{` similar to `}<inlineCode parentName=\"p\">{`schema.objectType`}</inlineCode>{` with the difference that the defined fields are merged into the `}<em parentName=\"p\">{`targeted`}</em>{` type.`}</p>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\">{`The first parameter specifies the field's name, here `}<inlineCode parentName=\"p\">{`drafts`}</inlineCode></p>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\"><inlineCode parentName=\"p\">{`type: 'Post'`}</inlineCode>{` specifies what the field's type should be. Here, a `}<inlineCode parentName=\"p\">{`Post`}</inlineCode></p>\n        </li>\n        <li parentName=\"ol\">\n          <p parentName=\"li\"><inlineCode parentName=\"p\">{`list: true`}</inlineCode>{` augments the field's type spec, making it wrapped by a List type. Here, a `}<inlineCode parentName=\"p\">{`[Post]`}</inlineCode>{`. Nexus also provides the following shorthand for this 👇`}</p>\n          <pre parentName=\"li\"><code parentName=\"pre\" {...{\n              \"className\": \"language-ts\"\n            }}>{`definition(t) {\n  t.list.field('drafts', { ... })\n}\n`}</code></pre>\n        </li>\n      </ol><div class=\"NextIs SectionDivider\"></div>{\n        /* ## Root Types */\n      }{\n        /* TODO rethink this content; diagrams; later; it implicates backing types... */\n      }{\n        /* There is one last thing to do here. You should be seeing error feedback from your IDE that the `resolve` field is missing. This is because `Query` (along with `Mutation` and `Subscription`) are _root types_. In GraphQL, the _fields_ of root types, unlike the fields of all other types, are _entrypoints_ into your API graph. And an entrypoint _must,_ intuitively, begin the process of getting data to fulfill the incoming operation.\n        Now, the `resolve` property is where you, the developer, implement this process of getting data. Put another way, the `resolve` property is where you implement the logic that fulfills the field's specification. You may be noting how when we defined our `Post` object, we did _not_ write resolvers for its fields. The reason for that is that Nexus provides _default_ resolvers for fields that are not root and that don't have resolvers. This default implementation is to return a property from the parent data of the same name as the field name. And when that's not possible (because the parent data diverges), then Nexus will let you know _statically_, requiring the resolver from you. What's awesome is that none of this is require knowledge to get productive with Nexus thanks to the static error that Nexus will give you along the way right in your IDE. Follow these and for the most part you'll fall into the pit of success. Awesome!\n        We will not go into more detail about the data resolution systems of GraphQL and Nexus just now. This was just a brief overview to give you a sense of what is going on. Mastering a complete mental model will take a bit of time and practice. */\n      }<p parentName=\"section\">{`You'll see some feedback from your IDE that you're missing a `}<inlineCode parentName=\"p\">{`resolve`}</inlineCode>{` property. Go ahead and try to implement it, letting the autocompletion guide you.`}</p><blockquote parentName=\"section\">\n        <p parentName=\"blockquote\">{`You might be wondering why Nexus hasn't complained about missing resolvers in some other cases so far. The answer is a more advanced topic that we'll cover later.`}</p>\n      </blockquote><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-ts\"\n        }}>{`import { schema } from 'nexus'\n\nschema.extendType({\n  type: 'Query',\n  definition(t) {\n    t.field('drafts', {\n      type: 'Post',\n      list: true,\n      resolve() {\n        return [{ id: 1, title: 'Nexus', body: '...', published: false }]\n      },\n    })\n  },\n})\n`}</code></pre><div class=\"NextIs SectionDivider\"></div></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"try-it-out\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#try-it-out\",\n          \"aria-label\": \"try it out permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Try It Out`}</h2><p parentName=\"section\">{`You can now open up your GraphQL playground and try the following query (left); In response, you should see something like so (right):`}</p><div class=\"TightRow\"><pre parentName=\"section\"><code parentName=\"pre\" {...{\n            \"className\": \"language-graphql\"\n          }}>{`{\n  drafts {\n    id\n    title\n    body\n    published\n  }\n}\n`}</code></pre><pre parentName=\"section\"><code parentName=\"pre\" {...{\n            \"className\": \"language-json\"\n          }}>{`{\n  \"data\": {\n    \"posts\": [\n      {\n        \"id\": 1,\n        \"title\": \"Nexus\",\n        \"body\": \"...\",\n        \"published\": false\n      }\n    ]\n  }\n}\n`}</code></pre></div><div class=\"NextIs SectionDivider\"></div></section>\n    <section><h2 parentName=\"section\" {...{\n        \"id\": \"wrapping-up\",\n        \"style\": {\n          \"position\": \"relative\"\n        }\n      }}><a parentName=\"h2\" {...{\n          \"href\": \"#wrapping-up\",\n          \"aria-label\": \"wrapping up permalink\",\n          \"className\": \"title-link before\"\n        }}><svg parentName=\"a\" {...{\n            \"width\": \"17\",\n            \"height\": \"18\",\n            \"viewBox\": \"0 0 17 18\",\n            \"fill\": \"none\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\"\n          }}>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 6.33337H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M1.5 11.6666H15.5\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M6.75 1L5 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}<path parentName=\"svg\" {...{\n              \"d\": \"M12 1L10.25 17\",\n              \"stroke\": \"#CBD5E0\",\n              \"strokeWidth\": \"2\",\n              \"strokeLineCap\": \"round\",\n              \"strokeLineJoin\": \"round\"\n            }}></path>{`\n      `}</svg></a>{`Wrapping Up`}</h2><p parentName=\"section\">{`Congratulations! You've successfully got your first GraphQL schema up and running with Nexus! In the next chapter we'll explore adding some write capabilities to our API.`}</p><div class=\"NextIs NextChapter\"></div><p parentName=\"section\"><a parentName=\"p\" {...{\n          \"href\": \"/tutorial/chapter-3-adding-mutations-to-your-api\"\n        }}>{`➳`}</a></p></section>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}