{"componentChunkName":"component---src-layouts-article-layout-tsx","path":"/getting-started/tutorial/chapter-persisting-data-via-prisma","result":{"data":{"site":{"siteMetadata":{"docsLocation":"https://github.com/graphql-nexus/docs/tree/master/content"}},"mdx":{"fields":{"slug":"/01-getting-started/03-tutorial/06-chapter-5-persisting-data-via-prisma"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"5. Persisting Data (via Prisma)\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"chapter-5-br-persisting-data-via-prisma\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#chapter-5-br-persisting-data-via-prisma\",\n    \"aria-label\": \"chapter 5 br persisting data via prisma permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Chapter 5 \", mdx(\"br\", null), \" Persisting Data (via Prisma)\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"So far we have been working with in-memory data while we learn about other parts of Nexus in a focused manner, but in this chapter we're going to put the focus squarely on data and show how Nexus can be used with a database. This marks an important step toward your blog app becoming more real. You'll learn about:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Prisma\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Nexus Plugins\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Setting up a Postgres database locally\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We're going to be using a database called Postgres and a tool called Prisma to interact with it.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Postgres is a well known open-source relational database. Prisma is a new way of working with databases that we'll learn more about in a moment.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Its important to understand that Nexus does not \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"require\"), \" these technology choices and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"could\"), \" actually be used with any database and abstractions over them (raw SQL, query builder, ORM..). However, Nexus is built by a team at Prisma (the company) and unsurprisingly there is great integration between its tools and Nexus.\")), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"prisma\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#prisma\",\n    \"aria-label\": \"prisma permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Prisma?\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"So, what \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"is\"), \" Prisma? It is an open source database toolkit that consists of the following parts:\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Prisma Client\"), \": Auto-generated and type-safe query builder for Node.js & TypeScript\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Prisma Migrate\"), \" (experimental): Declarative data modeling & migration system\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Prisma Studio\"), \" (experimental): GUI to view and edit data in your database\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"At the heart of Prisma is the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Prisma Schema,\"), \" a file usually called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"schema.prisma\"), \", that you will see later in this tutorial. It is a declarative file wherein using a domain specific language you encode your database schema, connection to the database, and more.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Prisma has great \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.prisma.io/docs/understand-prisma/introduction\"\n  }), \"docs\"), \" so definitely check them out at some point. For now you can stay in the flow of this tutorial if you want though. We're going to focus on Prisma Client.\")), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"nexus-plugins\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#nexus-plugins\",\n    \"aria-label\": \"nexus plugins permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Nexus plugins?\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Now we're ready to actually use Prisma with Nexus! This is going to be achieved by way of a Nexus \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"plugin\"), \". What? Yep, Nexus has a plugin ecosystem which can be used to enhance your app and development experience in a number of ways! Nexus Plugins broadly breakdown into three areas of enhancement:\"), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"worktime:\"), \" watch new file types, hook onto events, attach new CLI commands, ...\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"runtime:\"), \" add schema middleware, setting presets, field builders, custom scalars, ...\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"testtime:\"), \" attach data to the Nexus Test Context\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Plugin packages are usually named after the following convention: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nexus-plugin-<name>\"), \" and we refer to them just by either name suffix part. So for the example when we say that Prisma and Nexus integrate together via the Nexus \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prisma\"), \" plugin that means \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nexus-plugin-prisma\"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Another convention that they usually follow is that they use the default export of the package as well as a named export that is a camel case variant of the name part mentioned before (see below for example).\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Plugins are easy to use:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm add nexus-plugin-foo\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import foo from 'nexus-plugin-foo'\\nimport { foo } from 'nexus-plugin-foo' // alternative, as you wish\\nimport { use } from 'nexus'\\n\\nuse(foo())\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"All plugins are functions. They can accept optional or required settings if the plugin authors wishes so. Once a plugin is imported and invoked, its return value is passed to the Nexus \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"use\"), \" method. Once done, your app is using the plugin. On the surface the method looks similar to that of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"express\"), \"'s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"use\"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Note how the plugins only exist within your app code yet we mentioned before that plugins can augment worktime aspects like the CLI. Neat right? No external config files with plugin setup are required. Its one of many examples of how Nexus provides a powerful and extensible system without forwarding you, the user, a complexity tax for it.\")), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"connect-to-your-database\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#connect-to-your-database\",\n    \"aria-label\": \"connect to your database permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Connect to your database\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Now that you know a bit about Prisma and Nexus plugins, let's get going! Do the following:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install the Prisma plugin\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use it in your \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"api/app.ts\"), \" module\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create your Prisma Schema\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".env\"), \" file to store your database credentials\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Connect to your database\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"like so:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm add nexus-plugin-prisma\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// api/app.ts\\n\\nimport { use } from 'nexus'\\nimport { prisma } from 'nexus-plugin-prisma'\\n\\nuse(prisma())\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir prisma\\ntouch prisma/schema.prisma\\ntouch prisma/.env\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-groovy\"\n  }), \"// prisma/schema.prisma\\n\\ndatasource postgres {\\n  provider = \\\"postgresql\\\"\\n  url      = env(\\\"DATABASE_URL\\\")\\n}\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"# prisma/.env\\nDATABASE_URL=\\\"<postgres_connection_url>\\\"\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Almost done, but we still need to setup a Postgres database for our app to connect to. There are a ton of ways to do this so we're just going to show the most straight forward cross-platform way we know how. First, make sure you have \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.docker.com/get-docker/\"\n  }), \"docker installed\"), \". Then, simply run this command:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"\\u276F docker run --detach --publish 5432:5432 -e POSTGRES_PASSWORD=postgres --name postgres postgres:10.12\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"That's it. You now have a Postgres server running. You can connect to it at a URL like:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-markdown\"\n  }), \"postgresql://postgres:postgres@localhost:5432/myapp\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If you prefer setting up your local Postgres another way go for it. If our suggest approach doesn't work for you, then checkout a few other approaches listed on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.nexusjs.org/#/references/recipes?id=setting-up-postgresql\"\n  }), \"Nexus recipes page\"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Finally, in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prisma/.env\"), \" file you've created before, replace \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<postgres_connection_url>\"), \" with your actual database URL.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Confirm things are setup correctly by ... \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TODO: find a way to make sure their connection url is working\"))), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"create-your-database-schema\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#create-your-database-schema\",\n    \"aria-label\": \"create your database schema permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Create your database schema\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"It is now time to replace our in-memory data with actual tables in our database. To do this we'll write models in our Prisma Schema.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In chapters 2 and 3 we already began to model our blog domain with the GraphQL type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post\"), \". We can base our models on that prior work, resulting in a Prisma Schema like so:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-groovy\"\n  }), \"// prisma/schema.prisma\\n// ...\\n\\nmodel Post {\\n  id        Int     @id @default(autoincrement())\\n  title     String\\n  body      String\\n  published Boolean\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"With our database schema specified, we're now ready to proceed to our first database migration! To do that, we'll use the Prisma CLI.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Generate our migration files...\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npx prisma migrate save --experimental\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Then, apply the migration...\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npx prisma migrate up --experimental\\n\"))), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"access-your-database\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#access-your-database\",\n    \"aria-label\": \"access your database permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Access your database\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Now let's finally ditch our in-memory data! Let's start by removing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"api/db.ts\"), \" module and then be guided by TypeScript errors.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"rm api/db.ts\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"api/app.ts\"), \" module, remove the db import and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"schema.addToContext\"), \" call.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"+++ api/app.ts\\n\\n- import { schema, use } from 'nexus'\\n+ import { use } from 'nexus'\\n  import { prisma } from 'nexus-plugin-prisma'\\n- import { db } from './db'\\n\\n  use(prisma())\\n\\n- schema.addToContext(() => {\\n-   return {\\n-     db,\\n-   }\\n- })\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You might be wondering how you'll maintain access to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db\"), \" client in your GraphQL Context given that we've just deleted it. Nexus plugins help here. One of their many capabilities is augmenting your GraphQL context.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In this case, the prisma plugin adds a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db\"), \" property, an instance of Prisma Client, one of the tools in the Prisma toolkit.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Let's now replace all our previous in-memory db interactions with calls to the Prisma Client\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"schema.extendType({\\n  type: 'Query',\\n  definition(t) {\\n    t.list.field('drafts', {\\n      type: 'Post',\\n      resolve(_root, _args, ctx) {\\n-        return ctx.db.posts.filter((p) => p.published === false)\\n+        return ctx.db.post.findMany({ where: { published: false } })\\n      },\\n    });\\n    t.list.field('posts', {\\n      type: 'Post',\\n      resolve(_root, _args, ctx) {\\n-       return ctx.db.posts.filter((p) => p.published === true)\\n+       return ctx.db.post.findMany({ where: { published: true } })\\n      },\\n    })\\n  },\\n});\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"schema.extendType({\\n  type: 'Mutation',\\n  definition(t) {\\n    t.field('createDraft', {\\n      type: 'Post',\\n      args: {\\n        title: schema.stringArg({ required: true }),\\n        body: schema.stringArg({ required: true }),\\n      },\\n      resolve(_root, args, ctx) {\\n        const draft = {\\n-         id: ctx.inDb.posts.length + 1,\\n          title: args.title,\\n          body: args.body,\\n          published: false,\\n        }\\n-       ctx.inDb.posts.push(draft)\\n\\n-       return draft\\n+       return ctx.db.post.create({ data: draft })\\n      },\\n    })\\n\\n    t.field('publish', {\\n      type: 'Post',\\n      args: {\\n        draftId: schema.intArg({ required: true }),\\n      },\\n      resolve(_root, args, ctx) {\\n-       let postToPublish = ctx.inDb.posts.find((p) => p.id === args.draftId)\\n\\n-       if (!postToPublish) {\\n-         throw new Error('Could not find draft with id ' + args.draftId)\\n-       }\\n\\n-       postToPublish.published = true\\n\\n-       return postToPublish\\n\\n+       return ctx.db.post.update({\\n+         where: { id: args.draftId },\\n+         data: {\\n+           published: true,\\n+         },\\n+       });\\n      },\\n    })\\n  },\\n})\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If you need a copy & pastable version, here it is\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"schema.extendType({\\n  type: 'Query',\\n  definition(t) {\\n    t.list.field('drafts', {\\n      type: 'Post',\\n      resolve(_root, _args, ctx) {\\n        return ctx.db.post.findMany({ where: { published: false } })\\n      },\\n    })\\n    t.list.field('posts', {\\n      type: 'Post',\\n      resolve(_root, _args, ctx) {\\n        return ctx.db.post.findMany({ where: { published: true } })\\n      },\\n    })\\n  },\\n})\\n\\nschema.extendType({\\n  type: 'Mutation',\\n  definition(t) {\\n    t.field('createDraft', {\\n      type: 'Post',\\n      args: {\\n        title: schema.stringArg({ required: true }),\\n        body: schema.stringArg({ required: true }),\\n      },\\n      resolve(_root, args, ctx) {\\n        const draft = {\\n          title: args.title,\\n          body: args.body,\\n          published: false,\\n        }\\n        return ctx.db.post.create({ data: draft })\\n      },\\n    })\\n\\n    t.field('publish', {\\n      type: 'Post',\\n      args: {\\n        draftId: schema.intArg({ required: true }),\\n      },\\n      resolve(_root, args, ctx) {\\n        return ctx.db.post.update({\\n          where: { id: args.draftId },\\n          data: {\\n            published: true,\\n          },\\n        })\\n      },\\n    })\\n  },\\n})\\n\"))), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"try-it-out\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#try-it-out\",\n    \"aria-label\": \"try it out permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Try It Out\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Awesome, you're ready to open up the playground and create a draft! If all goes well, good job! If not, no worries, there's a lot of integration pieces in this chapter where something could have gone wrong. If after reviewing your steps you still don't understand the issue, feel free to open up a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nxs.li/discussions\"\n  }), \"discussion\"), \" asking for help.\")), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"wrapping-up\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#wrapping-up\",\n    \"aria-label\": \"wrapping up permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"Wrapping Up\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We've just changed our code, so we must be due or overdue for a test update right? Well, in the next chapter we'll do just that, and show you how Nexus testing works with Prisma.\"), mdx(\"div\", {\n    className: \"NextIs NextChapter\"\n  }), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/tutorial/chapter-6-testing-with-prisma\"\n  }), \"\\u27B3\"))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","relativePath":"01-getting-started/03-tutorial/06-chapter-5-persisting-data-via-prisma.mdx"},"tableOfContents":{"items":[{"url":"#chapter-5-br-persisting-data-via-prisma","title":"Chapter 5 <br/> Persisting Data (via Prisma)"},{"url":"#prisma","title":"Prisma?"},{"url":"#nexus-plugins","title":"Nexus plugins?"},{"url":"#connect-to-your-database","title":"Connect to your database"},{"url":"#create-your-database-schema","title":"Create your database schema"},{"url":"#access-your-database","title":"Access your database"},{"url":"#try-it-out","title":"Try It Out"},{"url":"#wrapping-up","title":"Wrapping Up"}]},"frontmatter":{"title":"5. Persisting Data (via Prisma)","metaTitle":null,"metaDescription":null}}},"pageContext":{"id":"80b2a03b-b9b1-5fc6-98d4-30c870f51688","seoTitle":"5. Persisting Data (via Prisma)","seoDescription":"5. Persisting Data (via Prisma)"}}}