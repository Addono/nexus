{"componentChunkName":"component---src-layouts-article-layout-tsx","path":"/components-standalone/schema/api/api-objectType","result":{"data":{"site":{"siteMetadata":{"docsLocation":"https://github.com/graphql-nexus/docs/tree/master/content"}},"mdx":{"fields":{"slug":"/06-components-standalone/01-schema/01-api/01-api-objectType"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"objectType\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", _extends({\n    parentName: \"section\"\n  }, {\n    \"id\": \"objecttype\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }), mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#objecttype\",\n    \"aria-label\": \"objecttype permalink\",\n    \"className\": \"title-link before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"width\": \"17\",\n    \"height\": \"18\",\n    \"viewBox\": \"0 0 17 18\",\n    \"fill\": \"none\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  }), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 6.33337H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M1.5 11.6666H15.5\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M6.75 1L5 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \", mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"d\": \"M12 1L10.25 17\",\n    \"stroke\": \"#CBD5E0\",\n    \"strokeWidth\": \"2\",\n    \"strokeLineCap\": \"round\",\n    \"strokeLineJoin\": \"round\"\n  })), \"\\n      \")), \"objectType\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"objectType(typeName: string, fn: ObjectDefinitionBlock): NexusObjectType\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The most basic components of a GraphQL schema are object types, a type you can fetch from your schema, with fields:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const User = objectType({\\n  name: 'User',\\n  definition(t) {\\n    t.int('id', { description: 'Id of the user' })\\n    t.string('fullName', { description: 'Full name of the user' })\\n    t.field('status', { type: 'StatusEnum' })\\n    t.list.field('posts', {\\n      type: Post, // or \\\"Post\\\"\\n      resolve(root, args, ctx) {\\n        return ctx.getUser(root.id).posts()\\n      },\\n    })\\n  },\\n})\\n\\nconst Post = objectType({\\n  name: 'Post',\\n  definition(t) {\\n    t.int('id')\\n    t.string('title')\\n  },\\n})\\n\\nconst StatusEnum = enumType({\\n  name: 'StatusEnum',\\n  members: {\\n    ACTIVE: 1,\\n    DISABLED: 2,\\n  },\\n})\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryType\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mutationType\"), \" are shorthand for the root types.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Check the type-definitions or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/graphql-nexus/schema/tree/develop/examples\"\n  }), \"the examples\"), \" for a full illustration of the various options of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"objectType\"), \", or feel free to open a PR on the docs to help document!\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","relativePath":"06-components-standalone/01-schema/01-api/01-api-objectType.md"},"tableOfContents":{"items":[{"url":"#objecttype","title":"objectType"}]},"frontmatter":{"title":"objectType","metaTitle":null,"metaDescription":null}}},"pageContext":{"id":"66c1dac2-7160-5c45-93b6-0ffbc5f77ed1","seoTitle":"objectType","seoDescription":"objectType"}}}